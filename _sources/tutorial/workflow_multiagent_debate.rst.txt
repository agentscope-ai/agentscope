
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. I, as the affirmative side, will explain why circle A will revolve 4 times in total when it rolls around circle B one trip back to its starting point, given that the radius of circle A is 1/3 the radius of circle B.

    Let's start with some basic geometry. If the radius of circle B is R, then the radius of circle A is R/3. The circumference of a circle is given by the formula C = 2 * π * r, where r is the radius of the circle.

    The circumference of circle B (C_B) is 2 * π * R, and the circumference of circle A (C_A) is 2 * π * (R/3), which simplifies to 2 * π * R / 3.

    When circle A rolls around circle B without slipping, it must travel a distance equal to the circumference of circle B. To find out how many times circle A will revolve, we need to divide the distance traveled (which is the circumference of circle B) by the circumference of circle A:

    Number of revolutions = C_B / C_A
    = (2 * π * R) / (2 * π * R / 3)
    = 3

    However, this calculation only accounts for the rotations due to the rolling motion. We must also consider that as circle A goes around circle B, it also rotates about the center of circle B. This adds an additional revolution, making the total number of revolutions 3 + 1 = 4.

    Therefore, circle A will revolve 4 times in total.
    Bob: I, as the negative side, disagree with the conclusion that circle A will revolve 4 times in total. The calculation presented by the affirmative side is almost correct, but it overlooks a subtle point about the nature of the rotation.

    When circle A rolls around the outside of circle B, it indeed travels a distance equal to the circumference of circle B. The number of revolutions due to this rolling motion is given by the ratio of the circumferences, which is 3, as correctly calculated by the affirmative side:

    Number of revolutions (due to rolling) = C_B / C_A
    = (2 * π * R) / (2 * π * R/3)
    = 3

    However, the additional revolution that the affirmative side adds is not necessary. This is because when circle A completes its path around circle B, it has already completed all the rotations needed to return to its original orientation. The final position of circle A after traveling around the circumference of circle B is such that it has made exactly 3 full revolutions, and it's back to where it started, without the need for an extra revolution.

    Therefore, the correct number of times circle A will revolve in total is 3, not 4.
    Aggregator: The debate has concluded with two different perspectives. Alice, on the affirmative side, argues that circle A will revolve 4 times in total, taking into account both the rolling motion and the additional revolution due to the path around circle B. Bob, on the negative side, contends that the correct number of revolutions is 3, as the final position of circle A after traveling around the circumference of circle B already accounts for all the necessary rotations.

    To determine the correct answer, we need to consider the nature of the problem. When a smaller circle rolls around a larger circle without slipping, it's important to distinguish between the number of rotations about its own center and the number of times it revolves around the larger circle. The key point is that when circle A returns to its starting point, it will have made one more rotation than the number of times it has revolved around circle B.

    Alice's argument correctly identifies this. The 3 rotations due to the rolling motion plus the 1 additional rotation as it goes around the larger circle result in a total of 4 rotations. Bob's argument does not account for this additional rotation, which is why his conclusion is 3.

    Therefore, the correct answer is that circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 41.885 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
