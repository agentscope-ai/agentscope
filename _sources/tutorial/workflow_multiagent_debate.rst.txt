
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Certainly. Let's start by establishing the relationship between the two circles. If circle A has a radius of \( r \) and circle B, which is three times larger, has a radius of \( 3r \), then the circumference of circle A is \( 2\pi r \) and that of circle B is \( 2\pi (3r) = 6\pi r \).

    When circle A rolls around the outside of circle B without sliding, it will have to travel a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of A and B, i.e., \( 3r + r = 4r \). The circumference of this path is \( 2\pi (4r) = 8\pi r \).

    Since the circumference of circle A is \( 2\pi r \), the number of revolutions circle A makes as it travels the distance of \( 8\pi r \) is:

    \[ \text{Number of Revolutions} = \frac{\text{Total Distance Traveled}}{\text{Circumference of Circle A}} = \frac{8\pi r}{2\pi r} = 4 \]

    Therefore, I argue that circle A will revolve 4 times in total when it rolls around circle B one trip back to its starting point.
    Bob: I understand the calculations presented by the affirmative side, but I must point out that they have not accounted for an important aspect of the problem. When circle A rolls around circle B, it is not only traveling along the circumference of a larger circle with radius \(4r\), but it is also rotating around its own center.

    To clarify, let's break down the motion into two components: the revolution around the center of circle B and the rotation about its own center. The path length that circle A travels is indeed \(8\pi r\), as correctly calculated by the other side. However, during this travel, circle A will also rotate once for each complete loop around circle B due to the nature of rolling without sliding.

    For every full trip around the outside of circle B, circle A completes one additional revolution due to the fact that the point of contact between the two circles changes continuously. This means that in addition to the 4 revolutions calculated from the path distance, there is one more revolution because of the rolling motion itself.

    Therefore, the total number of revolutions made by circle A is:

    \[ \text{Number of Revolutions} = 4 + 1 = 5 \]

    Hence, my argument is that circle A will revolve 5 times in total when it rolls around circle B one trip back to its starting point.
    Aggregator: The debate has concluded, and both sides have presented their arguments. Alice correctly calculated the number of times circle A would revolve based on the distance it travels around circle B, which is 4 revolutions. However, Bob pointed out that there's an additional revolution due to the rolling motion of circle A around its own center as it goes around circle B.

    To resolve this, we need to understand that when a smaller circle rolls without slipping around a larger circle, it will indeed make one extra revolution. This is because after completing the path around the larger circle, the point of contact on the smaller circle will have made a full rotation relative to the initial point of contact.

    Therefore, the correct total number of revolutions for circle A is 4 (from the path length) + 1 (from the rolling motion) = 5.

    The correct answer is that circle A will revolve 5 times in total when it rolls around circle B one trip back to its starting point.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.825 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
