
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius 1/3 of circle B, rolls around circle B without sliding, it will revolve 4 times in total to return to its starting point.

    To understand this, let's consider the following:

    - The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius.
    - If the radius of circle B is \( R \), then the radius of circle A is \( \frac{R}{3} \).
    - The circumference of circle B is \( 2\pi R \) and the circumference of circle A is \( 2\pi \frac{R}{3} \).

    When circle A rolls around circle B, it will travel a distance equal to the circumference of the path it follows. This path is essentially the circumference of a circle with a radius equal to the sum of the radii of circles A and B, which is \( R + \frac{R}{3} = \frac{4R}{3} \). Therefore, the length of the path is \( 2\pi \times \frac{4R}{3} = \frac{8\pi R}{3} \).

    Since circle A does not slide, it will rotate once for every circumference it travels along. The number of rotations can be calculated by dividing the total distance traveled by the circumference of circle A:

    \[ \text{Number of revolutions} = \frac{\text{Total distance}}{\text{Circumference of circle A}} = \frac{\frac{8\pi R}{3}}{2\pi \frac{R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Thus, circle A will make 4 complete revolutions as it rolls around circle B one time.
    Bob: As the negative side, I will argue that the number of revolutions circle A makes is not 4, but 3. Here's the reasoning behind this:

    - When circle A rolls around the outside of circle B without sliding, it does indeed travel a distance equal to the circumference of the path with a radius of \( R + \frac{R}{3} = \frac{4R}{3} \), which is \( \frac{8\pi R}{3} \).

    - However, we must also consider the relative motion between the two circles. As circle A rolls around circle B, it will also rotate due to its own movement around its center. This means that for every full rotation around circle B, circle A will have an additional rotation because it has to roll over the entire circumference of circle B.

    - The total number of rotations can be found by adding the number of times circle A rotates around its own axis (which is 1 for each full trip around circle B) to the number of times it travels its own circumference along the path. Since the path is \( \frac{8\pi R}{3} \) and the circumference of circle A is \( \frac{2\pi R}{3} \), we would expect:

    \[      ext{Number of revolutions} = \frac{     ext{Total distance}}{   ext{Circumference of circle A}} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4 \]

    - But here's the key point: one of these 'revolutions' is simply the result of circle A going around circle B once, which is the same as rotating on its own axis. Therefore, we need to subtract this one revolution from the total count, leaving us with 3 actual revolutions of circle A on its own axis.

    Hence, the correct number of revolutions circle A makes while rolling around circle B is 3.
    Aggregator: The debate has concluded, and we can now determine the correct answer. The key to this problem is understanding that when circle A rolls around the outside of circle B, it will make one full rotation due to its travel around the larger circle, plus additional rotations based on the distance traveled relative to its own circumference.

    - The total path length for circle A is \( \frac{8\pi R}{3} \).
    - The number of times circle A's circumference fits into this path is 4, as calculated by both debaters.
    - However, one of these 4 'revolutions' is not a true revolution of circle A on its own axis; it is simply the result of circle A going around circle B once.

    Therefore, the number of true revolutions (rotations on its own axis) made by circle A is 3, since the 4th revolution is just the result of the path around circle B.

    The correct answer is that circle A will revolve 3 times in total as it rolls around circle B one trip back to its starting point.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.489 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
