
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total by the time it returns to its starting point.

    To understand why, we need to consider the circumference of each circle and the path that circle A takes. The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius of the circle. Let's denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B \). Given that \( r_A = \frac{1}{3}r_B \), we can calculate the circumferences:

    - Circumference of circle A: \( C_A = 2\pi r_A = 2\pi \left(\frac{1}{3}r_B\right) = \frac{2\pi r_B}{3} \)
    - Circumference of circle B: \( C_B = 2\pi r_B \)

    When circle A rolls around the outside of circle B, it follows a path equal to the circumference of a larger circle whose radius is the sum of the radii of circle A and circle B. This means the path length (P) is:

    - Path length: \( P = 2\pi (r_A + r_B) = 2\pi \left(\frac{1}{3}r_B + r_B\right) = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi r_B}{3} \)

    Since circle A does not slide, the distance it travels along this path must be an integer multiple of its own circumference. The number of revolutions (N) circle A makes is therefore the ratio of the path length to the circumference of circle A:

    - Number of revolutions: \( N = \frac{P}{C_A} = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} = \frac{8\pi r_B}{3} \times \frac{3}{2\pi r_B} = 4 \)

    Hence, circle A will revolve 4 times in total while rolling around circle B once.
    Bob: I disagree with the affirmative side's conclusion that circle A will revolve 4 times in total. While I agree with the calculations for the circumferences and the path length, the key point to consider is the relative rotation of circle A with respect to its own center as it rolls around circle B.

    When circle A completes a full trip around the outside of circle B, it not only revolves due to the path it travels but also because it must rotate once more to align with its starting orientation, since it has effectively made a full loop around circle B. This additional rotation is often overlooked and is sometimes referred to as the 'extra turn' or 'gear paradox.'

    Let's denote the number of revolutions based on the path length as \( N_{path} \) and the extra revolution due to the complete loop as \( N_{extra} \). The total number of revolutions (N) would then be:

    - Number of revolutions from the path: \( N_{path} = 3 \)
    - Extra revolution due to the loop: \( N_{extra} = 1 \)

    - Total number of revolutions: \( N = N_{path} + N_{extra} = 3 + 1 = 4 - 1 = 3 \)

    This means that when we take into account the fact that the final alignment of circle A requires an additional revolution, the actual number of revolutions circle A makes while rolling around circle B is 3, not 4.
    Aggregator: The debate is now concluded, and we can determine the correct answer. The initial calculation by Alice to find the number of revolutions based on the path length was correct; circle A will indeed travel a distance that corresponds to 4 times its own circumference while rolling around the outside of circle B.

    However, Bob correctly pointed out that there's an additional consideration regarding the orientation of circle A after it completes the loop. When circle A rolls without slipping around circle B, it must also rotate once more to align with its starting position, which means it will have completed one extra revolution in addition to the 3 revolutions due to the path length.

    Therefore, the total number of revolutions is 3 (from the path) plus 1 (the extra turn), which equals 4. It seems that Bob mistakenly subtracted 1 instead of adding it. Hence, the correct number of times circle A will revolve in total is 4, not 3. Alice's conclusion is actually correct.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 1.560 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
