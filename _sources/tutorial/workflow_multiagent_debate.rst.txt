
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Certainly. To solve the problem, we need to consider the relationship between the circumferences of the two circles and how this affects the number of revolutions circle A makes as it rolls around circle B.

    Let's denote:
    - The radius of circle B as \( r_B \).
    - The radius of circle A as \( r_A = \frac{1}{3}r_B \).

    The circumference of a circle is given by \( C = 2\pi r \). Therefore, the circumferences of the circles are:
    - Circumference of circle B: \( C_B = 2\pi r_B \).
    - Circumference of circle A: \( C_A = 2\pi r_A = 2\pi \left(\frac{1}{3}r_B\right) = \frac{2\pi r_B}{3} \).

    When circle A rolls around circle B without sliding, it travels a distance equal to the circumference of the path it follows, which in this case is the circumference of a circle with a radius equal to the sum of the radii of circle A and circle B, i.e., \( r_B + r_A = r_B + \frac{1}{3}r_B = \frac{4}{3}r_B \).

    Thus, the total distance that circle A will travel is:
    - Total distance: \( C_{total} = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi r_B}{3} \).

    To find out how many times circle A revolves, we divide the total distance traveled by the circumference of circle A:
    - Number of revolutions: \( \frac{C_{total}}{C_A} = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} = \frac{8\pi r_B}{3} \times \frac{3}{2\pi r_B} = \frac{8}{2} = 4 \).

    Therefore, I assert that circle A will revolve 4 times in total as it rolls around circle B.
    Bob: I understand the calculations presented by the affirmative side, but I must point out a subtle detail that has been overlooked. When circle A rolls around the outside of circle B, it is not only traveling the distance equal to the circumference of the path (which is \( \frac{8\pi r_B}{3} \)), but it is also rotating around its own center due to the curvature of circle B.

    The number of revolutions a circle makes when rolling around another circle is given by the formula:

    \[      ext{Number of Revolutions} = \frac{     ext{Circumference of the path}}{        ext{Circumference of the rolling circle}} + 1 \]

    This additional +1 accounts for the fact that as circle A completes the path around circle B, it will have made one extra revolution due to the rotation around its own center.

    So, using the previously calculated circumferences, we get:

    - Circumference of the path: \( C_{total} = \frac{8\pi r_B}{3} \)
    - Circumference of circle A: \( C_A = \frac{2\pi r_B}{3} \)

    Thus, the number of revolutions is:

    \[      ext{Number of Revolutions} = \frac{C_{total}}{C_A} + 1 = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} + 1 = 4 + 1 = 5 \]

    Therefore, I assert that circle A will actually revolve 5 times in total as it rolls around circle B.
    Aggregator: The debate has concluded with two different answers. Alice calculated that circle A will revolve 4 times, while Bob pointed out that an additional revolution must be accounted for due to the rotation of circle A around its own center as it rolls around circle B, resulting in a total of 5 revolutions. Bob's argument is correct, and the number of revolutions that circle A will make as it rolls around circle B is 5.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 31.129 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
