
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, which has a radius one-third that of circle B, rolls around the outside of circle B without sliding, it will complete 4 revolutions in total.

    To understand this, we need to consider the circumference of each circle. If the radius of circle B is R, then the radius of circle A is R/3. The circumference of a circle is given by the formula 2πr, where r is the radius of the circle.

    - The circumference of circle B (C_B) is 2πR.
    - The circumference of circle A (C_A) is 2π(R/3) = (2/3)πR.

    When circle A rolls around the outside of circle B, it travels a distance equal to the circumference of the path it takes. This path is the circumference of a larger circle whose radius is the sum of the radii of circles A and B, or R + R/3, which equals (4/3)R. The circumference of this path (C_path) is 2π(4/3)R = (8/3)πR.

    The number of revolutions circle A makes as it rolls along this path is the distance traveled (the circumference of the path) divided by the circumference of circle A:

    Revolutions = C_path / C_A
                = (8/3)πR / (2/3)πR
                = (8/3) / (2/3)
                = 4

    Therefore, circle A will revolve 4 times in total as it rolls around circle B and returns to its starting point.
    Bob: As the negative side, I disagree with the conclusion that circle A will complete 4 revolutions around circle B. Let's re-examine the problem and the calculation to see where the discrepancy may lie.

    The key point is to understand that when a smaller circle rolls around a larger one without sliding, it does not only revolve because of the distance it travels along the path, but also due to the rotation about its own center as it follows the curvature of the larger circle.

    - The circumference of circle B (C_B) is 2πR.
    - The circumference of circle A (C_A) is 2/3πR, as previously stated.

    When circle A rolls around the outside of circle B, it indeed travels a distance equal to the circumference of a circle with a radius of R + R/3, which is 8/3πR. However, this is the distance traveled by a point on the circumference of circle A, not the number of its own revolutions.

    To find the number of self-revolutions of circle A, we need to consider the ratio of the two circumferences, C_B / C_A, which is:

    Revolutions = C_B / C_A
                = (2πR) / (2/3πR)
                = 3

    This means that for every full trip around circle B, circle A will have made 3 full rotations about its own axis. But since circle A is also moving around circle B, it must make an additional revolution to account for the orbit around circle B. Therefore, the total number of revolutions is:

    Total Revolutions = Rotations about its own axis + 1 (for the orbit)
                      = 3 + 1
                      = 4

    Upon closer inspection, the original calculation appears to be correct, and the number of total revolutions of circle A is indeed 4. My apologies for any confusion, but I now agree with the affirmative side's answer.
    Aggregator: The debate has concluded and both debaters have agreed that the correct number of total revolutions circle A will make as it rolls around circle B is 4. The initial argument from the affirmative side was accurate, and the negative side, after re-evaluating their stance, also concurred with this conclusion. Therefore, the correct answer to the topic is that circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 35.503 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
