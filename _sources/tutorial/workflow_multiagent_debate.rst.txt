
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the solution to the problem of how many times circle A, with a radius 1/3 that of circle B, will revolve as it rolls around the outside of circle B without sliding.

    Let's denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B \). Given that \( r_A = \frac{1}{3} r_B \), we can say that the circumference of circle A is \( C_A = 2\pi r_A \) and the circumference of circle B is \( C_B = 2\pi r_B \).

    When circle A rolls around the outside of circle B, it travels a distance equal to the circumference of the path it follows. This path is not just the circumference of circle B, but also includes the extra distance due to the radius of circle A. Therefore, the total path length is the circumference of a circle with a radius equal to \( r_B + r_A \).

    The total path length is:
    \[ C_{path} = 2\pi (r_B + r_A) \]
    \[ C_{path} = 2\pi \left(r_B + \frac{1}{3}r_B\right) \]
    \[ C_{path} = 2\pi \left(\frac{4}{3}r_B\right) \]
    \[ C_{path} = \frac{8\pi}{3} r_B \]

    Now, to find out how many times circle A revolves, we need to divide the total path length by the circumference of circle A:
    \[ \text{Number of revolutions} = \frac{C_{path}}{C_A} \]
    \[ \text{Number of revolutions} = \frac{\frac{8\pi}{3} r_B}{2\pi \frac{1}{3} r_B} \]
    \[ \text{Number of revolutions} = \frac{\frac{8\pi}{3} r_B}{\frac{2\pi}{3} r_B} \]
    \[ \text{Number of revolutions} = \frac{8\pi}{3} \cdot \frac{3}{2\pi} \]
    \[ \text{Number of revolutions} = \frac{8}{2} \]
    \[ \text{Number of revolutions} = 4 \]

    Hence, circle A will revolve 4 times in total as it rolls around the outside of circle B back to its starting point.
    Bob: I appreciate the detailed explanation provided by the affirmative side. However, I must disagree with the conclusion that circle A will revolve 4 times as it rolls around the outside of circle B. The mistake lies in the interpretation of the total number of revolutions.

    When circle A rolls around circle B, it has to cover a distance equal to the circumference of the path which is \(2\pi (r_B + r_A)\). This is correct. But we also need to account for the fact that while circle A is rolling around circle B, it is not only traveling along this path but also rotating around its own center.

    The number of rotations about its own center is given by the ratio of the path length to the circumference of circle A. But since circle A is also orbiting around circle B, we have to add one more revolution due to the orbital motion. This extra revolution is often overlooked but can be understood by considering how many times the point of tangency between the two circles would come back to the same position relative to an external observer.

    Thus, the total number of revolutions is:

    \[      ext{Number of revolutions} = \frac{C_{path}}{C_A} + 1 \]
    \[      ext{Number of revolutions} = 4 + 1 \]
    \[      ext{Number of revolutions} = 5 \]

    Therefore, circle A will actually complete 5 full revolutions when it rolls around circle B and returns to its starting point.
    Aggregator: The debate has concluded, and the correct answer is that circle A will revolve 4 times in total as it rolls around the outside of circle B back to its starting point. The key to understanding this is recognizing that the number of revolutions is calculated by the ratio of the path length (circumference of the larger circle including the radius of the smaller one) to the circumference of the smaller circle. Bob's argument about adding an extra revolution due to the orbital motion is a common misconception; the point of tangency does indeed return to the same position after 4 revolutions, without the need for an additional count.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 48.744 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
