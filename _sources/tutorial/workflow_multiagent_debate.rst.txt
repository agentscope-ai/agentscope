
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when circle A, which has a radius one-third of that of circle B, rolls around the outside of circle B without sliding, it will complete 4 revolutions in total.

    To understand this, we need to look at the circumference of each circle. The circumference of a circle is given by the formula \( C = 2\pi r \), where \( r \) is the radius of the circle. Let's denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B \). Given that \( r_A = \frac{1}{3}r_B \), we can say:

    - The circumference of circle A, \( C_A \), is \( 2\pi r_A = 2\pi \left(\frac{1}{3}r_B\right) = \frac{2\pi r_B}{3} \).
    - The circumference of circle B, \( C_B \), is \( 2\pi r_B \).

    When circle A rolls around the outside of circle B, it will travel a distance equal to the circumference of the path it follows. This path is not just the circumference of circle B; since circle A is rolling around the outside, the path it follows is actually the circumference of a larger circle with a radius equal to \( r_A + r_B \), or \( \frac{1}{3}r_B + r_B = \frac{4}{3}r_B \).

    The length of the path (circumference of the larger circle) that circle A travels is:
    \[ C_{path} = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi r_B}{3} \]

    Now, to find out how many times circle A revolves, we divide the length of the path by the circumference of circle A:
    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} = \frac{8\pi r_B}{3} \times \frac{3}{2\pi r_B} = 4 \]

    Therefore, circle A will revolve 4 times as it rolls around the outside of circle B once.
    Bob: I must respectfully disagree with the affirmative side's conclusion that circle A will revolve 4 times. The mistake lies in the interpretation of how the revolution count is determined when one circle rolls around another.

    When a smaller circle (circle A) rolls without sliding around the outside of a larger circle (circle B), the number of revolutions is not simply the ratio of the path length to the circumference of the smaller circle, as was suggested. Instead, we need to account for the fact that as circle A rolls around, it also rotates around its own center due to the curvature of the path.

    The correct way to calculate the number of revolutions is to consider the relative motion of the two circles. As circle A rolls around circle B, it completes one full circuit around circle B, which contributes to its total revolution count. However, because circle A is also rotating on its own axis, we need to add an additional revolution to account for this rotation.

    Since the radius of circle A is \( \frac{1}{3} \) of the radius of circle B, the circumference of circle A is \( \frac{1}{3} \) of the circumference of circle B. When circle A goes around circle B once, it covers a distance equal to the circumference of the path, which is indeed \( \frac{8\pi r_B}{3} \). But the number of revolutions is given by:

    - One revolution for going around the circumference of the path.
    - An additional revolution due to the rolling motion around its own axis.

    Therefore, the total number of revolutions is \( 1 + 3 = 4 - 1 = 3 \) because the first revolution is already included in the path length and should not be counted again.

    Hence, circle A will actually revolve 3 times as it rolls around the outside of circle B once.
    Aggregator: The debate has concluded, and after careful consideration of both arguments, the correct number of revolutions can be determined. The key to solving this problem is understanding that when a smaller circle (circle A) rolls around the outside of a larger circle (circle B), it will revolve once for every full circuit around the larger circle, plus an additional number of revolutions due to its own rotation.

    Alice correctly calculated the length of the path that circle A travels as \( \frac{8\pi r_B}{3} \). To find the number of revolutions, we divide this path length by the circumference of circle A, which is \( \frac{2\pi r_B}{3} \):

    \[      ext{Number of Revolutions} = \frac{\frac{8\pi r_B}{3}}{\frac{2\pi r_B}{3}} = 4 \]

    Bob's argument about adding an additional revolution due to the rolling motion around its own axis is not necessary because the division already accounts for the total rotations, including the one from going around the larger circle and the three from its own spinning.

    Therefore, the correct answer is that circle A will revolve 4 times as it rolls around the outside of circle B without sliding. Alice's conclusion is correct.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.663 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
