
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Certainly. Let's begin by stating that the number of revolutions circle A makes as it rolls around circle B can be determined using the relationship between their circumferences and the concept of rolling without slipping.

    Given that the radius of circle A (r_A) is 1/3 the radius of circle B (r_B), we can express this as r_A = (1/3)r_B. The circumference of a circle is given by 2π times the radius, so the circumferences are:

    - Circumference of circle A: C_A = 2π * r_A
    - Circumference of circle B: C_B = 2π * r_B

    Since r_A = (1/3)r_B, we have C_A = (1/3)C_B. This means that for every full rotation around its own center, circle A travels a distance equal to (1/3) of the circumference of circle B.

    When circle A rolls around the outside of circle B, it will travel a distance equal to the circumference of circle B plus its own circumference, because it starts and ends at the same point on circle B. That is, the total distance traveled by the center of circle A is C_B + 2 * C_A (since it has to roll over the diameter of circle A twice, once going out and once coming back).

    But since C_A = (1/3)C_B, the total distance D traveled by the center of circle A is:

    D = C_B + 2 * (1/3)C_B = C_B + (2/3)C_B = (5/3)C_B

    The number of revolutions N that circle A makes is the total distance traveled divided by the circumference of circle A:

    N = D / C_A = (5/3)C_B / (1/3)C_B = 5

    Therefore, my stance is that circle A will revolve 5 times in total as it rolls around circle B one trip back to its starting point.
    Bob: I disagree with the affirmative side's conclusion. The key point to consider is that when circle A rolls around circle B, it only needs to travel a distance equal to the circumference of circle B, not the sum of the circumferences of both circles. Since there is no relative sliding and the circles are externally tangent, circle A will roll along the path which is the circumference of circle B.

    Let's denote the radius of circle B as \( r_B \) and the radius of circle A as \( r_A = \frac{1}{3}r_B \). The number of revolutions circle A makes is the ratio of the distance it travels (which is the circumference of circle B, \( 2\pi r_B \)) to its own circumference (\( 2\pi r_A \)):

    \[      ext{Number of Revolutions} = \frac{2\pi r_B}{2\pi r_A} = \frac{r_B}{r_A} = \frac{r_B}{\frac{1}{3}r_B} = 3 \]

    Therefore, my stance is that circle A will revolve 3 times in total as it rolls around circle B one trip back to its starting point.
    Aggregator: The debate is now finished. The correct answer to the problem of how many times circle A will revolve as it rolls around circle B, with the given radii relationship, is 3. Bob's argument correctly identifies that the number of revolutions is determined by the ratio of the circumferences, which is 3 in this case. Alice's calculation included an unnecessary addition of the diameter of circle A, which does not apply when considering the pure rolling motion without slipping.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 37.432 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
