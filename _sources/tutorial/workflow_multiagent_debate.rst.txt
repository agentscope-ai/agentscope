
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, which has a radius one-third that of circle B, rolls around the outside of circle B without sliding, it will complete 4 revolutions in total by the time it returns to its starting point.

    To understand this, let's look at the problem mathematically. The circumference of a circle is given by the formula C = 2 * π * r, where r is the radius of the circle. If we denote the radius of circle B as R, then the radius of circle A would be (1/3)R. Therefore, the circumferences are:

    - Circle B: C_B = 2 * π * R
    - Circle A: C_A = 2 * π * (1/3)R = (2/3)πR

    When circle A rolls around circle B, it travels a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of both circles, or R + (1/3)R = (4/3)R. Thus, the length of the path is:

    - Path Length: C_path = 2 * π * (4/3)R = (8/3)πR

    The number of revolutions circle A makes is the distance it travels (the path length) divided by its own circumference. So, we have:

    - Number of Revolutions: N = C_path / C_A = ((8/3)πR) / ((2/3)πR) = (8/3) / (2/3) = 4

    Therefore, circle A will make 4 revolutions as it rolls around the outside of circle B and returns to its starting position.
    Bob: As the negative side, I must clarify that while the mathematics provided by the affirmative side is correct in calculating the path length and the number of revolutions based on the distance traveled, there is a subtle point about the nature of the revolution that needs to be addressed.

    When circle A rolls around circle B, it does not only revolve due to the distance it travels along the circumference of the path. There's also an additional rotation because as circle A rolls, it must turn to stay tangent to circle B, which adds to its total number of revolutions. This additional rotation is often overlooked but is critical to the problem.

    To put it more simply, when circle A has completed one full trip around circle B, it will have made 3 revolutions due to the path length, but it will also have made 1 additional revolution due to the fact that it has to rotate once completely to return to its original orientation relative to an external observer. Therefore, the total number of revolutions is 3 (from the path) + 1 (from the extra rotation) = 4. 

    I realize now that my initial disagreement was based on a misunderstanding; the correct answer is indeed 4 revolutions, as the affirmative side has correctly calculated. I apologize for the confusion.
    Aggregator: The debate has concluded, and both debaters have come to the correct understanding. The number of times circle A will revolve as it rolls around the outside of circle B, which has a radius three times that of circle A, is 4. This takes into account both the distance traveled along the path and the additional rotation needed for circle A to return to its original orientation. Therefore, the correct answer is 4 revolutions.

    The debate is finished, and the correct answer is:  4 revolutions




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 48.150 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
