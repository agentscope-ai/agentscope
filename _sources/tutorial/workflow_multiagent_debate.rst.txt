
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of circle B, rolls around circle B without sliding, it will revolve 4 times in total by the time it returns to its starting point.

    To understand this, let's consider the following:

    1. The circumference of a circle is given by \(C = 2\pi r\), where \(r\) is the radius.
    2. If the radius of circle B is \(R\), then the radius of circle A is \(\frac{1}{3}R\).
    3. The circumference of circle B is \(2\pi R\), and the circumference of circle A is \(2\pi \times \frac{1}{3}R = \frac{2\pi R}{3}\).
    4. When circle A rolls around circle B, it travels a distance equal to the circumference of circle B, which is \(2\pi R\).
    5. Since there is no relative sliding, the distance traveled by circle A is also the distance it has rolled along its own circumference. Therefore, the number of revolutions circle A makes while rolling around circle B is the distance traveled divided by the circumference of circle A, which is \(\frac{2\pi R}{\frac{2\pi R}{3}} = 3\).

    However, we must also account for the fact that as circle A completes its path around circle B, it will have made an additional revolution due to the curvature of the path. This is because the center of circle A will have moved in a circular path around the center of circle B, which constitutes an extra rotation.

    Therefore, the total number of revolutions circle A makes is 3 (from the rolling) + 1 (from the circular path of the center) = 4.

    This concludes my argument for the number of revolutions circle A will make.
    Bob: I understand the argument presented by the affirmative side, but I must respectfully disagree with the conclusion that circle A will revolve 4 times in total. The key point to consider here is the nature of the motion and how we count the revolutions.

    When circle A rolls around the outside of circle B, it does indeed travel a distance equal to the circumference of circle B, which is \(2\pi R\). Given that the radius of circle A is \(\frac{1}{3}R\), its own circumference is \(\frac{2\pi R}{3}\). Therefore, as circle A rolls without sliding, it would complete exactly 3 of its own circumferences while traveling the full circumference of circle B.

    However, the additional revolution mentioned by the affirmative side, which is due to the circular path of the center of circle A, is already accounted for within these 3 revolutions. To see why, imagine marking a single point on the circumference of circle A. As circle A rolls around circle B, this point will touch the surface of circle B at various points along the way. By the time circle A has completed one trip around circle B, the marked point will have made contact with the starting point again, indicating that it has completed 3 full rotations relative to the ground (or the surface of circle B).

    The apparent extra revolution comes from the perspective of an observer who is stationary relative to the center of circle B. From this viewpoint, the marked point on circle A will seem to have undergone an additional rotation because the entire circle A has rotated around the center of circle B. But this is not an additional physical revolution of the circle; rather, it's a result of the change in reference frame. The actual number of physical rotations of circle A about its own axis remains 3.

    Thus, my position is that when circle A completes a trip around circle B, it will have revolved 3 times, not 4.
    Aggregator: The debate has concluded, and after careful consideration of the arguments presented by both sides, the correct answer is that circle A will revolve 3 times in total as it rolls around circle B without sliding. The key point is that the additional apparent revolution due to the circular path of the center of circle A is a result of the change in the reference frame and not an extra physical revolution of the circle about its own axis. Therefore, the number of revolutions is exactly 3, which corresponds with the negative side's argument.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 41.460 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
