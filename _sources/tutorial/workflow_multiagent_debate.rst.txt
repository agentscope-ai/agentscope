
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: To solve this problem, we need to understand the relationship between the two circles and how the smaller circle (circle A) revolves around the larger one (circle B).

    Let's denote:
    - The radius of circle A as \( r_A \).
    - The radius of circle B as \( r_B \).

    Given that the radius of circle A is 1/3 the radius of circle B, we can write:
    \[ r_A = \frac{1}{3} r_B \]

    When circle A rolls around circle B without sliding, it will revolve around its own center as well as around the center of circle B. The number of revolutions that circle A makes is determined by the ratio of the circumference of the path it travels (which is the circumference of a circle with a radius equal to the sum of the radii of both circles) to the circumference of circle A.

    The total distance that the center of circle A travels when it goes around circle B once is the circumference of a circle with radius \( r_A + r_B \):
    \[ \text{Circumference of the path} = 2\pi (r_A + r_B) \]

    Since \( r_A = \frac{1}{3} r_B \), we can substitute this into the equation:
    \[ \text{Circumference of the path} = 2\pi \left( \frac{1}{3} r_B + r_B \right) = 2\pi \left( \frac{4}{3} r_B \right) = \frac{8}{3} \pi r_B \]

    The circumference of circle A is:
    \[ \text{Circumference of circle A} = 2\pi r_A = 2\pi \left( \frac{1}{3} r_B \right) = \frac{2}{3} \pi r_B \]

    The number of revolutions of circle A is the ratio of the circumference of the path to the circumference of circle A:
    \[ \text{Number of Revolutions} = \frac{\text{Circumference of the path}}{\text{Circumference of circle A}} = \frac{\frac{8}{3} \pi r_B}{\frac{2}{3} \pi r_B} = \frac{8}{3} \times \frac{3}{2} = 4 \]

    Therefore, circle A will make 4 revolutions in total as it rolls around circle B once.
    Bob: I am indeed taking the negative side in this debate. However, after carefully reviewing the calculations and the reasoning provided by the affirmative side, I must concede that the mathematics is sound. The number of revolutions of circle A as it rolls around circle B without sliding is correctly calculated to be 4.

    The key points are:
    - The radius relationship: \( r_A = \frac{1}{3} r_B \)
    - The path traveled by the center of circle A: \( 2\pi (r_A + r_B) \)
    - The circumference of circle A: \( 2\pi r_A \)
    - The number of revolutions: \( \frac{2\pi (r_A + r_B)}{2\pi r_A} = \frac{r_A + r_B}{r_A} = \frac{\frac{1}{3}r_B + r_B}{\frac{1}{3}r_B} = \frac{\frac{4}{3}r_B}{\frac{1}{3}r_B} = 4 \)

    Given these correct steps and the proper application of geometric principles, there is no mathematical error in the conclusion. Therefore, I cannot provide a valid counter-argument based on the problem's given conditions. The answer is indeed 4 revolutions.
    Aggregator: The debate has concluded and both debaters have agreed on the solution. The correct number of revolutions that circle A will make as it rolls around circle B, given that the radius of circle A is 1/3 the radius of circle B, is 4. Therefore, the answer to the problem is 4.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.115 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
