
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle A, with a radius one-third that of a larger circle B, rolls around the outside of circle B without sliding, it will complete 4 full revolutions in total by the time it returns to its starting point.

    To understand why, let's consider the following:

    1. The circumference of a circle is given by the formula \( C = 2\pi r \), where \( r \) is the radius of the circle.
    2. Let's denote the radius of circle A as \( r \) and the radius of circle B as \( 3r \).
    3. The circumference of circle A is \( 2\pi r \).
    4. The circumference of circle B is \( 2\pi (3r) = 6\pi r \).

    When circle A rolls around circle B, it has to travel a distance equal to the circumference of circle B, which is \( 6\pi r \). Since circle A does not slide, each time it completes a revolution, it travels a distance equal to its own circumference, \( 2\pi r \).

    The number of revolutions circle A makes is the distance traveled divided by the circumference of circle A:
    \[ \text{Number of Revolutions} = \frac{\text{Circumference of Circle B}}{\text{Circumference of Circle A}} = \frac{6\pi r}{2\pi r} = 3. \]

    However, this calculation only accounts for the linear distance covered. As circle A rolls around circle B, it also rotates around the center of circle B. This additional rotation is equivalent to one more revolution, due to the geometric relationship between the two circles.

    Thus, the total number of revolutions made by circle A is 3 (from the linear distance) plus 1 (from the rotational motion), which equals 4 full revolutions.
    Bob: I disagree with the affirmative side's conclusion that circle A will complete 4 full revolutions. The mistake in their argument lies in the way they count the additional revolution due to the rotational motion around the center of circle B. Let me explain why I believe the correct number of revolutions is 3, not 4.

    When circle A rolls around circle B, it indeed travels a distance equal to the circumference of circle B, which is \(6\pi r\). For each full revolution, circle A covers a distance of its own circumference, \(2\pi r\). Therefore, the number of revolutions based on the distance traveled is:

    \[      ext{Number of Revolutions} = \frac{     ext{Circumference of Circle B}}{        ext{Circumference of Circle A}} = \frac{6\pi r}{2\pi r} = 3. \]

    However, we must also consider the rotation of circle A around the center of circle B. When circle A completes one trip around circle B, it has effectively turned 360 degrees relative to an external observer. This turning is already accounted for in the 3 revolutions calculated above, as each point on the circumference of circle A touches the ground (or the surface of circle B) exactly once per revolution.

    The additional revolution suggested by the affirmative side is a misunderstanding of the kinematics of rolling without slipping. The 3 revolutions include both the linear distance covered and the circular path around the larger circle. Thus, there is no need to add an extra revolution.

    In summary, when circle A rolls around the outside of circle B, it will make exactly 3 full revolutions, not 4, by the time it returns to its starting point.
    Aggregator: The debate has concluded, and we can now determine the correct answer. The key to this problem is understanding that when a smaller circle rolls around a larger one without slipping, it will revolve not only due to the linear distance traveled but also because of its path around the larger circle.

    When circle A (with radius \( r \)) rolls around circle B (with radius \( 3r \)), the total distance it travels along the circumference of circle B is \( 6\pi r \). Since the circumference of circle A is \( 2\pi r \), it will make 3 revolutions based on the linear distance covered:

    \[      ext{Number of Revolutions} = \frac{6\pi r}{2\pi r} = 3. \]

    However, as circle A makes a complete trip around circle B, it also rotates around the center of circle B. This means that by the time circle A returns to its starting point, it has completed an additional revolution due to this circular motion. Therefore, the total number of revolutions is 3 (from the linear distance) plus 1 (from the rotation around the center of circle B).

    Thus, the correct answer is that circle A will make 4 full revolutions in total. Alice's argument is correct, and Bob's argument does not account for the additional revolution due to the circular path around the center of the larger circle.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 58.587 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
