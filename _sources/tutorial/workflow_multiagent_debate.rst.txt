
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius 1/3 of that of circle B, rolls around the outside of circle B without sliding, it will complete 4 full revolutions by the time it returns to its starting point.

    To understand why, let's break down the problem. The circumference of a circle is given by the formula \( C = 2\pi r \), where \( r \) is the radius of the circle. If we denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B \), then according to the problem, \( r_A = \frac{1}{3}r_B \).

    When circle A rolls around circle B, it has to travel a distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of circles A and B (since they are externally tangent). This distance is:

    \[ C_{path} = 2\pi (r_A + r_B) \]

    Substituting \( r_A \) with \( \frac{1}{3}r_B \):

    \[ C_{path} = 2\pi \left(\frac{1}{3}r_B + r_B\right) = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi}{3}r_B \]

    The number of revolutions circle A makes is the total distance traveled divided by the circumference of circle A itself:

    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} = \frac{\frac{8\pi}{3}r_B}{2\pi r_A} \]

    Since \( r_A = \frac{1}{3}r_B \), we can substitute \( r_A \) in the equation:

    \[ \text{Number of Revolutions} = \frac{\frac{8\pi}{3}r_B}{2\pi \left(\frac{1}{3}r_B\right)} = \frac{\frac{8\pi}{3}r_B}{\frac{2\pi}{3}r_B} = \frac{8}{2} = 4 \]

    Therefore, circle A will revolve 4 times in total as it rolls around circle B.
    Bob: I must respectfully disagree with the affirmative side's conclusion that circle A will revolve 4 times as it rolls around circle B. The error in the reasoning lies in the interpretation of how many times a circle revolves when rolling around another.

    When circle A, with radius \( r_A \), rolls without slipping around the circumference of circle B, which has radius \( r_B \), the path that the center of circle A follows is a circle with a radius equal to the sum of the two radii, \( r_A + r_B \). Since \( r_A = \frac{1}{3}r_B \), the radius of the path of the center of circle A is:

    \[ r_{path} = r_A + r_B = \frac{1}{3}r_B + r_B = \frac{4}{3}r_B \]

    The length of this path, or the distance that the center of circle A travels, is the circumference of this larger circle:

    \[ C_{path} = 2\pi r_{path} = 2\pi \left(\frac{4}{3}r_B\right) = \frac{8\pi}{3}r_B \]

    However, the number of revolutions that circle A makes is not simply the total path length divided by its own circumference, because each time circle A completes a full revolution around its own center, it also moves forward along the path by a distance equal to its circumference. To find the number of revolutions, we need to consider the relative motion of the point of contact on circle A.

    As circle A rolls around circle B, the point of contact on circle A will touch every point on the circumference of circle B exactly once. This means that circle A will have made one more revolution than the number of times it would have if it were just moving in a straight line for the same distance. In other words, for a complete trip around circle B, circle A will make one additional revolution due to the curvature of the path.

    The correct calculation is thus:

    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} + 1 = \frac{\frac{8\pi}{3}r_B}{2\pi r_A} + 1 \]

    Substituting \( r_A = \frac{1}{3}r_B \):

    \[ \text{Number of Revolutions} = \frac{\frac{8\pi}{3}r_B}{2\pi \left(\frac{1}{3}r_B\right)} + 1 = \frac{8}{2} + 1 = 4 + 1 = 5 \]

    Therefore, circle A will actually revolve 5 times in total as it rolls around circle B.
    Aggregator: The debate has concluded, and after reviewing the arguments, the correct answer is that circle A will revolve 4 times in total as it rolls around circle B. The key point to consider is that when a smaller circle rolls without slipping around the outside of a larger circle, the number of revolutions is given by the ratio of the path length (circumference of the path followed by the center of the smaller circle) to the circumference of the smaller circle itself. In this case, the calculation provided by Alice is accurate. There is no need to add an extra revolution due to the curvature of the path, as the rolling motion already accounts for the distance traveled along the path. Therefore, the correct answer is 4 revolutions, not 5.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 56.046 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
