
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius 1/3 that of circle B, rolls around the outside of circle B, it will revolve 4 times in total to return to its starting point.

    To understand this, let's break down the problem:

    - The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius.
    - Let's denote the radius of circle B as \( R \). Thus, the radius of circle A is \( \frac{1}{3}R \).
    - The circumference of circle B is then \( 2\pi R \).
    - The circumference of circle A is \( 2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3} \).

    When circle A rolls around circle B, it will travel a distance equal to the circumference of circle B. To find out how many times circle A revolves, we divide the distance traveled (the circumference of circle B) by the circumference of circle A:

    \[ \text{Number of revolutions} = \frac{\text{Circumference of circle B}}{\text{Circumference of circle A}} = \frac{2\pi R}{\frac{2\pi R}{3}} = \frac{2\pi R \cdot 3}{2\pi R} = 3 \]

    However, there is an additional revolution because as circle A rolls around circle B, it also completes one full rotation about its own center due to the curvature of circle B. This is known as the rolling without slipping condition, which means for every point on the circumference of circle A, it touches the surface of circle B exactly once during the complete trip around.

    Therefore, the total number of revolutions is 3 (from the distance traveled) plus 1 (from the rotation about its own center) which equals 4. Hence, my stance is that circle A will revolve 4 times in total.
    Bob: As the negative side, I will argue that the number of times circle A revolves around its own center as it rolls around the circumference of circle B is 3, not 4.

    Let's revisit the key points:

    - The radius of circle A is \( \frac{1}{3} \) the radius of circle B.
    - The circumference of circle A is \( \frac{2\pi R}{3} \), where \( R \) is the radius of circle B.
    - The distance that circle A travels when rolling around circle B is equal to the circumference of circle B, which is \( 2\pi R \).

    When circle A rolls around the outside of circle B without slipping, for each full trip around circle B, circle A will have rolled a distance equal to the circumference of circle B. The number of revolutions circle A makes while covering this distance is given by the ratio of the circumference of circle B to the circumference of circle A:

    \[      ext{Number of revolutions} = \frac{     ext{Circumference of circle B}}{        ext{Circumference of circle A}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    It's important to note that in the case of a smaller circle rolling around a larger one, the smaller circle does not make an additional revolution due to the curvature of the larger circle. This is because the point of contact on the smaller circle is always moving forward, and after completing the path around the larger circle, the orientation of the smaller circle has not changed relative to a distant observer. In other words, the concept of an 'extra' rotation does not apply here; the three rotations account for both the movement along the path and the change in orientation.

    Therefore, my stance is that circle A will revolve exactly 3 times in total as it rolls around the circumference of circle B.
    Aggregator: The debate has concluded, and we can determine the correct answer. The key to solving this problem is to understand that when circle A rolls around the outside of circle B, it will indeed make 3 revolutions as it travels a distance equal to the circumference of circle B. However, an additional consideration is the fact that while rolling, circle A also rotates once about its own center due to the curvature of the path, which is circle B. This is known as the 'extra' rotation or the parallel transport effect.

    Thus, the total number of revolutions is 3 (from the distance traveled) plus 1 (from the rotation about its own center), making a total of 4 revolutions.

    Therefore, Alice's argument is correct, and the correct answer is that circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 58.894 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
