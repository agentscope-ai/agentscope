
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle (circle A) with a radius one-third of a larger circle (circle B) rolls around the outside of the larger circle without sliding, it will complete 4 full revolutions by the time it returns to its starting point.

    To understand why, let's break down the problem:

    - The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius.
    - If the radius of circle A is \( \frac{1}{3} \) of the radius of circle B, then we can denote the radius of circle B as \( R \) and the radius of circle A as \( \frac{R}{3} \).
    - The circumference of circle B is \( 2\pi R \), and the circumference of circle A is \( 2\pi \left(\frac{R}{3}\right) = \frac{2\pi R}{3} \).

    When circle A rolls around circle B, it has to travel a distance equal to the circumference of the path it follows. This path is not just the circumference of circle B, but also includes the extra distance due to the radius of circle A. Thus, the total path length is the circumference of a circle with a radius of \( R + \frac{R}{3} = \frac{4R}{3} \). The path length is therefore \( 2\pi \left(\frac{4R}{3}\right) = \frac{8\pi R}{3} \).

    The number of revolutions circle A makes is the total path length divided by the circumference of circle A:
    \[ \text{Revolutions} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4 \]

    Therefore, circle A will make exactly 4 revolutions as it rolls around the outside of circle B once.
    Bob: I understand the argument presented by the affirmative side, but I must respectfully disagree with the conclusion that circle A will make exactly 4 revolutions. The mistake lies in the calculation of the path length that circle A travels.

    Let's revisit the problem:

    - Circle B has a radius \( R \) and a circumference of \( 2\pi R \).
    - Circle A, with a radius \( \frac{R}{3} \), has a circumference of \( \frac{2\pi R}{3} \).

    When circle A rolls around the outside of circle B, it does not travel along the circumference of a larger circle with radius \( \frac{4R}{3} \). Instead, it rolls along the circumference of circle B, which is \( 2\pi R \). For each point on the circumference of circle A to touch the circumference of circle B, circle A must rotate once for every full distance of its own circumference it travels along the circumference of circle B.

    The number of revolutions circle A makes is the total distance it travels (the circumference of circle B) divided by the circumference of circle A:
    \[      ext{Revolutions} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    Therefore, circle A will make exactly 3 revolutions as it rolls around the outside of circle B without sliding. The extra revolution suggested by the affirmative side comes from a misunderstanding of the actual path traveled by the center of circle A.
    Aggregator: The debate has concluded with two different answers. Alice argues that circle A will make 4 revolutions, while Bob contends that it will make 3 revolutions. After reviewing both arguments, the correct answer is that circle A will make 3 revolutions as it rolls around the outside of circle B.

    Bob's argument correctly identifies that the path length that circle A travels is the circumference of circle B, which is \(2\pi R\). The number of times circle A revolves is the total distance traveled (the circumference of circle B) divided by the circumference of circle A, which indeed results in 3 revolutions. Alice's mistake was in calculating the path length as if the center of circle A were traveling along a larger circle, which is not the case for the problem at hand.

    Therefore, the correct answer is that circle A will revolve 3 times in total.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 8.802 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
