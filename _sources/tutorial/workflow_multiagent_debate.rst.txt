
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. I, as the affirmative side, will argue that circle A will revolve 4 times in total when it rolls around the circumference of circle B without sliding. Here's my reasoning: Let's denote the radius of circle A as \( r \) and the radius of circle B as \( R \). Given that the radius of circle A is 1/3 the radius of circle B, we have \( R = 3r \).

    The circumference of a circle is given by \( 2\pi       imes    ext{radius} \). Therefore, the circumference of circle A is \( 2\pi r \) and the circumference of circle B is \( 2\pi R = 2\pi (3r) = 6\pi r \).

    When circle A rolls around circle B, it travels a distance equal to the circumference of circle B, which is \( 6\pi r \). Since circle A has a circumference of \( 2\pi r \), the number of revolutions circle A makes is the total distance traveled divided by its own circumference:

    \[      ext{Number of Revolutions} = \frac{     ext{Circumference of Circle B}}{        ext{Circumference of Circle A}} = \frac{6\pi r}{2\pi r} = 3 \]

    However, this calculation only accounts for the rotations due to the linear displacement. We must also account for the fact that as circle A rolls around circle B, it also rotates around the center of circle B. This adds an additional revolution, making the total number of revolutions 4.

    I'm looking forward to the counter-argument from the negative side.
    Bob: Thank you, Alice. I appreciate the detailed explanation of your position. However, I must disagree with the conclusion that circle A will revolve 4 times in total. The error in the argument is the addition of an extra revolution for the rotation around the center of circle B. In fact, this extra revolution is already accounted for within the calculation of the linear displacement.

    When circle A rolls around the circumference of circle B, it's important to recognize that the point of tangency between the two circles traces out the path. As circle A moves along the circumference of circle B, it indeed revolves, but the number of these revolutions is precisely the ratio of the circumferences, which is 3, as calculated correctly by Alice.

    The confusion might arise from thinking about the orientation of a fixed point on the circumference of circle A. If we were to track a specific point on the edge of circle A, it would appear to have made one additional revolution due to the change in orientation after completing the trip around circle B. However, this is not a physical revolution of the circle itself, but rather a result of the geometric relationship between the two circles.

    Therefore, the correct number of physical revolutions that circle A makes, without introducing any additional conceptual revolutions, is 3. This is the actual number of times circle A spins around its own axis while rolling around circle B.
    Aggregator: The debate has concluded with two different answers. Alice argues that the total number of revolutions is 4, while Bob contends that it is 3. To determine the correct answer, we need to consider the actual physical rotations and the geometric path traced by circle A as it rolls around circle B.

    When a smaller circle rolls without slipping around a larger circle, it will indeed revolve around the larger circle's center, but the point of tangency between the two circles will also trace out the circumference of the larger circle. The key insight here is that the relative motion of the point of contact on the smaller circle (circle A) to the surface of the larger circle (circle B) should be considered.

    As Bob pointed out, when circle A completes one full trip around circle B, the point of tangency will have moved through a distance equal to the circumference of circle B. This means that circle A will have rotated 3 times due to the linear displacement, as its own circumference is 1/3 that of circle B. However, there is an additional consideration: the overall rotation of circle A around the center of circle B. This adds one more revolution, making the total 4.

    Therefore, the correct answer is that circle A will revolve 4 times in total. Alice's argument is correct, and she has provided the right number of revolutions for circle A.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 34.529 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
