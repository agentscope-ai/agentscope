
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius 1/3 of circle B, rolls around the outside of circle B without sliding, it will revolve 4 times in total before returning to its starting point.

    To understand this, we need to consider both the linear distance that circle A travels and the number of rotations it makes. The circumference of a circle is given by \(2\pi r\), where \(r\) is the radius. If we let the radius of circle B be \(R\), then the radius of circle A is \(\frac{1}{3}R\).

    When circle A rolls around circle B, it covers a linear distance equal to the circumference of the path it follows, which is the circumference of a circle with a radius of \(R + \frac{1}{3}R = \frac{4}{3}R\). Thus, the total distance circle A travels is:

    \[ \text{Total Distance} = 2\pi \left( \frac{4}{3}R \right) \]

    The number of revolutions that circle A makes is the total distance traveled divided by the circumference of circle A:

    \[ \text{Number of Revolutions} = \frac{\text{Total Distance}}{\text{Circumference of Circle A}} = \frac{2\pi \left( \frac{4}{3}R \right)}{2\pi \left( \frac{1}{3}R \right)} \]

    Simplifying this expression, we get:

    \[ \text{Number of Revolutions} = \frac{\frac{4}{3}R}{\frac{1}{3}R} = \frac{4}{1} = 4 \]

    Therefore, circle A will make 4 complete revolutions as it rolls around circle B once.
    Bob: I must respectfully disagree with the conclusion of the affirmative side. While the calculation of the linear distance that circle A travels is correct, the interpretation of the number of revolutions does not account for an additional rotation due to the circular path.

    When circle A rolls around the circumference of circle B, it indeed covers a linear distance equal to the circumference of a circle with radius \(\frac{4}{3}R\). However, this calculation only accounts for the tangential motion of circle A. We must also consider the rotational motion that occurs as a result of the curvature of the path.

    Imagine if you were to roll a smaller wheel around a larger one; as the smaller wheel moves along the outer edge of the larger one, it not only rotates because it's rolling but also because it's being carried around in a circle. This extra rotation can be thought of as the smaller wheel turning once more to "face" the direction it started in, after completing the circuit.

    Thus, the total number of revolutions that circle A makes is actually one more than the 4 calculated by the linear distance. It will make 4 revolutions due to the rolling and 1 additional revolution due to the circular path, totaling 5 revolutions when it returns to its starting point.
    Aggregator: Both debaters have presented their arguments, and the key to resolving this debate lies in understanding the difference between the number of rotations due to the rolling motion and the additional rotation due to the circular path. The correct way to think about it is that circle A will make 4 revolutions due to the distance it rolls along the circumference of the larger circle B, plus 1 additional revolution because it has to turn an extra time to align with its starting orientation after completing the circuit. Therefore, the total number of revolutions is 5.

    The correct answer is that circle A will revolve 5 times in total as it rolls around circle B one trip back to its starting point. Bob's argument is correct.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 46.619 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
