
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. I am the affirmative side and I will present my argument for the given problem. 

    The problem states that two circles, A and B, are externally tangent to each other, with circle A having a radius 1/3 the size of circle B. Circle A rolls around the outside of circle B without sliding, and we need to determine how many times circle A will revolve as it completes one trip around circle B.

    To solve this, we can use the relationship between the circumferences of the two circles. The circumference (C) of a circle is given by the formula C = 2 * π * r, where r is the radius of the circle.

    Let's denote:
    - The radius of circle A as r.
    - The radius of circle B as 3r (since it is 3 times the radius of circle A).

    The distance that circle A travels as it goes around circle B once is equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of both circles, or 4r. This gives us a total distance of 2 * π * 4r = 8πr.

    Since circle A does not slide, it must rotate through a distance equal to its own circumference for every full rotation. The circumference of circle A is 2 * π * r.

    Therefore, the number of rotations (N) that circle A makes is the total distance traveled divided by the circumference of circle A:

    N = (8πr) / (2πr) = 4

    Hence, circle A will revolve 4 times in total as it rolls around circle B once.
    Bob: I appreciate the clear and methodical approach taken by the affirmative side. However, there is a subtle point that needs to be considered, which is the concept of the relative rotation between the two circles.

    When circle A rolls around circle B, it does not only rotate due to its linear movement along the circumference of the larger path (which is 4r as calculated). Circle A also rotates because it is in contact with circle B, and this contact point must match the no-sliding condition. As circle A goes around, for every full rotation it makes, it will have traveled a distance equal to its own circumference (2πr) along the circumference of the path (8πr).

    However, while circle A travels around the 8πr path, it has to account for an additional rotation due to the curvature of circle B. For each full loop around circle B, circle A completes an extra rotation because of the changing tangent points. This is often referred to as the "gear effect" where the smaller gear (circle A) rotates once more than the number of times it would if it were traveling in a straight line over the same distance.

    Therefore, the total number of rotations N that circle A makes is:

    N = (Distance traveled / Circumference of A) + 1 (for the additional rotation due to the curvature)
    N = (8πr / 2πr) + 1
    N = 4 + 1
    N = 5

    So, circle A will revolve 5 times in total as it rolls around circle B once.
    Aggregator: The debate has concluded, and we have two different answers. Alice's argument leads to the conclusion that circle A will revolve 4 times around circle B, while Bob argues for an additional rotation due to the curvature of circle B, leading to a total of 5 revolutions. 

    Bob's point about the additional rotation is correct. When a smaller circle rolls around a larger one without sliding, it not only rotates due to the linear distance it travels but also because of the change in the contact points as it follows the curvature of the larger circle. This means that after completing the path around the larger circle, the smaller circle will have made one more revolution than the number calculated by simply dividing the traveled distance by its circumference. 

    Therefore, the correct answer is that circle A will revolve 5 times in total as it rolls around circle B once.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 39.725 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
