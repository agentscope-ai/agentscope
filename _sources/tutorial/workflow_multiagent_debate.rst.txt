
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: To solve this problem, we need to understand the relationship between the two circles and how many times the smaller circle (circle A) will revolve as it rolls around the larger circle (circle B) without sliding.

    Let's denote the radius of circle A as \( r \) and the radius of circle B as \( R \). According to the problem, \( r = \frac{1}{3}R \).

    When circle A rolls around circle B, the distance that circle A travels is equal to the circumference of the path it follows. This path is the circumference of a circle with a radius equal to the sum of the radii of both circles, which is \( R + r \).

    The circumference of the path that circle A follows is:
    \[ 2\pi(R + r) \]

    Since \( r = \frac{1}{3}R \), we can substitute \( r \) in the above equation:
    \[ 2\pi\left(R + \frac{1}{3}R\right) = 2\pi\left(\frac{4}{3}R\right) = \frac{8}{3}\pi R \]

    Now, the number of revolutions that circle A makes is the total distance traveled divided by the circumference of circle A itself, which is \( 2\pi r \):
    \[ \text{Number of Revolutions} = \frac{\frac{8}{3}\pi R}{2\pi r} \]

    Substituting \( r = \frac{1}{3}R \) into the equation for the number of revolutions, we get:
    \[ \text{Number of Revolutions} = \frac{\frac{8}{3}\pi R}{2\pi \left(\frac{1}{3}R\right)} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = \frac{8}{2} = 4 \]

    Therefore, I assert that circle A will revolve 4 times in total as it rolls around circle B one trip back to its starting point.
    Alice: Based on the mathematical reasoning, when circle A, with a radius 1/3 of circle B, rolls around circle B, it will revolve 4 times in total. This conclusion comes from calculating the total distance traveled by circle A, which is the circumference of the path it follows, and dividing that by the circumference of circle A itself.
    Bob: I disagree with the conclusion that circle A will revolve 4 times in total. Let's analyze this problem step by step to find the correct number of revolutions.

    Let the radius of circle B be \( R \), then the radius of circle A is \( \frac{1}{3}R \).

    When circle A rolls around circle B, it follows a path along the circumference of a circle with a radius equal to the sum of both radii, which is \( R + \frac{1}{3}R = \frac{4}{3}R \). The length of this path, or the distance that circle A travels, is the circumference of this larger circle, which is \( 2\pi   imes \frac{4}{3}R = \frac{8}{3}\pi R \).

    The circumference of circle A, which is the distance it covers in one full revolution, is \( 2\pi       imes \frac{1}{3}R = \frac{2}{3}\pi R \).

    To find out how many times circle A revolves, we need to divide the total distance traveled by the circumference of circle A:

    \[      ext{Number of Revolutions} = \frac{     ext{Total Distance Traveled}}{  ext{Circumference of Circle A}} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = \frac{8}{3} \div \frac{2}{3} = \frac{8}{3}        imes \frac{3}{2} = 4 \]

    However, we must also consider the rotation due to the external tangency. Since there is no relative sliding, for every full loop around circle B, circle A will also rotate once more due to the rolling action. This means we have to add one additional revolution to account for the fact that as circle A returns to its starting point, it has also completed an extra revolution about its own center.

    Therefore, the total number of revolutions is \( 4 + 1 = 5 \) times.
    Aggregator: The debate has concluded, and the correct number of revolutions for circle A as it rolls around circle B can be determined. The key point in this problem is to account for both the revolution due to the path around circle B and the additional rotation due to the rolling without slipping.

    Bob's analysis is on the right track, but there's a subtle point to consider. When circle A completes one full trip around circle B, it will have traveled a distance equal to the circumference of the path with radius \( \frac{4}{3}R \), which is indeed \( \frac{8}{3}\pi R \). Since the circumference of circle A is \( \frac{2}{3}\pi R \), dividing the total distance by the circumference of circle A gives us 4 revolutions. However, because circle A is also rotating about its own center as it rolls, it will complete an additional revolution. This extra revolution is often overlooked, but it is essential to the solution.

    Therefore, the total number of revolutions is \( 4 + 1 = 5 \) times. Bob's conclusion is correct, and the answer is 5 revolutions.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.755 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
