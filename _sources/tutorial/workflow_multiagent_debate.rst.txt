
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Certainly. To solve the problem, we need to determine how many times circle A will revolve as it rolls around the circumference of circle B without sliding. Let's denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B \). According to the problem, the radius of circle A is 1/3 the radius of circle B, so we have:

    \[ r_A = \frac{1}{3} r_B \]

    When circle A rolls around circle B, the distance that circle A travels along the circumference of circle B is equal to the circumference of circle B. The circumference of a circle is given by \( 2\pi \times \text{radius} \), so the circumference of circle B is:

    \[ C_B = 2\pi r_B \]

    Since circle A rolls without sliding, the distance it travels (which is the circumference of circle B) must be equal to the number of revolutions of circle A multiplied by its own circumference. The circumference of circle A is:

    \[ C_A = 2\pi r_A = 2\pi \left(\frac{1}{3} r_B\right) = \frac{2\pi r_B}{3} \]

    Let \( n \) be the number of complete revolutions that circle A makes while rolling around circle B. Then, the total distance traveled by circle A, which is also the circumference of circle B, can be expressed as:

    \[ n \cdot C_A = C_B \]
    \[ n \cdot \frac{2\pi r_B}{3} = 2\pi r_B \]

    We can now solve for \( n \):

    \[ n = \frac{2\pi r_B}{\frac{2\pi r_B}{3}} \]
    \[ n = \frac{2\pi r_B \cdot 3}{2\pi r_B} \]
    \[ n = 3 \]

    Therefore, circle A will revolve 3 times as it rolls around circle B one trip back to its starting point. This is the position of the affirmative side.
    Bob: I will take the position of the negative side. While the affirmative side's calculation appears to be correct, there is a subtle point that needs to be addressed regarding the total number of revolutions.

    When circle A rolls around the outside of circle B, it not only travels the distance equal to the circumference of circle B but also has to account for its own rotation due to the curvature of the path. This means that in addition to the 3 revolutions calculated by the affirmative, we need to consider the extra revolution that occurs because circle A has to rotate once more to return to its original orientation.

    To put it another way, as circle A completes one trip around circle B, it rotates 3 times relative to the center of circle B, but since it's rolling along the circumference of circle B, it also completes an additional full turn. Hence, the total number of revolutions is 4, not 3. 

    So, my answer is that circle A will revolve 4 times as it rolls around circle B and returns to its starting point.
    Aggregator: The debate has concluded, and both sides have presented their arguments. The affirmative side correctly calculated the number of times circle A would revolve relative to the center of circle B, which is 3. However, the negative side pointed out that we must also consider the additional revolution due to the curvature of the path, as circle A needs to rotate once more to align with its starting orientation.

    Therefore, the correct answer is that circle A will revolve 4 times in total as it rolls around circle B and returns to its starting point. The negative side's position is the accurate one.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 25.990 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
