
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle (circle A) with a radius one-third that of a larger circle (circle B) rolls around the outside of the larger circle without sliding, it will complete 4 full revolutions.

    To understand this, let's consider the relationship between the circumferences of the two circles. The circumference of a circle is given by the formula \( C = 2\pi r \), where \( r \) is the radius of the circle. If the radius of circle A is \( \frac{1}{3} \) of the radius of circle B, then we can denote the radius of circle A as \( r_A \) and the radius of circle B as \( r_B = 3r_A \).

    The circumference of circle A (\(C_A\)) is:
    \[ C_A = 2\pi r_A \]

    The circumference of circle B (\(C_B\)) is:
    \[ C_B = 2\pi (3r_A) = 6\pi r_A \]

    When circle A rolls around circle B, the distance it travels along the path is equal to the circumference of the path, which is the circumference of a circle with a radius equal to the sum of the radii of both circles. This combined radius is \( r_A + r_B = r_A + 3r_A = 4r_A \). Thus, the total path length that circle A travels is:
    \[ C_{path} = 2\pi (4r_A) = 8\pi r_A \]

    Now, to find out how many times circle A revolves, we divide the total path length by the circumference of circle A:
    \[ \text{Number of Revolutions} = \frac{C_{path}}{C_A} = \frac{8\pi r_A}{2\pi r_A} = 4 \]

    Therefore, circle A will revolve 4 times in total as it rolls around circle B.
    Bob: I understand the affirmative side's argument, but I would like to present a different perspective. When circle A rolls around circle B, it is not just moving along the path of the larger circle; it is also rotating around its own center. This means that we have to consider both the translational motion (along the circumference of the path) and the rotational motion (around its own axis).

    Let's take a closer look at the situation. As Alice has already calculated, the total path length that circle A travels is \( 8\pi r_A \). But this distance is covered by the point of contact on circle A with the combined circles' circumference. During this motion, circle A also rotates around its own center.

    To find out how many times circle A will revolve, we need to consider the relative motion between the two circles. Since there is no sliding, for every full rotation of circle A around its own center, it will move a distance equal to its own circumference (\(2\pi r_A\)) along the path.

    The number of rotations due to the movement along the path is:
    \[ \frac{C_{path}}{C_A} = \frac{8\pi r_A}{2\pi r_A} = 4 \]

    However, as circle A rolls around circle B, it also completes one additional revolution because it is rotating around the center of circle B. This extra revolution is often overlooked but can be visualized by imagining a dot on the circumference of circle A: as it goes all the way around circle B, the dot will face outward once more, indicating an additional complete revolution.

    Therefore, the total number of revolutions is the sum of the revolutions due to the path and the additional revolution due to the rotation around circle B:
    \[ \text{Total Revolutions} = 4 + 1 = 5 \]

    In conclusion, circle A will revolve 5 times in total as it rolls around circle B without sliding.
    Aggregator: The debate has concluded, and both sides have provided their arguments. Alice's argument correctly calculates the number of times circle A will revolve around its own center as it rolls along the path defined by the circumference of the combined radii of circles A and B. This results in 4 revolutions.

    Bob, however, pointed out an additional aspect that when circle A completes a full trip around circle B, it also undergoes one extra revolution due to the fact that it is rotating around the center of circle B. This is a common point of confusion, but it is indeed correct.

    Therefore, the total number of revolutions of circle A as it rolls around circle B without sliding is the sum of the 4 revolutions due to the path length and 1 additional revolution due to the circular motion around circle B, which totals 5 revolutions.

    The correct answer is 5 revolutions.

    The debate is finished, and the correct answer is:  5 revolutions




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 5.612 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
