
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present the argument that when a smaller circle (circle A) with a radius one-third of a larger circle (circle B) rolls around the outside of the larger circle without sliding, circle A will revolve 4 times in total to return to its starting point.

    To understand this, let's consider the following:

    1. The circumference of a circle is given by the formula \( C = 2\pi r \), where \( r \) is the radius of the circle.
    2. If the radius of circle A is \( r \), then the radius of circle B is \( 3r \).
    3. The circumference of circle A is therefore \( 2\pi r \), and the circumference of circle B is \( 2\pi (3r) = 6\pi r \).
    4. When circle A rolls around circle B, it has to cover a distance equal to the circumference of the path it takes, which is the circumference of a circle with a radius equal to the sum of the radii of circles A and B, or \( 4r \). Thus, the length of the path is \( 2\pi (4r) = 8\pi r \).
    5. For every full revolution of circle A, it covers a distance equal to its own circumference, which is \( 2\pi r \).
    6. To find out how many revolutions circle A makes, we divide the total distance traveled by the circumference of circle A: \( \frac{8\pi r}{2\pi r} = 4 \).

    Therefore, circle A will make 4 complete revolutions as it rolls around the outside of circle B once.
    Bob: The argument presented by the affirmative side is based on a common misconception about the number of revolutions a smaller circle makes when rolling around a larger one. While the mathematics used to calculate the distance traveled and the circumference are correct, the conclusion that circle A will make 4 complete revolutions is not accurate.

    To understand why, we need to consider the concept of the relative motion of the two circles. When circle A rolls around circle B, it does not only travel the distance equal to the circumference of the path (which is \(8\pi r\)), but it also rotates due to its own motion around the center of circle B.

    Let's break down the motion:

    1. As circle A rolls without sliding, each point on the circumference of circle A that touches circle B must travel a distance equal to the circumference of circle B, which is \(6\pi r\).
    2. For every full rotation of circle A, it would normally cover a distance equal to its own circumference, \(2\pi r\). But since it is rotating around a larger circle, it has to rotate an additional time to compensate for the curvature of the path.
    3. Thus, the total number of rotations can be calculated as follows: The distance covered by circle A is \(6\pi r\) (the circumference of circle B), and since the circumference of circle A is \(2\pi r\), the number of times circle A rotates relative to the ground is \( \frac{6\pi r}{2\pi r} = 3 \) rotations.
    4. However, because circle A is simultaneously orbiting around the center of circle B, it must perform an extra rotation to return to its original orientation. This is often referred to as the "extra turn" or "orbit turn."

    Therefore, the total number of revolutions made by circle A is 3 (from the linear motion along the circumference of circle B) plus 1 (the extra turn from orbiting around circle B), which equals 4 minus 1, or 3.

    In summary, circle A will actually make 3 complete revolutions, not 4, as it rolls around the outside of circle B once.
    Aggregator: The debate has concluded, and we can now determine the correct answer. The key to solving this problem is to recognize that when circle A rolls around the outside of circle B, it will make one additional revolution due to the curvature of its path, which is often overlooked.

    Let's summarize the accurate solution:

    1. The circumference of circle A is \(2\pi r\).
    2. The circumference of circle B is \(6\pi r\).
    3. As circle A rolls around circle B without sliding, it travels a distance equal to the circumference of the larger circle B, which is \(6\pi r\).
    4. The number of times circle A would rotate if it were rolling in a straight line for the same distance would be \( \frac{6\pi r}{2\pi r} = 3 \) rotations.
    5. However, because circle A is also orbiting around circle B, it must perform an extra rotation to return to its original orientation, accounting for the curvature of the path.

    Therefore, the total number of revolutions made by circle A as it rolls around the outside of circle B is 3 (from the linear motion along the circumference of circle B) plus 1 (the extra turn from orbiting around circle B), which equals 4.

    The correct answer is that circle A will revolve 4 times in total.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.145 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
