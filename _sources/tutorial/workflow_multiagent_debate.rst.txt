
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius 1/3 of that of circle B, rolls around circle B one complete trip back to its starting point, it will revolve 4 times in total. Here's the reasoning:

    Let's denote:
    - The radius of circle B as \( R \).
    - The radius of circle A as \( r = \frac{1}{3}R \).

    When circle A rolls around circle B without slipping, the distance that circle A travels along the circumference of circle B is equal to the circumference of the path it takes, which is the circumference of a circle with a radius of \( R + r \) (the sum of the radii of both circles).

    The circumference of this path is:
    \[ C_{\text{path}} = 2\pi(R + r) \]

    Since \( r = \frac{1}{3}R \), we can substitute and get:
    \[ C_{\text{path}} = 2\pi\left(R + \frac{1}{3}R\right) = 2\pi\left(\frac{4}{3}R\right) = \frac{8}{3}\pi R \]

    Now, the number of revolutions that circle A makes is the distance traveled divided by the circumference of circle A. The circumference of circle A is:
    \[ C_A = 2\pi r = 2\pi \left(\frac{1}{3}R\right) = \frac{2}{3}\pi R \]

    Therefore, the number of revolutions (\( N \)) that circle A makes is:
    \[ N = \frac{C_{\text{path}}}{C_A} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = \frac{8}{3} \div \frac{2}{3} = 4 \]

    Hence, circle A will revolve 4 times as it rolls around circle B once.
    Bob: As the negative side, I disagree with the conclusion that circle A will revolve 4 times. The mistake in the reasoning is in the interpretation of how many times circle A revolves as it rolls around circle B. Let's take a closer look at the situation.

    When a smaller circle rolls around the outside of a larger circle, it does not only rotate because of the distance it travels (which would be the case if it were rolling along a straight line). There is an additional rotation due to the change in the direction of the center of the smaller circle as it moves around the larger one.

    Let's denote:
    - The radius of circle B as \( R \).
    - The radius of circle A as \( r = \frac{1}{3}R \).

    The path that the center of circle A takes is a circle with a radius of \( R + r \), which we can calculate as:
    \[ C_{  ext{path}} = 2\pi(R + r) = 2\pi\left(R + \frac{1}{3}R    ight) = 2\pi\left(\frac{4}{3}R    ight) = \frac{8}{3}\pi R \]

    Now, the number of times the center of circle A completes a full revolution around the center of circle B is:
    \[ N_{  ext{center}} = \frac{C_{        ext{path}}}{2\pi R} = \frac{\frac{8}{3}\pi R}{2\pi R} = \frac{4}{3} \]

    However, for each complete revolution of the center of circle A around the center of circle B, circle A itself also rotates once due to the circular motion. Therefore, we need to add this rotational component to the total number of revolutions:

    Total revolutions of circle A (\( N \)) = Revolutions due to the path traveled + Revolutions due to the circular motion of its center
    \[ N = \frac{C_{        ext{path}}}{C_A} + N_{  ext{center}} = 4 + 1 = 5 \]

    Thus, when circle A rolls around circle B without slipping, it actually revolves 5 times in total.
    Aggregator: The correct answer is that circle A will revolve 4 times as it rolls around circle B. The argument presented by the affirmative side, Alice, is accurate. When circle A rolls around circle B, it does not only rotate due to the distance it travels along the path, but also because of the change in direction. However, this change in direction is already accounted for in the calculation of the total number of revolutions.

    The circumference of the path taken by the center of circle A (which is a circle with radius \( R + r \)) is indeed \( \frac{8}{3}\pi R \). The number of revolutions circle A makes is the distance traveled divided by its own circumference, which is \( \frac{2}{3}\pi R \). Thus, the number of revolutions is:

    \[ N = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = 4 \]

    Bob's addition of an extra revolution due to the circular motion of the center of circle A is not necessary, as the calculation of the number of revolutions already includes the effect of the change in direction. Therefore, the final count remains at 4 revolutions.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.903 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
