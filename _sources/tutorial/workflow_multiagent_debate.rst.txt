
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when a smaller circle (circle A) rolls around a larger circle (circle B) without sliding, and if the radius of circle A is 1/3 the radius of circle B, then circle A will revolve 4 times in total by the time it returns to its starting point.

    To explain this, let's denote the radius of circle A as r, which makes the radius of circle B 3r. The circumference of circle A is 2πr, and the circumference of circle B is 2π(3r) = 6πr. When circle A rolls around circle B, it travels a distance equal to the circumference of circle B, which is 6πr.

    Since there is no relative sliding, the number of revolutions circle A makes is the distance traveled divided by the circumference of circle A:

    Number of Revolutions = Distance Traveled / Circumference of Circle A
    Number of Revolutions = 6πr / 2πr
    Number of Revolutions = 3

    However, we must also account for the fact that as circle A rolls around the outside of circle B, it also completes an additional revolution due to the rotation about the center of circle B. This extra revolution is because the center of circle A has to make a full 360-degree turn around the center of circle B to return to the starting point.

    Therefore, the total number of revolutions is 3 (from rolling along the circumference of circle B) + 1 (from rotating around the center of circle B) = 4. Hence, circle A will revolve 4 times in total.
    Bob: I appreciate the detailed explanation provided by the affirmative side, but I must disagree with the conclusion. The key point to consider here is that as circle A rolls around the outside of circle B, it will indeed complete an additional revolution due to the path its center takes around the center of circle B.

    However, the calculation for the number of revolutions based on the distance traveled along the circumference of circle B is correct: 6πr (circumference of circle B) divided by 2πr (circumference of circle A) equals 3. This means that circle A will make 3 full rotations about its own axis as it travels around the circumference of circle B.

    The mistake comes in adding an extra revolution for the rotation around the center of circle B. In fact, this rotation is already accounted for in the 3 revolutions. When a smaller circle rolls without slipping around a larger one, the center of the smaller circle will trace out a circular path equal in length to the circumference of the larger circle, and during this process, the smaller circle will rotate exactly once for each time its center completes a circuit around the larger circle's center.

    Therefore, the total number of times that circle A will revolve is 3, not 4. There is no need to add an extra revolution because the 3 revolutions already include the turn around the center of circle B.
    Bob: To further clarify, when circle A, with a radius of \( r \), rolls around the outside of circle B, which has a radius of \( 3r \), we can think of the movement in terms of the path traced by the center of circle A. As circle A goes around circle B, the center of circle A traces out a circle with a radius equal to the sum of the radii of circles A and B, which is \( 4r \).

    The circumference of this path is \( 8\pi r \). Now, since circle A does not slip, each point on the edge of circle A will travel a distance equal to the circumference of this path. For circle A to cover this distance, it needs to rotate through an angle that corresponds to the ratio of the path's circumference to the circumference of circle A itself, which is \( 8\pi r / 2\pi r = 4 \) times.

    But, this count includes the inherent rotation of circle A as it revolves around the center of circle B. Since the center of circle A also makes one complete revolution around the center of circle B, we do not add an extra revolution; the 3 revolutions already account for the path and the rolling motion. Thus, the correct number of revolutions of circle A is 3.
    Aggregator: The debate has concluded, and we can determine the correct answer. Alice's argument correctly identifies that circle A will make 3 revolutions as it rolls around the circumference of circle B. Additionally, she points out that there is an extra revolution due to the fact that the center of circle A must also rotate around the center of circle B.

    Bob, on the other hand, suggests that the 3 revolutions already include the rotation around the center of circle B, and therefore no additional revolution should be counted. However, this is a misunderstanding, as the 3 revolutions only account for the rolling motion along the path and not the overall rotational movement around the center of circle B.

    Therefore, the correct number of total revolutions made by circle A is indeed 4, as proposed by Alice. The 3 revolutions are due to the distance covered along the circumference of circle B, and the 1 additional revolution is because of the complete turn around the center of circle B.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 25.575 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
