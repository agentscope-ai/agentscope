
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when circle A, with a radius one-third of circle B, rolls around circle B without sliding, it will revolve 4 times in total before returning to its starting point.

    To understand this, let's consider the circumference of each circle. The circumference of a circle is given by \(C = 2\pi r\), where \(r\) is the radius of the circle. Let the radius of circle B be \(R\), and the radius of circle A be \(\frac{1}{3}R\).

    The distance that circle A travels as it rolls around circle B is equal to the circumference of the path it follows, which is the circumference of a circle with a radius equal to the sum of the radii of circles A and B. Therefore, the path's radius is \(R + \frac{1}{3}R = \frac{4}{3}R\). The circumference of this path is then \(2\pi \cdot \frac{4}{3}R = \frac{8}{3}\pi R\).

    Since circle A has a radius of \(\frac{1}{3}R\), its own circumference is \(2\pi \cdot \frac{1}{3}R = \frac{2}{3}\pi R\). To find out how many times circle A revolves, we divide the total distance traveled (the circumference of the path) by the circumference of circle A:

    \[
    \text{Number of Revolutions} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = \frac{8}{3} \div \frac{2}{3} = \frac{8}{3} \times \frac{3}{2} = 4
    \]

    Thus, circle A will make 4 complete revolutions as it rolls around circle B.
    Bob: As the negative side, I will argue that when circle A, with a radius one-third of circle B, rolls around circle B without sliding, it will actually revolve 3 times in total before returning to its starting point, not 4 as suggested by the affirmative side.

    Let's revisit the concept of the rolling motion. When circle A rolls around circle B, it indeed travels a distance equal to the circumference of a circle with a radius \(R + \frac{1}{3}R = \frac{4}{3}R\). The path's circumference is \(\frac{8}{3}\pi R\).

    However, we must consider the relative rotation. As circle A rolls along the circumference of circle B, it also rotates around its own center. For every full trip around circle B, circle A will rotate once due to the orbit and an additional number of times due to its own spinning.

    To find the number of self-rotations, we divide the distance traveled by the circumference of circle A, which is \(\frac{2}{3}\pi R\):

    \[
            ext{Number of Self-Rotations} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = 4
    \]

    But, since circle A is also orbiting around circle B, we must subtract one revolution to account for the orbital motion. This leaves us with:

    \[
            ext{Total Revolutions} =        ext{Self-Rotations} -   ext{Orbital Revolution} = 4 - 1 = 3
    \]

    Therefore, circle A will make 3 complete revolutions as it rolls around circle B.
    Aggregator: The debate is now finished, and I can provide the correct answer.

    Alice's argument is based on the total number of revolutions that circle A makes as it rolls around the circumference of the path. She correctly calculates the distance traveled by circle A and divides it by the circumference of circle A to find the number of revolutions, which is 4.

    Bob's argument introduces a correction for the orbital revolution, suggesting that one of the 4 revolutions should be attributed to the orbit around circle B rather than a self-rotation. However, this is a common misconception. The proper way to consider the problem is to focus on the point of contact between the two circles. As circle A rolls without slipping, every point on its circumference will touch the larger circle B exactly once per revolution, leading to 4 points of contact in total. This means that circle A does indeed make 4 full rotations about its own center, including the one due to the orbit.

    Therefore, the correct number of times circle A will revolve in total is 4.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 41.891 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
