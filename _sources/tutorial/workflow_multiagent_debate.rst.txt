
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. To begin, let's define the problem more clearly. We have two circles, A and B, with circle A having a radius that is 1/3 of the radius of circle B. The two circles are externally tangent, and as circle A rolls around circle B without sliding, we need to determine how many times circle A will revolve by the time it returns to its starting point.

    To solve this, we can use the concept of the circumference of a circle, which is given by 2πr, where r is the radius of the circle. Since the radius of circle A (r_A) is 1/3 of the radius of circle B (r_B), we can say that r_A = r_B / 3.

    When circle A rolls around circle B, it will travel a distance equal to the circumference of the path it follows. This path is essentially the circumference of a circle with a radius equal to the sum of the radii of A and B, which is r_A + r_B. Substituting r_A with r_B / 3, the total path length is 2π(r_B / 3 + r_B) or 2π(4r_B / 3).

    The number of revolutions circle A makes is the total path length divided by the circumference of circle A, which is 2πr_A. By substituting r_A with r_B / 3, we get:

    Number of Revolutions = [2π(4r_B / 3)] / [2π(r_B / 3)]

    Simplifying this, we find that the number of revolutions is 4. Therefore, my position is that circle A will revolve 4 times in total as it rolls around circle B.
    Bob: Thank you for the detailed explanation. I understand the affirmative side's approach, but I believe there is a subtle point that has been overlooked. When circle A rolls around circle B, it indeed travels a distance equal to the circumference of a larger circle with radius r_A + r_B. However, we must also consider the rotation due to the rolling motion itself.

    The path length, as correctly calculated, is 2π(4r_B / 3). But when circle A completes one full trip around circle B, it will have also rotated once about its own center because of the curvature of the path. This means that in addition to the 4 revolutions from the path length, there is an extra revolution due to the rolling without slipping.

    Therefore, the total number of revolutions is 4 (from the path) plus 1 (from the rolling motion), which gives us 5 revolutions in total. My position is that circle A will revolve 5 times in total as it rolls around circle B.
    Aggregator: The debate has concluded with two different answers. Alice's calculation is based on the path length that circle A travels, which is 2π(4r_B / 3), and she divided this by the circumference of circle A (2π(r_B / 3)) to conclude 4 revolutions. Bob, on the other hand, correctly pointed out that there is an additional revolution due to the rolling motion of circle A around its own center as it follows the curvature of circle B.

    Bob's argument includes the concept that when a smaller circle rolls around a larger one without slipping, it not only covers the distance of the path but also rotates about its own axis. This means that after completing the path, circle A will have made one extra revolution because of this rolling motion.

    Therefore, the correct number of times circle A will revolve in total, considering both the path it travels and the rotation due to its rolling, is 5.

    The correct answer is 5 revolutions.

    The debate is finished, and the correct answer is:  5




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 30.068 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
