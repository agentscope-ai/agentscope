
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: Thank you. I will present the argument for the number of times circle A, with a radius one-third that of circle B, revolves as it rolls around the circumference of circle B without sliding.

    Let's denote:
    - The radius of circle A as \( r \)
    - The radius of circle B as \( R = 3r \)

    The circumference of circle A is \( 2\pi r \), and the circumference of circle B is \( 2\pi R = 6\pi r \).

    When circle A rolls around the outside of circle B, it travels a distance equal to the circumference of circle B, which is \( 6\pi r \). Since the circles are externally tangent and there is no relative sliding, the distance that circle A travels along the circumference of circle B is the same as the distance it would have traveled if it were rolling in a straight line.

    For each complete revolution, circle A covers a distance equal to its own circumference, \( 2\pi r \). To find out how many revolutions circle A makes, we divide the total distance it has to travel by the circumference of circle A:

    \[      ext{Number of Revolutions} = \frac{     ext{Distance Traveled}}{        ext{Circumference of Circle A}} = \frac{6\pi r}{2\pi r} = 3 \]

    However, this calculation only accounts for the translational motion. We must also consider the rotational motion due to the fact that circle A is revolving around circle B. As circle A goes around circle B, it will also rotate once around its own center for every full trip around circle B, because it's always facing the center of circle B (think of it as an additional rotation due to the change in orientation).

    Thus, the total number of revolutions is the sum of the revolutions from the translational motion and the one additional revolution from the rotational motion:

    \[      ext{Total Revolutions} = 3 + 1 = 4 \]

    Therefore, my stance is that circle A will revolve 4 times in total as it rolls around circle B.
    Bob: I will present the argument for the negative side. While I agree with the calculation that circle A will make 3 revolutions due to the translational motion as it rolls around the circumference of circle B, I disagree with the additional revolution attributed to the rotational motion.

    The key point is that when a smaller circle rolls around a larger one without sliding, the number of rotations (or revolutions) is determined solely by the distance traveled divided by the circumference of the smaller circle. In this case, the distance traveled by circle A is equal to the circumference of circle B, which is \(6\pi r\). Since the circumference of circle A is \(2\pi r\), we get:

    \[      ext{Number of Revolutions} = \frac{6\pi r}{2\pi r} = 3 \]

    The additional rotation mentioned by the affirmative side is actually already accounted for in the 3 revolutions. When circle A completes its journey around circle B, it returns to its starting orientation, and this return to the initial position is included in the 3 revolutions. There's no need to add an extra revolution because the rolling motion inherently includes the change in orientation.

    To visualize this, imagine marking a point on the edge of circle A. As circle A rolls around circle B, the marked point will touch the ground 3 times before returning to its original position relative to the center of circle B. This means that the 3 revolutions calculated from the distance traveled are sufficient to account for both the translational and the rotational motion.

    Therefore, my stance is that circle A will revolve 3 times in total as it rolls around circle B.
    Aggregator: The debate has concluded, and after evaluating the arguments presented by both sides, the correct answer is that circle A will revolve 3 times in total as it rolls around circle B. The argument that the 3 revolutions account for both the translational motion and the rotational motion due to the change in orientation is accurate. The additional rotation mentioned by Alice is already included in the 3 revolutions, as the point on the circumference of circle A that touches the larger circle B will touch exactly 3 times before returning to its original position. Therefore, Bob's argument is correct.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 42.536 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
