
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will present an argument to determine how many times circle A will revolve around its own center as it rolls around the circumference of circle B.

    Let's denote:
    - The radius of circle A as \( r \).
    - The radius of circle B as \( R \).

    According to the problem, the radius of circle A is 1/3 the radius of circle B, so we can write this relationship as:
    \[ r = \frac{1}{3}R \]

    When circle A rolls around circle B without slipping, the distance that circle A travels along the circumference of circle B is equal to the circumference of circle B. The circumference of a circle is given by \( 2\pi \) times the radius, so the distance traveled by circle A is:
    \[ 2\pi R \]

    Since there is no relative sliding, the distance traveled by circle A is also equal to the number of revolutions (let's call it \( N \)) it makes, multiplied by its own circumference:
    \[ N \times 2\pi r \]

    We can now set these two expressions for the distance equal to each other:
    \[ N \times 2\pi r = 2\pi R \]

    Substituting \( r = \frac{1}{3}R \) into the equation, we get:
    \[ N \times 2\pi \left(\frac{1}{3}R\right) = 2\pi R \]

    Simplifying the equation, we find:
    \[ N \times \frac{2\pi R}{3} = 2\pi R \]
    \[ N \times \frac{1}{3} = 1 \]
    \[ N = 3 \]

    Therefore, circle A will make 3 complete revolutions around its own center as it rolls around the circumference of circle B once.
    Bob: I understand the argument presented by the affirmative side, but I believe there is a misunderstanding regarding the total number of revolutions circle A will make. When circle A rolls around circle B without slipping, it will indeed travel a distance equal to the circumference of circle B, which is \(2\pi R\). However, we must also account for the fact that as circle A goes around circle B, it's not just rolling along a straight line; it's also rotating around the center of circle B.

    The key point here is that while circle A makes 3 revolutions relative to the point of contact with circle B (as calculated correctly by the affirmative), it also completes an additional revolution due to its orbit around circle B. This can be visualized as if you were to hold a smaller wheel and walk it around a larger wheel; the smaller wheel would make one more complete turn than the number of times it rolls on the surface of the larger wheel.

    Thus, the total number of revolutions of circle A, including both the rotations due to rolling and the rotation due to its orbital motion, is 4. The correct answer is that circle A will revolve 4 times in total.
    Aggregator: The debate has concluded, and the correct answer is that circle A will revolve 4 times in total as it rolls around circle B. Bob's argument correctly includes both the revolutions due to rolling along the circumference of circle B and the additional revolution due to the orbit around circle B. Alice calculated the number of revolutions relative to the point of contact (which is 3), but the total number of rotations, including the one due to the orbital motion, is 4.

    The debate is finished, and the correct answer is:  4




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.049 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
