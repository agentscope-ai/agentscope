
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Debate workflow simulates a multi-turn discussion between different agents, mostly several solvers and an aggregator.
Typically, the solvers generate and exchange their answers, while the aggregator collects and summarizes the answers.

We implement the examples in `EMNLP 2024`_, where two debater agents will discuss a topic in a fixed order, and express their
arguments based on the previous debate history.
At each round a moderator agent will decide whether the correct answer can be obtained in the current iteration.

.. GENERATED FROM PYTHON SOURCE LINES 15-131

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
        DashScopeChatFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # Prepare a topic
    topic = (
        "The two circles are externally tangent and there is no relative sliding. "
        "The radius of circle A is 1/3 the radius of circle B. Circle A rolls "
        "around circle B one trip back to its starting point. How many times will "
        "circle A revolve in total?"
    )


    # Create two debater agents, Alice and Bob, who will discuss the topic.
    def create_solver_agent(name: str) -> ReActAgent:
        """Get a solver agent."""
        return ReActAgent(
            name=name,
            sys_prompt=f"You're a debater named {name}. Hello and welcome to the "
            "debate competition. It's unnecessary to fully agree with "
            "each other's perspectives, as our objective is to find "
            "the correct answer. The debate topic is stated as "
            f"follows: {topic}.",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # Create a moderator agent
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""You're a moderator. There will be two debaters involved in a debate competition. They will present their answer and discuss their perspectives on the topic:
    ``````
    {topic}
    ``````
    At the end of each round, you will evaluate both sides' answers and decide which one is correct.""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # Use multiagent formatter because the moderator will receive messages from more than a user and an assistant
        formatter=DashScopeMultiAgentFormatter(),
    )


    # A structured output model for the moderator
    class JudgeModel(BaseModel):
        """The structured output model for the moderator."""

        finished: bool = Field(
            description="Whether the debate is finished.",
        )
        correct_answer: str | None = Field(
            description="The correct answer to the debate topic, only if the debate is finished. Otherwise, leave it as None.",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """Run the multi-agent debate workflow."""
        while True:
            # The reply messages in MsgHub from the participants will be broadcasted to all participants.
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "You are affirmative side, Please express your viewpoints.",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "You are negative side. You disagree with the affirmative side. Provide your reason and answer.",
                        "user",
                    ),
                )

            # Alice and Bob doesn't need to know the moderator's message, so moderator is called outside the MsgHub.
            msg_judge = await moderator(
                Msg(
                    "user",
                    "Now you have heard the answers from the others, have the debate finished, and can you get the correct answer?",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\nThe debate is finished, and the correct answer is: ",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: As the affirmative side, I will argue that when a smaller circle A, whose radius is 1/3 of the larger circle B, rolls around the circumference of circle B without sliding, circle A will revolve 4 times in total by the time it returns to its starting point.

    To understand this, let's break down the problem. The circumference of a circle is given by \( C = 2\pi r \), where \( r \) is the radius of the circle. If we denote the radius of circle B as \( R \) and the radius of circle A as \( r \), then according to the problem, \( r = \frac{1}{3}R \).

    When circle A rolls around circle B, it travels a distance equal to the circumference of circle B, which is \( 2\pi R \). Since circle A has a radius of \( \frac{1}{3}R \), its own circumference is \( 2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3} \).

    The number of revolutions circle A makes while rolling around circle B can be calculated by dividing the total distance traveled (the circumference of circle B) by the circumference of circle A:

    \[ \text{Number of Revolutions} = \frac{\text{Circumference of Circle B}}{\text{Circumference of Circle A}} = \frac{2\pi R}{\frac{2\pi R}{3}} = \frac{2\pi R \cdot 3}{2\pi R} = 3 \]

    However, this calculation only accounts for the rotations due to the path length. We must also consider the rotation caused by the fact that circle A is revolving around circle B. As circle A completes one full trip around circle B, it will have completed an additional revolution due to this orbital motion. Therefore, the total number of revolutions is 3 (from the path length) plus 1 (from the orbit), which equals 4.

    Hence, my stance is that circle A will revolve 4 times in total.
    Bob: As the negative side, I will argue that the number of revolutions circle A makes while rolling around circle B is actually 3, not 4.

    To support this, let's revisit the problem and the calculations. The circumference of circle B is \(2\pi R\) and the circumference of circle A is \(\frac{2\pi R}{3}\). When circle A rolls without sliding around circle B, it indeed travels a distance equal to the circumference of circle B, which is \(2\pi R\).

    The number of times circle A revolves due to the distance it has traveled is given by:

    \[ \text{Number of Revolutions} = \frac{\text{Circumference of Circle B}}{\text{Circumference of Circle A}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    This calculation correctly accounts for the rotations of circle A as it rolls along the circumference of circle B. However, there is a common misconception that an additional revolution should be counted because circle A is also revolving around circle B. This is incorrect because the 3 revolutions already account for both the linear path (rolling) and the circular path (orbiting) of circle A around circle B.

    Think of it this way: if you were to roll a small coin around a larger one, when the small coin returns to its starting point, the point of contact with the larger coin would have touched every part of the smaller coin's circumference exactly three times. There is no need to add an extra revolution, as the relative motion between the two circles is fully accounted for in the 3 revolutions.

    Therefore, my stance is that circle A will revolve 3 times in total as it rolls around circle B and returns to its starting position.
    Aggregator: The debate has concluded and the correct answer is that circle A will revolve 3 times in total. The calculation of the number of revolutions is based on the ratio of the circumferences, which indeed gives us 3. The additional revolution that Alice mentioned is a common misconception; it is already included in the 3 revolutions as the smaller circle's point of contact with the larger circle will have touched every part of its circumference exactly three times by the time it returns to the starting point. Therefore, Bob's argument is correct.

    The debate is finished, and the correct answer is:  3




.. GENERATED FROM PYTHON SOURCE LINES 132-140

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.315 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
