
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-19 10:50:13.256_1bb98e', created_at='2025-09-19 10:50:13.256', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-19 10:50:15.373_4ff265', created_at='2025-09-19 10:50:15.374', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=2.11609, type='chat'), metadata=None)
    The response as Msg: Msg(id='GuJt3Py3bU2XryThF36ttG', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-19 10:50:15.374', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-19 10:50:16.428_c6096e', created_at='2025-09-19 10:50:16.428', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=1.053148, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-19 10:50:16.527_2c622a', created_at='2025-09-19 10:50:16.527', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.152383, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-19 10:50:16.626_82d103', created_at='2025-09-19 10:50:16.626', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.250546, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-19 10:50:16.722_547116', created_at='2025-09-19 10:50:16.722', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.346907, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-19 10:50:16.963_921bf0', created_at='2025-09-19 10:50:16.963', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.588096, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-19 10:50:17.128_97f202', created_at='2025-09-19 10:50:17.128', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.752927, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-19 10:50:17.304_012888', created_at='2025-09-19 10:50:17.304', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=1.929087, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-19 10:50:17.787_2120fd', created_at='2025-09-19 10:50:17.787', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.412169, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-19 10:50:18.057_7ec945', created_at='2025-09-19 10:50:18.057', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.682173, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-19 10:50:18.260_f70098', created_at='2025-09-19 10:50:18.260', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.88489, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:50:18.508_25324f', created_at='2025-09-19 10:50:18.508', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.132945, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:50:18.528_0472d4', created_at='2025-09-19 10:50:18.528', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.153137, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a philosophical question. I need to approach this carefully. First, I should acknowledge that this is a deep and complex question with no single answer. Different philosophies and disciplines have various perspectives.\n\nI should mention that in philosophy, there are different views. For example, Descartes\' "I think, therefore I am" suggests identity through thought. Existentialists like Sartre might say we define ourselves through choices. Then there\'s the psychological angle, where identity is shaped by experiences and social interactions.\n\nAlso, considering the user\'s possible intent, they might be seeking self-understanding or exploring their identity. I should keep the response open-ended, encouraging them to reflect on their own experiences and values. It\'s important to note that this is a personal journey and there\'s no one-size-fits-all answer.\n\nI should avoid making assumptions and instead present different viewpoints. Maybe include how different cultures or religions view identity. Also, touch on the idea that identity can be fluid and change over time. Make sure the response is respectful and invites further reflection without imposing any specific answer.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the most profound and enduring inquiries in philosophy, psychology, and spirituality. It touches on the essence of identity, consciousness, and existence. Here are some perspectives to consider:\n\n### 1. **Philosophical Perspectives**  \n   - **Descartes** ("I think, therefore I am"): Suggests that the act of questioning one\'s existence confirms the reality of the self as a thinking entity.  \n   - **Existentialism** (e.g., Sartre): Emphasizes that identity is not fixed but created through choices, actions, and freedom.  \n   - **Eastern Philosophies** (e.g., Buddhism, Advaita Vedanta): Often question the notion of a permanent "self," suggesting that identity is impermanent and interconnected with the universe.  \n\n### 2. **Psychological View**  \n   - Identity is shaped by experiences, relationships, culture, and personal values. It evolves over time as you grow, learn, and encounter new perspectives.  \n   - Carl Jung spoke of the "self" as the integration of conscious and unconscious aspects of the psyche.  \n\n### 3. **Spiritual or Metaphysical**  \n   - Some traditions view the self as a soul or spirit, transcending the physical body. Others see it as a dynamic, ever-changing process.  \n\n### 4. **The Mystery of "I"**  \n   - The "I" that asks the question may itself be part of the mystery. Science and philosophy have yet to fully explain consciousness or the subjective experience of being.  \n\n### A Simple Invitation:  \nPerhaps the answer lies not in a fixed definition, but in the journey of exploration. Reflect on what matters to you, what shapes your values, and how you relate to the world. Your identity is a story you co-create with your choices, experiences, and the people around you.  \n\nUltimately, the question "Who am I?" is not about finding a single answer, but about embracing the ongoing process of becoming. 🌱'}], id='2025-09-19 10:50:28.151_b34609', created_at='2025-09-19 10:50:28.151', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=652, time=9.617318, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.898 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
