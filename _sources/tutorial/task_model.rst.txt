
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-19 10:45:47.476_9823b5', created_at='2025-09-19 10:45:47.476', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-19 10:45:48.771_e1302f', created_at='2025-09-19 10:45:48.771', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.29398, type='chat'), metadata=None)
    The response as Msg: Msg(id='eLXHg2fFGcTXot67U2XZcw', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-19 10:45:48.771', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-19 10:45:49.725_9008f8', created_at='2025-09-19 10:45:49.725', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=0.952309, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-19 10:45:49.848_b76962', created_at='2025-09-19 10:45:49.848', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.074986, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-19 10:45:50.050_6599cf', created_at='2025-09-19 10:45:50.050', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.277209, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-19 10:45:50.140_5c18e5', created_at='2025-09-19 10:45:50.140', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.367082, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-19 10:45:50.255_825dee', created_at='2025-09-19 10:45:50.255', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.482268, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-19 10:45:50.477_10e4c1', created_at='2025-09-19 10:45:50.477', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.704081, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-19 10:45:50.816_ce05f6', created_at='2025-09-19 10:45:50.816', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=2.043602, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-19 10:45:51.238_3bd594', created_at='2025-09-19 10:45:51.238', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.465129, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-19 10:45:51.306_a2c7cc', created_at='2025-09-19 10:45:51.306', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.533346, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-19 10:45:51.402_802b9b', created_at='2025-09-19 10:45:51.402', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.629664, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:45:51.838_c7d54d', created_at='2025-09-19 10:45:51.838', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.06491, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:45:51.858_ec3928', created_at='2025-09-19 10:45:51.858', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.08528, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a deep philosophical question. I need to approach this carefully. First, I should acknowledge that it\'s a complex question with different perspectives. Maybe start by explaining that it depends on one\'s beliefs and context. Then, mention different angles like philosophy, religion, science, and personal identity.\n\nIn philosophy, there are various theories. For example, Descartes\' "I think, therefore I am" suggests that the self is defined by consciousness. Existentialists like Sartre might say we create our own identity through choices. Then, in religion, many traditions have different views on the soul or divine nature. For instance, in Christianity, the self is seen as made in God\'s image, while Buddhism might focus on the concept of no-self (anatta).\n\nFrom a scientific perspective, neuroscience might look at the brain and how consciousness arises from physical processes. Psychology could discuss identity as a combination of experiences, memories, and social roles. Also, the user might be looking for a personal reflection, so it\'s important to invite them to consider their own experiences and values.\n\nI should make sure the response is open-ended and respectful of different viewpoints. Avoid taking sides but present the information neutrally. Check if there\'s any cultural sensitivity, but since the question is universal, it\'s probably okay. Keep the language clear and accessible, avoiding jargon. Finally, encourage the user to explore their own thoughts on the matter.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the most profound and enduring inquiries in philosophy, spirituality, and personal reflection. It touches on identity, consciousness, purpose, and the nature of existence. Here are some perspectives to consider:\n\n### 1. **Philosophical Perspectives**  \n   - **Descartes** ("I think, therefore I am"): Suggests that the self is defined by consciousness and the act of thinking.  \n   - **Existentialism** (e.g., Sartre): Emphasizes that identity is shaped by choices, actions, and the freedom to define oneself.  \n   - **Eastern Philosophies** (e.g., Buddhism): Challenges the idea of a fixed "self," suggesting that identity is impermanent and interconnected with all things.  \n\n### 2. **Spiritual/Religious Views**  \n   - Many traditions frame the self as more than the physical body. For example:  \n     - **Christianity**: The self is seen as created in the image of God, with a spiritual essence.  \n     - **Hinduism**: The "Atman" (true self) is eternal and connected to the universal soul (Brahman).  \n     - **Sufism**: The self is a mirror reflecting the divine.  \n\n### 3. **Scientific/Neurological Angle**  \n   - Neuroscience explores how the brain constructs a sense of self through memory, perception, and neural activity. Some argue the "self" is a dynamic process rather than a fixed entity.  \n\n### 4. **Personal Identity**  \n   - Your identity is shaped by experiences, relationships, values, and the stories you tell about yourself. It evolves over time, influenced by culture, choices, and growth.  \n\n### 5. **The Mystery of "I"**  \n   - Some philosophers and mystics suggest that "who I am" may transcend language or logic. It could be a question to sit with, rather than answer definitively.  \n\n### A Thought to Ponder:  \nIf you\'re asking this question now, it might reflect a moment of introspection or a search for meaning. The answer may not lie in a single definition but in the ongoing journey of understanding yourself through experience, curiosity, and connection with others.  \n\nWhat does the question mean to *you*? 🌱'}], id='2025-09-19 10:46:02.279_37d37d', created_at='2025-09-19 10:46:02.279', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=782, time=10.415027, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.807 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
