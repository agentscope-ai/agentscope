
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-17 02:24:09.224_a1b0cb', created_at='2025-09-17 02:24:09.224', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-17 02:24:10.651_2d3ea9', created_at='2025-09-17 02:24:10.651', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.425587, type='chat'), metadata=None)
    The response as Msg: Msg(id='EoMezF4W8LrvXyVv9bCpcP', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-17 02:24:10.651', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 02:24:11.736_43346f', created_at='2025-09-17 02:24:11.736', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=1.083628, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-17 02:24:11.821_5eb275', created_at='2025-09-17 02:24:11.821', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.169129, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-17 02:24:11.905_a076d6', created_at='2025-09-17 02:24:11.905', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.252748, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-17 02:24:11.987_887810', created_at='2025-09-17 02:24:11.987', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.33448, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-17 02:24:12.409_797dca', created_at='2025-09-17 02:24:12.409', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.756825, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-17 02:24:12.559_5da0bb', created_at='2025-09-17 02:24:12.559', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.906859, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-17 02:24:12.831_ce4d75', created_at='2025-09-17 02:24:12.831', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=2.178506, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-17 02:24:13.018_4a8797', created_at='2025-09-17 02:24:13.018', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.365953, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-17 02:24:13.362_3fdff8', created_at='2025-09-17 02:24:13.362', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.710124, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-17 02:24:13.541_a51149', created_at='2025-09-17 02:24:13.541', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.888302, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 02:24:13.791_457740', created_at='2025-09-17 02:24:13.791', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.138861, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 02:24:13.811_92f995', created_at='2025-09-17 02:24:13.811', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.158474, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" That\'s a deep philosophical question. First, I need to consider different perspectives. From a scientific standpoint, humans are biological organisms with consciousness. But the user might be looking for a more personal or existential answer.\n\nI should also think about the user\'s possible intent. Are they seeking self-discovery, or is this a test of my capabilities? Maybe they want to explore identity beyond the physical. I need to address both the tangible aspects and the abstract concepts.\n\nI should mention that identity is complex, involving biology, experiences, and self-perception. Also, touch on the philosophical angle, like Descartes\' "I think, therefore I am." But keep it concise and avoid jargon. Make sure to invite them to share more if they want a personalized answer. Need to stay neutral and not assume their specific context.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the deepest and most profound inquiries humans can ask. It touches on philosophy, identity, consciousness, and existence. Here’s a brief exploration of possible answers, depending on the lens through which you view it:\n\n### 1. **Biologically**:  \n   You are a complex organism composed of cells, tissues, and systems, shaped by genetics, environment, and evolution. You are a product of billions of years of biological development, with a unique combination of traits that define your physical and neurological makeup.\n\n### 2. **Consciously**:  \n   You are an aware being, capable of self-reflection, thought, and emotion. Your sense of "self" arises from your brain’s ability to process experiences, memories, and perceptions, creating a continuous narrative of identity over time.\n\n### 3. **Philosophically**:  \n   Thinkers like Descartes ("I think, therefore I am") or Buddhist philosophy (which often questions the idea of a fixed "self") suggest that identity is fluid or even an illusion. You might be seen as a dynamic process of thoughts, emotions, and experiences rather than a static entity.\n\n### 4. **Existentially**:  \n   You are a being in the process of defining yourself. Your choices, relationships, values, and goals shape who you become. Existentialists like Sartre argued that existence precedes essence—meaning you create your own meaning through actions.\n\n### 5. **Spiritually/Transcendentally**:  \n   Some traditions view the self as part of something greater—a soul, consciousness, or universal energy. Others see identity as a temporary construct, with the "true self" lying beyond the ego.\n\n### 6. **Socially**:  \n   You are shaped by your interactions, culture, and roles (e.g., friend, parent, professional). Identity is often a negotiation between internal desires and external expectations.\n\n### Final Thought:  \nThe answer to "Who am I?" is not a single truth but a mosaic of perspectives. It evolves as you grow, learn, and experience life. If you’re exploring this question personally, it might help to reflect on what matters to you, your values, and the stories you tell about yourself. \n\nIf you’d like, I can help you explore this further! 🌱'}], id='2025-09-17 02:24:23.160_39aa37', created_at='2025-09-17 02:24:23.160', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=655, time=9.345702, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.942 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
