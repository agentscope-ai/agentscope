
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

.. note:: For OpenAI-compatible models (e.g. vLLM, Deepseek), developers can use the ``OpenAIChatModel`` class, and specify the API endpoint by the ``client_args`` parameter: ``client_args={"base_url": "http://your-api-endpoint"}``. For example:

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: Model behavior parameters (such as temperature, maximum length, etc.) can be preset in the constructor function via the ``generate_kwargs`` parameter. For example:

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-28 12:29:30.592_56dc50', created_at='2025-09-28 12:29:30.592', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-28 12:29:31.898_5a7bf3', created_at='2025-09-28 12:29:31.898', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.304768, type='chat'), metadata=None)
    The response as Msg: Msg(id='cUmfSx47QgujMHcGRze35q', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-28 12:29:31.898', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-28 12:29:32.874_3d6bbe', created_at='2025-09-28 12:29:32.874', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=0.974906, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-28 12:29:32.962_9015ce', created_at='2025-09-28 12:29:32.962', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.062877, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-28 12:29:33.009_9d008d', created_at='2025-09-28 12:29:33.009', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.109078, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-28 12:29:33.056_984a29', created_at='2025-09-28 12:29:33.056', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.156235, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-28 12:29:33.168_cfc854', created_at='2025-09-28 12:29:33.168', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.268612, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-28 12:29:33.237_265c81', created_at='2025-09-28 12:29:33.237', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.337909, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-28 12:29:33.330_6010f7', created_at='2025-09-28 12:29:33.330', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=1.430685, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-28 12:29:33.443_ac5309', created_at='2025-09-28 12:29:33.444', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=1.544014, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-28 12:29:34.007_aa6120', created_at='2025-09-28 12:29:34.007', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.107962, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-28 12:29:34.174_a96833', created_at='2025-09-28 12:29:34.174', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.274928, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:29:34.302_0a8737', created_at='2025-09-28 12:29:34.302', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.402051, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:29:34.326_2a32c4', created_at='2025-09-28 12:29:34.326', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.426169, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a classic philosophical question. I need to approach this carefully.\n\nFirst, I should acknowledge the depth of the question. It\'s a fundamental inquiry about identity, consciousness, and existence. The user might be looking for a philosophical perspective, a psychological angle, or even a spiritual answer.\n\nI should consider different frameworks. From a philosophical standpoint, thinkers like Descartes ("I think, therefore I am") or existentialists like Sartre might be relevant. Psychologically, it could relate to self-concept and identity formation. Spiritually, it might touch on the idea of the soul or higher self.\n\nBut since I\'m an AI, I need to clarify that I can\'t provide personal insights. However, I can offer information on various perspectives. It\'s important to mention that the answer varies based on individual beliefs and experiences.\n\nAlso, the user might be seeking a more personal response. Maybe they\'re going through a period of self-reflection. I should encourage them to explore their own thoughts and experiences, perhaps suggesting introspection or discussing with others.\n\nI should avoid making assumptions about their background. Keep the response open-ended and informative, covering different angles without taking a definitive stance. Make sure to emphasize that the question is subjective and depends on personal beliefs.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the most profound and enduring inquiries in philosophy, spirituality, and personal reflection. It touches on identity, consciousness, and the nature of existence. Here are some perspectives to consider:\n\n### 1. **Philosophical Perspective**  \n   - **Descartes** ("I think, therefore I am"): Emphasizes self-awareness as the foundation of identity.  \n   - **Existentialism** (e.g., Sartre): Suggests that identity is not fixed but shaped by choices and actions.  \n   - **Eastern Philosophies** (e.g., Buddhism, Advaita Vedanta): Often question the notion of a permanent "self," pointing to impermanence or the illusion of separation from the universe.\n\n### 2. **Psychological Perspective**  \n   - **Self-concept**: Your sense of identity is shaped by experiences, relationships, values, and societal roles.  \n   - **Developmental theories** (e.g., Erikson): Identity emerges through stages of growth, balancing autonomy, intimacy, and purpose.\n\n### 3. **Spiritual/Existential Perspective**  \n   - **Soul or Higher Self**: Some traditions view the "I" as a spiritual essence beyond the physical body.  \n   - **Interconnectedness**: Others see identity as fluid, tied to relationships, community, and the cosmos.\n\n### 4. **Personal Reflection**  \n   - The answer may lie in your own experiences, values, and aspirations. What do you value most? How do you define your purpose? What brings you meaning?\n\n### 5. **A Note as an AI**  \n   As an AI, I don’t have a personal identity or consciousness. My role is to help you explore these questions through information, perspective, and dialogue. You are the author of your own story.\n\nUltimately, "Who am I?" is a journey, not a destination. It’s shaped by how you choose to live, what you believe, and how you engage with the world. What do *you* feel when you ask this question? 🌱'}], id='2025-09-28 12:29:42.257_0bb686', created_at='2025-09-28 12:29:42.257', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=700, time=7.926987, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 11.669 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
