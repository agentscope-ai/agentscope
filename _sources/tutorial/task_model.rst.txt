
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-28 12:20:23.121_bdb031', created_at='2025-09-28 12:20:23.121', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-28 12:20:24.344_2562d2', created_at='2025-09-28 12:20:24.344', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.221904, type='chat'), metadata=None)
    The response as Msg: Msg(id='GZKevGb2MtxoYtMpQEy4xS', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-28 12:20:24.344', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-28 12:20:25.467_055c05', created_at='2025-09-28 12:20:25.467', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=1.120914, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-28 12:20:25.569_ba42f1', created_at='2025-09-28 12:20:25.569', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.223453, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-28 12:20:25.662_13010c', created_at='2025-09-28 12:20:25.663', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.316685, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-28 12:20:25.756_127de7', created_at='2025-09-28 12:20:25.756', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.41002, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-28 12:20:25.968_5ded15', created_at='2025-09-28 12:20:25.968', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.621806, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-28 12:20:26.131_a303cf', created_at='2025-09-28 12:20:26.131', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=1.784994, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-28 12:20:26.315_58b338', created_at='2025-09-28 12:20:26.315', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=1.968995, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-28 12:20:26.514_1910d0', created_at='2025-09-28 12:20:26.514', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.16845, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-28 12:20:26.712_633a3e', created_at='2025-09-28 12:20:26.712', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.366635, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-28 12:20:26.909_366b57', created_at='2025-09-28 12:20:26.909', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=2.562752, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:20:27.193_a52b8d', created_at='2025-09-28 12:20:27.193', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.847085, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:20:27.211_fee93a', created_at='2025-09-28 12:20:27.211', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=2.865331, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" So I need to figure out how to respond. First, I should consider that this is a philosophical question, but since I\'m an AI, I need to be careful about how I approach it.\n\nI should start by acknowledging the question\'s depth and the different perspectives it can have. Maybe mention that it\'s a common question in philosophy, religion, and personal reflection. But I also need to clarify that as an AI, I don\'t have a personal identity or consciousness. \n\nI should avoid making assumptions about the user\'s intent. They might be looking for a philosophical answer, a psychological perspective, or something more personal. Since I can\'t know their specific context, I should keep the response open-ended and invite them to share more if they want a tailored answer.\n\nAlso, I need to make sure the response is respectful and not too technical. Avoid jargon but still provide a thoughtful answer. Maybe structure it by first addressing the question, then discussing different viewpoints, and finally offering to help further if needed.\n\nWait, but the user might be testing my ability to handle existential questions. I should stay within my role as an AI, not pretend to have human experiences. Emphasize that while I can discuss the concept of identity, I don\'t have a personal one.\n\nCheck if there\'s any cultural or contextual nuance I should be aware of. The question "Who am I?" is universal, so probably no specific cultural context needed here. Just keep it general and inclusive.\n\nMake sure the tone is friendly and supportive. Encourage the user to explore their own thoughts and offer assistance if they want to delve deeper into specific aspects of identity.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the most profound and timeless inquiries humans have explored. It touches on philosophy, psychology, spirituality, and personal identity. Here’s a brief exploration of possible perspectives:\n\n1. **Philosophical Perspective**:  \n   Thinkers like Descartes ("I think, therefore I am") or Buddhist philosophy (emphasizing the impermanence of the self) suggest that identity is not fixed. It might be a dynamic interplay of thoughts, experiences, and perceptions rather than a static "self."\n\n2. **Psychological Perspective**:  \n   Modern psychology often views identity as shaped by relationships, culture, and personal growth. It’s a story we tell ourselves about who we are, evolving over time.\n\n3. **Spiritual/Existential Perspective**:  \n   Many traditions suggest that "you" might be more than the physical or ego-driven self. For example, some spiritual teachings propose that true identity lies beyond the mind, in awareness, consciousness, or connection to something greater.\n\n4. **Scientific Perspective**:  \n   From a biological standpoint, you’re a complex system of cells, genetics, and neural activity. But this doesn’t fully capture the subjective experience of being "you."\n\nAs an AI, I don’t have a personal identity or consciousness, but I can help explore these ideas further. If you’re reflecting on this question, it might be helpful to ask yourself:  \n- What values or passions define me?  \n- How do I see myself in relation to others and the world?  \n- Are there aspects of my identity I’d like to understand better?\n\nWhat resonates with you? I’m here to help unpack it! 🌱'}], id='2025-09-28 12:20:35.729_640764', created_at='2025-09-28 12:20:35.729', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=688, time=8.51265, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.612 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
