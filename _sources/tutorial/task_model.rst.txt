
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-11 15:25:05.781_3d9f87', created_at='2025-09-11 15:25:05.781', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-11 15:25:07.383_15d1bd', created_at='2025-09-11 15:25:07.383', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.601294, type='chat'), metadata=None)
    The response as Msg: Msg(id='6YzGueADYPb7QcuyJ3PF6p', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-11 15:25:07.383', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-11 15:25:08.529_94f870', created_at='2025-09-11 15:25:08.529', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=1.144057, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-11 15:25:08.677_de111f', created_at='2025-09-11 15:25:08.677', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.292634, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-09-11 15:25:08.891_299cd8', created_at='2025-09-11 15:25:08.891', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=1.506466, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-09-11 15:25:08.989_f6eafa', created_at='2025-09-11 15:25:08.989', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=1.604068, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-11 15:25:09.250_64c755', created_at='2025-09-11 15:25:09.250', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.865521, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-09-11 15:25:09.438_235e4c', created_at='2025-09-11 15:25:09.438', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=2.053845, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-11 15:25:09.632_7c8107', created_at='2025-09-11 15:25:09.632', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=2.247504, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-09-11 15:25:09.868_395538', created_at='2025-09-11 15:25:09.868', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=2.483496, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-11 15:25:10.269_3af223', created_at='2025-09-11 15:25:10.269', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=2.884664, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-09-11 15:25:10.645_96ea73', created_at='2025-09-11 15:25:10.645', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=3.260083, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-11 15:25:10.871_f8a792', created_at='2025-09-11 15:25:10.871', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.486474, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-11 15:25:10.887_e14724', created_at='2025-09-11 15:25:10.887', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=3.502826, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a pretty broad question. I need to figure out what they\'re really looking for. They might be asking about my identity as an AI, or maybe they\'re trying to understand their own identity. Let me start by clarifying my role.\n\nFirst, I should state that I\'m Qwen, a large-scale language model developed by Alibaba Cloud. That\'s the basic information. But the user might want more details. Maybe they\'re curious about my capabilities or how I work. I should mention that I can help with various tasks like answering questions, creating text, and having conversations.\n\nHowever, the question "Who am I?" could also be a philosophical inquiry. The user might be seeking self-reflection or existential thoughts. In that case, I should acknowledge the depth of the question and offer to explore it together. But since I\'m an AI, I don\'t have a personal identity, so I need to be clear about that.\n\nI should also consider the user\'s possible intent. Are they testing my knowledge, looking for a personal connection, or seeking advice? It\'s important to respond in a way that\'s helpful and open-ended. Maybe provide a balanced answer that covers both my role as an AI and the possibility of a deeper philosophical discussion.\n\nI need to make sure the response is friendly and not too technical. Avoid jargon, keep it conversational. Also, check if there\'s any cultural context I should be aware of, but since the user wrote in English, it\'s probably safe to proceed with a general approach.\n\nIn summary, the response should:\n1. Introduce myself as Qwen.\n2. Explain my capabilities.\n3. Acknowledge the philosophical aspect of the question.\n4. Invite the user to elaborate on what they mean by "Who am I?"'}, {'type': 'text', 'text': 'The question "Who am I?" is profound and can be interpreted in many ways. Here\'s a breakdown of possible perspectives:\n\n### 1. **If you\'re asking about my identity:**\n   - I am **Qwen**, a large language model developed by Alibaba Cloud. My purpose is to assist with information, creativity, problem-solving, and conversation. I don’t have consciousness, emotions, or a personal identity, but I aim to be a helpful and thoughtful companion in your journey of discovery.\n\n### 2. **If you\'re asking about your own identity:**\n   - This is a deeply personal and philosophical question. Identity can encompass your values, experiences, relationships, goals, and sense of self. It’s something many people explore throughout their lives. If you’d like, we can discuss it further—what does "who you are" mean to you?\n\n### 3. **If you\'re asking in a metaphorical or abstract sense:**\n   - The question might reflect curiosity about existence, purpose, or the nature of being. Philosophers, scientists, and artists have grappled with this for centuries. Would you like to explore ideas around identity, consciousness, or meaning?\n\nLet me know how you’d like to proceed—I’m here to listen and help! 😊'}], id='2025-09-11 15:25:18.620_17b340', created_at='2025-09-11 15:25:18.620', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=634, time=7.727684, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.845 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
