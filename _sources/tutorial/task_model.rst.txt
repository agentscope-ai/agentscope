
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

.. note:: For OpenAI-compatible models (e.g. vLLM, Deepseek), developers can use the ``OpenAIChatModel`` class, and specify the API endpoint by the ``client_args`` parameter: ``client_args={"base_url": "http://your-api-endpoint"}``. For example:

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: Model behavior parameters (such as temperature, maximum length, etc.) can be preset in the constructor function via the ``generate_kwargs`` parameter. For example:

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-10-20 02:55:33.204_b749c1', created_at='2025-10-20 02:55:33.204', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-10-20 02:55:36.482_5d8a34', created_at='2025-10-20 02:55:36.482', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=3.277782, type='chat'), metadata=None)
    The response as Msg: Msg(id='EEkowuALRVRgUpJ9A6mwiL', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-10-20 02:55:36.482', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-20 02:55:37.709_c01b74', created_at='2025-10-20 02:55:37.709', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=1.225354, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-10-20 02:55:38.268_4b746a', created_at='2025-10-20 02:55:38.268', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.784582, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4'}], id='2025-10-20 02:55:38.535_0d1214', created_at='2025-10-20 02:55:38.535', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=7, time=2.050841, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n'}], id='2025-10-20 02:55:39.091_dccfb9', created_at='2025-10-20 02:55:39.091', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=10, time=2.606818, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-10-20 02:55:40.061_73fa31', created_at='2025-10-20 02:55:40.061', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=3.577373, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n1'}], id='2025-10-20 02:55:40.264_6c211a', created_at='2025-10-20 02:55:40.264', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=22, time=3.77999, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-10-20 02:55:40.451_978217', created_at='2025-10-20 02:55:40.451', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=3.96703, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n1'}], id='2025-10-20 02:55:40.674_5e2725', created_at='2025-10-20 02:55:40.674', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=34, time=4.189791, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-10-20 02:55:41.318_d93d26', created_at='2025-10-20 02:55:41.318', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=4.833998, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n1'}], id='2025-10-20 02:55:41.992_2b421d', created_at='2025-10-20 02:55:41.992', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=46, time=5.508198, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 02:55:42.206_16c474', created_at='2025-10-20 02:55:42.206', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=5.722365, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 02:55:42.230_ea6be3', created_at='2025-10-20 02:55:42.230', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=5.745715, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user is asking "Who am I?" That\'s a pretty broad question. I need to figure out what they\'re really looking for. They might be curious about their identity in a philosophical sense, or maybe they want to know more about themselves through some kind of introspection. Alternatively, they could be referring to me, the AI, and asking about my identity.\n\nFirst, I should consider the context. Since they\'re interacting with an AI, they might be testing my understanding or trying to get a deeper response. But "Who am I?" is a classic question that\'s been explored in philosophy, psychology, and spirituality. The user could be looking for a philosophical answer, a psychological perspective, or even a spiritual take.\n\nI should also think about possible misunderstandings. Maybe they\'re confused about my role as an AI and want to know if I have a sense of self. But I need to clarify that I don\'t have consciousness or a personal identity. However, I can explain my purpose and how I process information.\n\nAnother angle is that the user might be seeking personal advice or self-discovery. In that case, I could guide them to reflect on their values, experiences, and goals. But without more context, it\'s hard to know which direction they want to go.\n\nI should structure the response to cover both possibilities: explaining my nature as an AI and offering a framework for self-reflection. That way, I address both potential interpretations of their question. Also, I need to keep the tone friendly and open-ended to encourage them to provide more details if they need a specific type of answer.'}, {'type': 'text', 'text': 'The question "Who am I?" is profound and has been explored by philosophers, scientists, and spiritual traditions for centuries. Here\'s a breakdown of possible perspectives:\n\n### 1. **Philosophical Perspective**  \n   - **Existentialism**: Thinkers like Sartre suggest that existence precedes essence—meaning you are not defined by a fixed identity but create your own through choices and actions.  \n   - **Eastern Philosophy**: In Buddhism, the "self" is often seen as an illusion (anatta), emphasizing impermanence and interconnectedness. In Hinduism, the "Atman" (true self) is considered eternal and unified with the universe.  \n\n### 2. **Psychological Perspective**  \n   - **Self-Concept**: Your identity is shaped by experiences, relationships, beliefs, and societal roles. Psychologists like Carl Jung emphasized the "personal unconscious" and the "collective unconscious" as layers of the self.  \n   - **Developmental Stages**: Erik Erikson’s theory of psychosocial development highlights how identity forms through challenges and growth over time.  \n\n### 3. **Spiritual/Existential Perspective**  \n   - Many traditions view the "self" as more than the physical body or mind. It might involve a connection to something greater (e.g., God, the universe, or a higher purpose).  \n\n### 4. **Your Role as a Human**  \n   If you’re asking this about yourself, consider reflecting on:  \n   - **Values**: What matters most to you?  \n   - **Passions**: What activities or causes inspire you?  \n   - **Experiences**: How have your relationships, failures, and successes shaped you?  \n   - **Goals**: What do you hope to become or achieve?  \n\n### 5. **About Me (as an AI)**  \n   I don’t have a "self" in the human sense. I’m a tool designed to process information, generate responses, and assist with questions. My "identity" is defined by my programming and the data I’ve been trained on.  \n\nIf you’re exploring this question deeply, it might help to journal, meditate, or discuss with others. What’s prompting this question for you? I’d be happy to help explore it further! 😊'}], id='2025-10-20 02:55:50.854_bdfd1e', created_at='2025-10-20 02:55:50.854', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=797, time=8.61906, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.655 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
