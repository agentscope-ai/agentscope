
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

Model
====================

In this tutorial, we introduce the model APIs integrated in AgentScope, how to use them and how to integrate new model APIs.
The supported model APIs and providers include:

.. list-table::
    :header-rows: 1

    * - API
      - Class
      - Compatible
      - Streaming
      - Tools
      - Vision
      - Reasoning
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: When using vLLM, you need to configure the appropriate tool calling parameters for different models during deployment, such as ``--enable-auto-tool-choice``, ``--tool-call-parser``, etc. For more details, refer to the `official vLLM documentation <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_.

To provide unified model interfaces, the above model classes has the following common methods:

- The first three arguments of the ``__call__`` method are ``messages`` , ``tools`` and ``tool_choice``, representing the input messages, JSON schema of tool functions, and tool selection mode, respectively.
- The return type are either a ``ChatResponse`` instance or an async generator of ``ChatResponse`` in streaming mode.

.. note:: Different model APIs differ in the input message format, refer to :ref:`prompt` for more details.

The ``ChatResponse`` instance contains the generated thinking/text/tool use content, identity, created time and usage information.

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="I should search for AgentScope on Google.",
            ),
            TextBlock(type="text", text="I'll search for AgentScope on Google."),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope?"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': 'I should search for AgentScope on Google.'}, {'type': 'text', 'text': "I'll search for AgentScope on Google."}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope?'}}], id='2025-09-17 08:56:01.717_62ed01', created_at='2025-09-17 08:56:01.717', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

Taking ``DashScopeChatModel`` as an example, we can use it to create a chat model instance and call it with messages and tools:

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """An example of using the DashScopeChatModel."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Hi!"},
            ],
        )

        # You can directly create a ``Msg`` object with the response content
        msg_res = Msg("Friday", res.content, "assistant")

        print("The response:", res)
        print("The response as Msg:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The response: ChatResponse(content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], id='2025-09-17 08:56:03.512_a0687c', created_at='2025-09-17 08:56:03.512', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=9, time=1.794028, type='chat'), metadata=None)
    The response as Msg: Msg(id='bvwSK56ai2P5gJtCJDFVad', name='Friday', content=[{'type': 'text', 'text': 'Hello! How can I assist you today?'}], role='assistant', metadata=None, timestamp='2025-09-17 08:56:03.512', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

Streaming
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To enable streaming model, set the ``stream`` parameter in the model constructor to ``True``.
When streaming is enabled, the ``__call__`` method will return an **async generator** that yields ``ChatResponse`` instances as they are generated by the model.

.. note:: The streaming mode in AgentScope is designed to be **cumulative**, meaning the content in each chunk contains all the previous content plus the newly generated content.


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """An example of using the streaming model."""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "Count from 1 to 20, and just report the number without any other information.",
                },
            ],
        )
        print("The type of the response:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"Chunk {i}")
            print(f"\ttype: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The type of the response: <class 'async_generator'>
    Chunk 0
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 08:56:04.472_e27384', created_at='2025-09-17 08:56:04.472', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=1, time=0.957759, type='chat'), metadata=None)

    Chunk 1
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-17 08:56:04.526_069e93', created_at='2025-09-17 08:56:04.526', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=2, time=1.012204, type='chat'), metadata=None)

    Chunk 2
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-17 08:56:04.579_86f4f1', created_at='2025-09-17 08:56:04.579', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=3, time=1.065135, type='chat'), metadata=None)

    Chunk 3
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-17 08:56:04.633_032571', created_at='2025-09-17 08:56:04.633', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=4, time=1.119223, type='chat'), metadata=None)

    Chunk 4
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-17 08:56:04.849_5fb54a', created_at='2025-09-17 08:56:04.849', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=8, time=1.335429, type='chat'), metadata=None)

    Chunk 5
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-17 08:56:05.062_1cea0c', created_at='2025-09-17 08:56:05.062', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=12, time=1.548126, type='chat'), metadata=None)

    Chunk 6
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-17 08:56:05.275_8fc9ea', created_at='2025-09-17 08:56:05.275', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=16, time=1.761621, type='chat'), metadata=None)

    Chunk 7
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-17 08:56:05.612_5a047e', created_at='2025-09-17 08:56:05.612', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=20, time=2.098117, type='chat'), metadata=None)

    Chunk 8
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-17 08:56:06.023_d2a36b', created_at='2025-09-17 08:56:06.023', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=24, time=2.509671, type='chat'), metadata=None)

    Chunk 9
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-17 08:56:06.239_b748a0', created_at='2025-09-17 08:56:06.239', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=28, time=2.725354, type='chat'), metadata=None)

    Chunk 10
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-17 08:56:06.455_e3a6f5', created_at='2025-09-17 08:56:06.455', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=32, time=2.941121, type='chat'), metadata=None)

    Chunk 11
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-17 08:56:06.970_fc2420', created_at='2025-09-17 08:56:06.970', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=36, time=3.455863, type='chat'), metadata=None)

    Chunk 12
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-17 08:56:07.162_1eec4b', created_at='2025-09-17 08:56:07.162', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=40, time=3.648615, type='chat'), metadata=None)

    Chunk 13
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-17 08:56:08.424_b21ce1', created_at='2025-09-17 08:56:08.424', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=44, time=4.910316, type='chat'), metadata=None)

    Chunk 14
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-17 08:56:08.650_b73b20', created_at='2025-09-17 08:56:08.650', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=48, time=5.135908, type='chat'), metadata=None)

    Chunk 15
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 08:56:08.814_78d8a8', created_at='2025-09-17 08:56:08.814', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=5.30006, type='chat'), metadata=None)

    Chunk 16
            type: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 08:56:08.837_e77826', created_at='2025-09-17 08:56:08.837', type='chat', usage=ChatUsage(input_tokens=27, output_tokens=50, time=5.32354, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

Reasoning
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope supports reasoning models by providing the ``ThinkingBlock``.


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """An example of using the reasoning model."""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "Who am I?"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("The final response:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The final response:
    ChatResponse(content=[{'type': 'thinking', 'thinking': 'Okay, the user asked "Who am I?" which is a deep philosophical question. I need to approach this carefully. First, I should consider different perspectives: philosophical, psychological, and maybe even spiritual.\n\nFrom a philosophical standpoint, there\'s Descartes\' "I think, therefore I am," which suggests that the act of thinking proves existence. But the user might be looking for something more personal. \n\nPsychologically, identity is shaped by experiences, relationships, and self-perception. However, since I don\'t have personal experiences, I can\'t speak to that directly. \n\nSpiritually, some traditions view the self as part of a larger whole or as an illusion. But I should avoid making assumptions about the user\'s beliefs.\n\nI should also consider that the user might be seeking introspection or guidance. Maybe they\'re feeling lost or curious about their purpose. It\'s important to acknowledge that the answer varies for each person and encourage self-reflection.\n\nI need to make sure my response is open-ended, respectful, and doesn\'t impose any specific viewpoint. Let them know it\'s a personal journey and offer to help explore their thoughts further if they want.'}, {'type': 'text', 'text': 'The question "Who am I?" is one of the deepest and most profound inquiries humans can ask. It touches on philosophy, psychology, spirituality, and personal identity. Here are a few perspectives to consider:\n\n1. **Philosophical**: Thinkers like Descartes ("I think, therefore I am") suggest that your existence is tied to your capacity for self-awareness. Others, like Buddhist philosophy, might argue that the "self" is an illusion—a collection of impermanent thoughts, sensations, and experiences.\n\n2. **Psychological**: Your identity is shaped by your experiences, relationships, values, and choices. It’s a dynamic process, not a fixed state. You might see yourself as a blend of traits, roles, and aspirations.\n\n3. **Spiritual/Existential**: Some see the "self" as part of something greater (e.g., a soul, consciousness, or universal energy), while others embrace the idea that meaning is created through personal choices and connections.\n\n4. **Practical**: In daily life, you might define yourself by your passions, goals, relationships, or how you contribute to the world. But this is fluid—people change over time.\n\nUltimately, the answer to "Who am I?" is deeply personal. It’s a question that invites reflection, curiosity, and openness to growth. If you’re exploring this, consider what aspects of yourself feel most authentic, and how you’d like to evolve. I’m here to help you unpack it further if you’d like! 🌱'}], id='2025-09-17 08:56:17.796_618bf6', created_at='2025-09-17 08:56:17.796', type='chat', usage=ChatUsage(input_tokens=12, output_tokens=545, time=8.953946, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

Tools API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Different model providers differ in their tools APIs, e.g. the tools JSON schema, the tool call/response format.
To provide a unified interface, AgentScope solves the problem by:

- Providing unified tool call block :ref:`ToolUseBlock <tool-block>` and tool response block :ref:`ToolResultBlock <tool-block>`, respectively.
- Providing a unified tools interface in the ``__call__`` method of the model classes, that accepts a list of tools JSON schemas as follows:


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "Search for a query on Google.",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "The search query.",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

Further Reading
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.083 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
