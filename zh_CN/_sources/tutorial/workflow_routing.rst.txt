
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_routing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_routing.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_routing.py:


.. _routing:

Routing
==========================
在 AgentScope 中有两种实现 Routing 的方法，都简单易实现：

- 使用结构化输出的显式 routing
- 使用工具调用的隐式 routing

.. tip:: 考虑到智能体 routing 没有统一的标准/定义，我们遵循 `Building effective agents <https://www.anthropic.com/engineering/building-effective-agents>`_ 中的设置

显式 Routing
~~~~~~~~~~~~~~~~~~~~~~~~~~
在显式 routing 中，我们可以直接使用智能体的结构化输出来确定将消息路由到哪个智能体。

初始化 routing 智能体

.. GENERATED FROM PYTHON SOURCE LINES 20-83

.. code-block:: Python

    import asyncio
    import json
    import os
    from typing import Literal

    from pydantic import BaseModel, Field

    from agentscope.agent import ReActAgent
    from agentscope.formatter import DashScopeChatFormatter
    from agentscope.memory import InMemoryMemory
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.tool import Toolkit, ToolResponse

    router = ReActAgent(
        name="Router",
        sys_prompt="你是一个路由智能体。你的目标是将用户查询路由到正确的后续任务，注意你不需要回答用户的问题。",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        formatter=DashScopeChatFormatter(),
    )


    # 使用结构化输出指定路由任务
    class RoutingChoice(BaseModel):
        your_choice: Literal[
            "Content Generation",
            "Programming",
            "Information Retrieval",
            None,
        ] = Field(
            description="选择正确的后续任务，如果任务太简单或没有合适的任务，则选择 ``None``",
        )
        task_description: str | None = Field(
            description="任务描述",
            default=None,
        )


    async def example_router_explicit() -> None:
        """使用结构化输出进行显式路由的示例。"""
        msg_user = Msg(
            "user",
            "帮我写一首诗",
            "user",
        )

        # 路由查询
        msg_res = await router(
            msg_user,
            structured_model=RoutingChoice,
        )

        # 结构化输出存储在 metadata 字段中
        print("结构化输出：")
        print(json.dumps(msg_res.metadata, indent=4, ensure_ascii=False))


    asyncio.run(example_router_explicit())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Router: 好的，我将为您创作一首诗。
    结构化输出：
    {
        "your_choice": "Content Generation",
        "task_description": null
    }




.. GENERATED FROM PYTHON SOURCE LINES 84-90

隐式 Routing
~~~~~~~~~~~~~~~~~~~~~~~~~
另一种方法是将下游智能体包装成工具函数，这样路由智能体就可以根据用户查询决定调用哪个工具。

我们首先定义几个工具函数：


.. GENERATED FROM PYTHON SOURCE LINES 90-140

.. code-block:: Python



    async def generate_python(demand: str) -> ToolResponse:
        """根据需求生成 Python 代码。

        Args:
            demand (``str``):
                对 Python 代码的需求。
        """
        # 示例需求智能体
        python_agent = ReActAgent(
            name="PythonAgent",
            sys_prompt="你是一个 Python 专家，你的目标是根据需求生成 Python 代码。",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            memory=InMemoryMemory(),
            formatter=DashScopeChatFormatter(),
            toolkit=Toolkit(),
        )
        msg_res = await python_agent(Msg("user", demand, "user"))

        return ToolResponse(
            content=msg_res.get_content_blocks("text"),
        )


    # 为演示目的模拟一些其他工具函数
    async def generate_poem(demand: str) -> ToolResponse:
        """根据需求生成诗歌。

        Args:
            demand (``str``):
                对诗歌的需求。
        """
        pass


    async def web_search(query: str) -> ToolResponse:
        """在网络上搜索查询。

        Args:
            query (``str``):
                要搜索的查询。
        """
        pass









.. GENERATED FROM PYTHON SOURCE LINES 141-143

之后，我们定义一个路由智能体并为其配备上述工具函数。


.. GENERATED FROM PYTHON SOURCE LINES 143-177

.. code-block:: Python


    toolkit = Toolkit()
    toolkit.register_tool_function(generate_python)
    toolkit.register_tool_function(generate_poem)
    toolkit.register_tool_function(web_search)

    # 使用工具模块初始化路由智能体
    router_implicit = ReActAgent(
        name="Router",
        sys_prompt="你是一个路由智能体。你的目标是将用户查询路由到正确的后续任务。",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        formatter=DashScopeChatFormatter(),
        toolkit=toolkit,
        memory=InMemoryMemory(),
    )


    async def example_router_implicit() -> None:
        """使用工具调用进行隐式路由的示例。"""
        msg_user = Msg(
            "user",
            "帮我在 Python 中生成一个快速排序函数",
            "user",
        )

        # 路由查询
        await router_implicit(msg_user)


    asyncio.run(example_router_implicit())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Router: {
        "type": "tool_use",
        "name": "generate_python",
        "input": {
            "demand": "需要一个快速排序函数"
        },
        "id": "call_76780af55b4a45adae5d83"
    }
    PythonAgent: 这是一个使用 Python 实现的快速排序函数。快速排序是一种高效的排序算法，它采用了分治策略来把一个序列分为较小和较大的两个子序列，然后递归地排序两个子序列。

    ```python
    def quicksort(arr):
        if len(arr) <= 1:
            return arr
        else:
            # 选择基准值
            pivot = arr[len(arr) // 2]
            # 分别存储比基准小和大的元素
            left = [x for x in arr if x < pivot]
            middle = [x for x in arr if x == pivot]
            right = [x for x in arr if x > pivot]
            # 递归排序左右两边，并与中间部分合并
            return quicksort(left) + middle + quicksort(right)

    # 示例
    example_list = [3, 6, 8, 10, 1, 2, 1]
    sorted_list = quicksort(example_list)
    print(sorted_list)
    ```

    这段代码中，`quicksort` 函数接收一个列表 `arr` 作为参数。如果列表长度小于或等于 1，则直接返回该列表（因为单个元素列表自然是有序的）。否则，我们选取列表中间的元素作为基准值 (pivot)，并创建两个新列表：一个用于存放所有小于基准值的元素，另一个用于存放大于基准值的元素。等于基准值的元素放在中间。最后，递归地对左右两个列表进行快速排序，并将结果连接起来。
    system: {
        "type": "tool_result",
        "id": "call_76780af55b4a45adae5d83",
        "name": "generate_python",
        "output": [
            {
                "type": "text",
                "text": "这是一个使用 Python 实现的快速排序函数。快速排序是一种高效的排序算法，它采用了分治策略来把一个序列分为较小和较大的两个子序列，然后递归地排序两个子序列。\n\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        # 选择基准值\n        pivot = arr[len(arr) // 2]\n        # 分别存储比基准小和大的元素\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        # 递归排序左右两边，并与中间部分合并\n        return quicksort(left) + middle + quicksort(right)\n\n# 示例\nexample_list = [3, 6, 8, 10, 1, 2, 1]\nsorted_list = quicksort(example_list)\nprint(sorted_list)\n```\n\n这段代码中，`quicksort` 函数接收一个列表 `arr` 作为参数。如果列表长度小于或等于 1，则直接返回该列表（因为单个元素列表自然是有序的）。否则，我们选取列表中间的元素作为基准值 (pivot)，并创建两个新列表：一个用于存放所有小于基准值的元素，另一个用于存放大于基准值的元素。等于基准值的元素放在中间。最后，递归地对左右两个列表进行快速排序，并将结果连接起来。"
            }
        ]
    }
    Router: 这是一个使用 Python 实现的快速排序函数。快速排序是一种高效的排序算法，它采用了分治策略来把一个序列分为较小和较大的两个子序列，然后递归地排序两个子序列。

    ```python
    def quicksort(arr):
        if len(arr) <= 1:
            return arr
        else:
            # 选择基准值
            pivot = arr[len(arr) // 2]
            # 分别存储比基准小和大的元素
            left = [x for x in arr if x < pivot]
            middle = [x for x in arr if x == pivot]
            right = [x for x in arr if x > pivot]
            # 递归排序左右两边，并与中间部分合并
            return quicksort(left) + middle + quicksort(right)

    # 示例
    example_list = [3, 6, 8, 10, 1, 2, 1]
    sorted_list = quicksort(example_list)
    print(sorted_list)  # 输出应该是 [1, 1, 2, 3, 6, 8, 10]
    ```

    在这段代码中，`quicksort` 函数接收一个列表 `arr` 作为参数。如果列表长度小于或等于 1，则直接返回该列表（因为单个元素列表自然是有序的）。否则，我们选取列表中间的元素作为基准值 (pivot)，并创建两个新列表：一个用于存放所有小于基准值的元素，另一个用于存放大于基准值的元素。等于基准值的元素放在中间。最后，递归地对左右两个列表进行快速排序，并将结果连接起来。你可以使用这个函数来对你自己的列表进行排序。





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.118 seconds)


.. _sphx_glr_download_tutorial_workflow_routing.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_routing.ipynb <workflow_routing.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_routing.py <workflow_routing.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_routing.zip <workflow_routing.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
