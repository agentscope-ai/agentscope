
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_routing.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_routing.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_routing.py:


.. _routing:

Routing
==========================
在 AgentScope 中有两种实现 Routing 的方法，都简单易实现：

- 使用结构化输出的显式 routing
- 使用工具调用的隐式 routing

.. tip:: 考虑到智能体 routing 没有统一的标准/定义，我们遵循 `Building effective agents <https://www.anthropic.com/engineering/building-effective-agents>`_ 中的设置

显式 Routing
~~~~~~~~~~~~~~~~~~~~~~~~~~
在显式 routing 中，我们可以直接使用智能体的结构化输出来确定将消息路由到哪个智能体。

初始化 routing 智能体

.. GENERATED FROM PYTHON SOURCE LINES 20-83

.. code-block:: Python

    import asyncio
    import json
    import os
    from typing import Literal

    from pydantic import BaseModel, Field

    from agentscope.agent import ReActAgent
    from agentscope.formatter import DashScopeChatFormatter
    from agentscope.memory import InMemoryMemory
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.tool import Toolkit, ToolResponse

    router = ReActAgent(
        name="Router",
        sys_prompt="你是一个路由智能体。你的目标是将用户查询路由到正确的后续任务，注意你不需要回答用户的问题。",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        formatter=DashScopeChatFormatter(),
    )


    # 使用结构化输出指定路由任务
    class RoutingChoice(BaseModel):
        your_choice: Literal[
            "Content Generation",
            "Programming",
            "Information Retrieval",
            None,
        ] = Field(
            description="选择正确的后续任务，如果任务太简单或没有合适的任务，则选择 ``None``",
        )
        task_description: str | None = Field(
            description="任务描述",
            default=None,
        )


    async def example_router_explicit() -> None:
        """使用结构化输出进行显式路由的示例。"""
        msg_user = Msg(
            "user",
            "帮我写一首诗",
            "user",
        )

        # 路由查询
        msg_res = await router(
            msg_user,
            structured_model=RoutingChoice,
        )

        # 结构化输出存储在 metadata 字段中
        print("结构化输出：")
        print(json.dumps(msg_res.metadata, indent=4, ensure_ascii=False))


    asyncio.run(example_router_explicit())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Router: 好的，我将帮您创作一首诗。
    结构化输出：
    {
        "your_choice": "Content Generation",
        "task_description": null
    }




.. GENERATED FROM PYTHON SOURCE LINES 84-90

隐式 Routing
~~~~~~~~~~~~~~~~~~~~~~~~~
另一种方法是将下游智能体包装成工具函数，这样路由智能体就可以根据用户查询决定调用哪个工具。

我们首先定义几个工具函数：


.. GENERATED FROM PYTHON SOURCE LINES 90-140

.. code-block:: Python



    async def generate_python(demand: str) -> ToolResponse:
        """根据需求生成 Python 代码。

        Args:
            demand (``str``):
                对 Python 代码的需求。
        """
        # 示例需求智能体
        python_agent = ReActAgent(
            name="PythonAgent",
            sys_prompt="你是一个 Python 专家，你的目标是根据需求生成 Python 代码。",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            memory=InMemoryMemory(),
            formatter=DashScopeChatFormatter(),
            toolkit=Toolkit(),
        )
        msg_res = await python_agent(Msg("user", demand, "user"))

        return ToolResponse(
            content=msg_res.get_content_blocks("text"),
        )


    # 为演示目的模拟一些其他工具函数
    async def generate_poem(demand: str) -> ToolResponse:
        """根据需求生成诗歌。

        Args:
            demand (``str``):
                对诗歌的需求。
        """
        pass


    async def web_search(query: str) -> ToolResponse:
        """在网络上搜索查询。

        Args:
            query (``str``):
                要搜索的查询。
        """
        pass









.. GENERATED FROM PYTHON SOURCE LINES 141-143

之后，我们定义一个路由智能体并为其配备上述工具函数。


.. GENERATED FROM PYTHON SOURCE LINES 143-177

.. code-block:: Python


    toolkit = Toolkit()
    toolkit.register_tool_function(generate_python)
    toolkit.register_tool_function(generate_poem)
    toolkit.register_tool_function(web_search)

    # 使用工具模块初始化路由智能体
    router_implicit = ReActAgent(
        name="Router",
        sys_prompt="你是一个路由智能体。你的目标是将用户查询路由到正确的后续任务。",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        formatter=DashScopeChatFormatter(),
        toolkit=toolkit,
        memory=InMemoryMemory(),
    )


    async def example_router_implicit() -> None:
        """使用工具调用进行隐式路由的示例。"""
        msg_user = Msg(
            "user",
            "帮我在 Python 中生成一个快速排序函数",
            "user",
        )

        # 路由查询
        await router_implicit(msg_user)


    asyncio.run(example_router_implicit())




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Router: {
        "type": "tool_use",
        "name": "generate_python",
        "input": {
            "demand": "生成一个快速排序函数"
        },
        "id": "call_a67116fc6db140328a1aff"
    }
    PythonAgent: 以下是一个使用 Python 编写的快速排序函数。这个函数采用了递归的方式来实现快速排序算法：

    ```python
    def quicksort(arr):
        if len(arr) <= 1:
            return arr
        else:
            # 选择基准值
            pivot = arr[len(arr) // 2]
            # 小于基准的元素组成的子数组
            left = [x for x in arr if x < pivot]
            # 等于基准的元素组成的子数组
            middle = [x for x in arr if x == pivot]
            # 大于基准的元素组成的子数组
            right = [x for x in arr if x > pivot]
            # 递归地对左侧和右侧子数组进行快速排序，然后将结果合并
            return quicksort(left) + middle + quicksort(right)

    # 示例
    print(quicksort([3,6,8,10,1,2,1]))
    # 输出: [1, 1, 2, 3, 6, 8, 10]
    ```

    这段代码首先检查输入数组 `arr` 的长度，如果长度小于或等于 1，那么它已经是“排好序”的了，直接返回。否则，选取一个中间元素作为基准值（pivot），并创建两个子数组：一个包含所有小于基准值的元素，另一个包含所有大于基准值的元素。然后递归地对这两个子数组进行快速排序，并将结果与等于基准值的元素（middle）连接起来形成最终的排序数组。

    你可以复制上面的代码到你的 Python 环境中运行并测试。如果你有任何问题或者需要进一步的帮助，请告诉我！
    system: {
        "type": "tool_result",
        "id": "call_a67116fc6db140328a1aff",
        "name": "generate_python",
        "output": [
            {
                "type": "text",
                "text": "以下是一个使用 Python 编写的快速排序函数。这个函数采用了递归的方式来实现快速排序算法：\n\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        # 选择基准值\n        pivot = arr[len(arr) // 2]\n        # 小于基准的元素组成的子数组\n        left = [x for x in arr if x < pivot]\n        # 等于基准的元素组成的子数组\n        middle = [x for x in arr if x == pivot]\n        # 大于基准的元素组成的子数组\n        right = [x for x in arr if x > pivot]\n        # 递归地对左侧和右侧子数组进行快速排序，然后将结果合并\n        return quicksort(left) + middle + quicksort(right)\n\n# 示例\nprint(quicksort([3,6,8,10,1,2,1]))\n# 输出: [1, 1, 2, 3, 6, 8, 10]\n```\n\n这段代码首先检查输入数组 `arr` 的长度，如果长度小于或等于 1，那么它已经是“排好序”的了，直接返回。否则，选取一个中间元素作为基准值（pivot），并创建两个子数组：一个包含所有小于基准值的元素，另一个包含所有大于基准值的元素。然后递归地对这两个子数组进行快速排序，并将结果与等于基准值的元素（middle）连接起来形成最终的排序数组。\n\n你可以复制上面的代码到你的 Python 环境中运行并测试。如果你有任何问题或者需要进一步的帮助，请告诉我！"
            }
        ]
    }
    Router: 生成的快速排序函数如下所示，您可以将这段代码在您的 Python 环境中使用：

    ```python
    def quicksort(arr):
        if len(arr) <= 1:
            return arr
        else:
            # 选择基准值
            pivot = arr[len(arr) // 2]
            # 小于基准的元素组成的子数组
            left = [x for x in arr if x < pivot]
            # 等于基准的元素组成的子数组
            middle = [x for x in arr if x == pivot]
            # 大于基准的元素组成的子数组
            right = [x for x in arr if x > pivot]
            # 递归地对左侧和右侧子数组进行快速排序，然后将结果合并
            return quicksort(left) + middle + quicksort(right)

    # 示例
    print(quicksort([3,6,8,10,1,2,1]))
    # 输出: [1, 1, 2, 3, 6, 8, 10]
    ```

    这段代码实现了基本的快速排序算法。如果您有任何问题或者需要进一步的帮助，请告诉我！





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 29.247 seconds)


.. _sphx_glr_download_tutorial_workflow_routing.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_routing.ipynb <workflow_routing.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_routing.py <workflow_routing.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_routing.zip <workflow_routing.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
