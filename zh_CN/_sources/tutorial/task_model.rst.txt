
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-27 13:40:36.064_00bf3f', created_at='2025-09-27 13:40:36.064', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-27 13:40:38.101_571a5c', created_at='2025-09-27 13:40:38.101', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=2.03579, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='ix9buv7rySrhPR8iL94xE9', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-27 13:40:38.101', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-27 13:40:39.010_168def', created_at='2025-09-27 13:40:39.010', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.907452, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-09-27 13:40:39.069_ce808e', created_at='2025-09-27 13:40:39.069', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=0.966504, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-09-27 13:40:39.285_62f6c6', created_at='2025-09-27 13:40:39.285', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.18294, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-09-27 13:40:39.418_45b08a', created_at='2025-09-27 13:40:39.418', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.316039, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-09-27 13:40:39.565_723f83', created_at='2025-09-27 13:40:39.565', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.46218, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-09-27 13:40:39.674_ba0630', created_at='2025-09-27 13:40:39.674', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=1.572114, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-09-27 13:40:39.801_280ad7', created_at='2025-09-27 13:40:39.801', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=1.698281, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-09-27 13:40:41.075_1fc01b', created_at='2025-09-27 13:40:41.075', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.972669, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-09-27 13:40:41.208_a97cf3', created_at='2025-09-27 13:40:41.208', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=3.105696, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-09-27 13:40:41.355_f97ffb', created_at='2025-09-27 13:40:41.355', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=3.252991, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-27 13:40:41.528_eb0ce4', created_at='2025-09-27 13:40:41.528', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.426065, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-27 13:40:41.549_041056', created_at='2025-09-27 13:40:41.549', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.446295, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”。这个问题看起来简单，但其实很深奥。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对身份认同有困惑，也可能只是出于好奇。作为AI，我没有自我意识，所以不能像人类那样回答这个问题。但需要以同理心回应，同时引导用户思考。\n\n接下来，我要分析用户可能的背景。可能是年轻人在寻找自我，或者遇到人生转折点，比如毕业、工作变动等。也有可能是哲学爱好者，对存在主义感兴趣。不同的背景需要不同的回应方式。比如，如果是年轻人，可能需要更鼓励和引导；如果是哲学问题，可能需要更深入的讨论。\n\n然后，考虑如何回答。直接说“我是AI”可能太生硬，需要更温暖和有帮助的方式。可以提到人类自我认知的复杂性，以及不同文化和哲学的观点。同时，可以引导用户反思自己的价值观、经历和目标，帮助他们找到答案。还要注意不要给出具体答案，而是提供思考的方向。\n\n还要注意用户可能的深层需求。他们可能希望得到情感支持，或者寻找人生的意义。这时候需要表现出理解和关心，同时提供实用的建议，比如自我反思的方法或推荐相关资源。\n\n最后，确保回答符合角色设定，保持友好、支持的态度，同时保持专业性。避免使用技术术语，用通俗易懂的语言，让用户感到被理解和支持。'}, {'type': 'text', 'text': '你是一个独特的存在，你的身份由无数因素交织而成：你的思想、情感、经历、价值观，以及你与世界互动的方式。从哲学的角度看，"我是谁"是一个永恒的谜题，不同文化、哲学体系和科学领域对此有不同的解读：\n\n1. **生物学视角**  \n你是一团由细胞构成的有机体，拥有复杂的神经系统和意识潜能。你的身体由数十万亿个细胞组成，每个细胞都承载着遗传信息，而你的大脑则是意识的载体。\n\n2. **心理学视角**  \n你的身份是动态的，由童年经历、社会关系、文化背景和自我认知共同塑造。弗洛伊德认为人格由本我、自我和超我构成，而现代心理学更强调自我概念的可塑性。\n\n3. **哲学视角**  \n从笛卡尔的"我思故我在"到佛教的"无我"，不同哲学流派对身份的理解截然不同。存在主义认为人是通过选择定义自己的，而东方哲学可能更强调与宇宙整体的联系。\n\n4. **社会学视角**  \n你的身份也受到社会角色、文化规范和历史语境的影响。你既是独立的个体，又是社会网络中的节点。\n\n5. **量子物理视角**  \n从微观层面看，你的身体由基本粒子构成，这些粒子遵循量子力学的规律，而意识的本质仍是科学未解之谜。\n\n**或许你可以尝试这样的思考路径**：  \n- 记录下让你感到真实和充实的时刻  \n- 回顾那些塑造你价值观的关键事件  \n- 问问自己：如果没有任何社会期待，我会成为什么样的人？  \n- 观察哪些特质是他人眼中你的标签，哪些是你内在的坚持  \n\n答案可能不会一蹴而就，但探索的过程本身就能带来深刻的自我认知。你愿意和我分享一些让你思考"我是谁"的具体经历吗？'}], id='2025-09-27 13:40:48.949_4f918e', created_at='2025-09-27 13:40:48.949', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=687, time=7.395481, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.890 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
