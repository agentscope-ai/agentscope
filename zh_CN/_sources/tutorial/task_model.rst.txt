
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-16 07:27:18.482_aa2c43', created_at='2025-09-16 07:27:18.482', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-16 07:27:20.382_ff057a', created_at='2025-09-16 07:27:20.382', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.898796, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='Cpr6CGqo6htkGyNnBXJfYo', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-16 07:27:20.382', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-16 07:27:21.430_179d1b', created_at='2025-09-16 07:27:21.431', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.046879, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-16 07:27:21.620_c93e53', created_at='2025-09-16 07:27:21.620', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.236009, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-16 07:27:21.670_9efd6f', created_at='2025-09-16 07:27:21.670', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.286741, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-16 07:27:21.736_148407', created_at='2025-09-16 07:27:21.736', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.35231, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-16 07:27:21.864_c20a4f', created_at='2025-09-16 07:27:21.864', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.480496, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-16 07:27:22.022_257b00', created_at='2025-09-16 07:27:22.022', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.638484, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-16 07:27:22.132_791b56', created_at='2025-09-16 07:27:22.132', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.748322, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-16 07:27:23.059_e2334e', created_at='2025-09-16 07:27:23.059', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.6755, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-16 07:27:23.208_2fabf4', created_at='2025-09-16 07:27:23.208', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.824041, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-16 07:27:23.469_9cd5e3', created_at='2025-09-16 07:27:23.469', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.085533, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 07:27:23.599_ff73a8', created_at='2025-09-16 07:27:23.599', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.215024, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 07:27:23.685_84ab00', created_at='2025-09-16 07:27:23.685', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.301833, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要考虑用户可能的背景和意图。可能用户正在思考自我认知，或者遇到了身份认同的问题，也可能是出于好奇。接下来，我要分析这个问题的不同层面。从哲学角度看，这可能涉及笛卡尔的“我思故我在”，或者佛教中的无我概念。心理学上，可能涉及自我意识和身份认同的发展。科学角度，可能讨论大脑和意识的关系。\n\n然后，我需要考虑如何回应才能既全面又不显得过于学术。用户可能希望得到一个深入但易懂的回答。可能需要分点说明不同领域的观点，同时保持语言自然。还要注意避免过于抽象，提供一些实际例子或引用名人名言来增强说服力。\n\n另外，要确保回答符合中国法规和价值观，避免敏感内容。可能需要强调积极向上的观点，比如自我成长的重要性。同时，用户可能没有明确说明他们的具体需求，所以回答需要保持开放性，鼓励进一步思考或提问。\n\n最后，检查是否有遗漏的重要观点，比如文化差异对自我认知的影响，或者现代科技如人工智能对身份概念的挑战。确保回答结构清晰，逻辑连贯，同时保持口语化，避免生硬的专业术语。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和科学意义。不同角度的回答可能揭示不同的真相：\n\n---\n\n### **1. 从哲学角度看**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”的存在。这是对“我是谁”的经典回答——**我是思考的主体**。\n- **佛教的“无我”**：佛教认为“我”是虚幻的执着，是五蕴（色、受、想、行、识）暂时聚合的假象，真正的自我是空性。\n- **存在主义**：萨特说“存在先于本质”，人通过选择和行动定义自己，**我是我选择成为的样子**。\n\n---\n\n### **2. 从心理学角度看**\n- **自我认知**：心理学家认为“我”是大脑对自身身份的整合，包括记忆、价值观、性格和与他人的关系。比如，你可能觉得自己是“一个善良的人”或“一个喜欢冒险的人”。\n- **身份认同**：青少年时期常会困惑“我是谁”，因为身份是动态的，随着经历、环境和选择不断变化。\n\n---\n\n### **3. 从科学角度看**\n- **生物学**：从基因到神经元，你的身体和大脑是“你”的物质基础。但科学无法完全解释意识的主观体验（即“为什么我会感到‘我’存在”）。\n- **量子力学与意识**：一些理论提出，意识可能与量子过程有关，但目前仍无定论。\n\n---\n\n### **4. 从日常体验看**\n- **你是“此刻的感受”**：当你感到快乐、悲伤、愤怒或平静时，这些情绪和体验构成了你对“我是谁”的感知。\n- **你是“关系的总和”**：你与家人、朋友、社会的关系，以及你对世界的贡献，共同塑造了你的身份。\n\n---\n\n### **5. 一个更简单的答案**\n如果非要一句话回答：“**你是正在思考‘我是谁’的你**。”  \n这个问题本身，或许就是你探索自我的开始。\n\n---\n\n**你可以试着问自己**：  \n- 如果没有名字、身份、社会角色，我还会是谁？  \n- 什么让我感到“活着”？  \n- 我的哪些特质是永恒的，哪些是暂时的？  \n\n这个问题没有标准答案，但每一次思考，都在帮你更接近真实的自己。 🌱'}], id='2025-09-16 07:27:32.984_d25a3e', created_at='2025-09-16 07:27:32.984', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=787, time=9.293665, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.506 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
