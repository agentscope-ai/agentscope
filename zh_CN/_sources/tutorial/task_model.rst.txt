
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-20 08:36:19.278_dcf75d', created_at='2025-10-20 08:36:19.278', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-20 08:36:20.913_757e04', created_at='2025-10-20 08:36:20.913', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.634253, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='MCCgXw3E6rM3vMXvPNei6B', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-20 08:36:20.914', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-20 08:36:21.850_9694a4', created_at='2025-10-20 08:36:21.850', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.935268, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-20 08:36:21.949_62fdbf', created_at='2025-10-20 08:36:21.949', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.034064, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-20 08:36:22.047_a34ae2', created_at='2025-10-20 08:36:22.047', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.132321, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-20 08:36:22.147_21aca7', created_at='2025-10-20 08:36:22.147', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.231895, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-20 08:36:22.354_a4af67', created_at='2025-10-20 08:36:22.354', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.438966, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-20 08:36:22.571_f7a6b8', created_at='2025-10-20 08:36:22.571', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.656367, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-20 08:36:22.748_7d20f1', created_at='2025-10-20 08:36:22.748', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.832835, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-20 08:36:22.946_bfef59', created_at='2025-10-20 08:36:22.946', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.030767, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-20 08:36:23.169_41061b', created_at='2025-10-20 08:36:23.169', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.254339, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-20 08:36:23.342_adee4b', created_at='2025-10-20 08:36:23.342', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.4272, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 08:36:23.545_bcaf79', created_at='2025-10-20 08:36:23.545', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.630523, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 08:36:23.666_ffe546', created_at='2025-10-20 08:36:23.666', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.751372, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对身份、存在感到困惑。接下来，我应该分析不同的哲学观点，比如笛卡尔的“我思故我在”，存在主义的观点，以及佛教的无我概念。\n\n然后，要考虑用户的背景。他们可能对哲学感兴趣，或者正在经历身份认同的危机。需要确保回答既全面又易懂，避免过于学术化。同时，可能需要加入一些心理学的角度，比如自我认知的发展，或者社会角色对身份的影响。\n\n还要注意用户可能没有明确表达的深层需求。也许他们希望得到情感支持，或者寻找生活的意义。这时候，回答不仅要提供信息，还要有同理心，鼓励他们进一步思考或寻求专业帮助。\n\n另外，要检查是否有文化差异的影响。不同文化对“自我”的定义可能不同，比如东方文化更强调集体身份，而西方更注重个人主义。可能需要提到这些差异，但保持中立。\n\n最后，确保回答结构清晰，分点说明不同的观点，并总结可能的结论。同时，保持语气友好，邀请用户进一步交流，以促进更深入的对话。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能是人类最深奥的哲学命题之一。它不仅涉及自我认知，还触及存在、意识、身份和意义的本质。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### 1. **哲学视角**\n   - **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。这里的“我”是思考的主体，是不可怀疑的起点。\n   - **存在主义**：萨特等哲学家认为，“存在先于本质”，人没有预设的定义，而是通过选择和行动塑造自己。因此，“我是谁”是一个不断被创造的过程。\n   - **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒不变的实体。执着于“我”的概念反而会带来痛苦。\n\n---\n\n### 2. **心理学视角**\n   - **自我认知**：心理学家认为，人的身份是通过与他人的互动、社会角色和内在价值观逐渐形成的。例如，你可能同时是“学生”“朋友”“家人”或“某个社群的一员”。\n   - **人格理论**：弗洛伊德的“本我-自我-超我”结构，或荣格的“个体化过程”，都试图解释人类如何整合内在冲突，形成稳定的自我认同。\n\n---\n\n### 3. **科学视角**\n   - **神经科学**：大脑的神经元活动和意识体验是否能完全定义“我”？目前科学尚未找到“意识”的确切本质，但研究显示，自我感可能与前额叶皮层和默认模式网络有关。\n   - **量子物理与意识**：一些理论（如“量子意识假说”）尝试将意识与物理规律联系起来，但这一领域仍充满争议。\n\n---\n\n### 4. **日常生活的视角**\n   - **角色与身份**：在日常生活中，“我是谁”可能取决于你所处的环境。例如，在工作中是“员工”，在家庭中是“孩子”或“父母”，在兴趣中是“艺术家”或“旅行者”。\n   - **价值观与信念**：你的选择、信仰、道德观和人生目标，也在塑造你对“我是谁”的理解。\n\n---\n\n### 5. **可能的答案**\n   - **“我是”**：或许问题本身已经暗示了答案——你正在思考“我是谁”，这证明你存在，而存在本身就是一种身份。\n   - **“我是未完成的探索”**：许多人认为，自我是一个动态的过程，而非固定的答案。你可能永远在“成为”中，而非“是”什么。\n   - **“我是宇宙的观察者”**：从更宏观的角度看，你可能是宇宙自我认知的一部分，通过意识体验世界。\n\n---\n\n### 6. **如何进一步思考？**\n   - **内省练习**：写下你最珍视的价值观、最深的恐惧或梦想，这些可能揭示你潜意识中的“自我”。\n   - **与他人对话**：问问朋友或家人他们眼中的你，或许能发现新的视角。\n   - **艺术与文学**：许多作品（如《红楼梦》《局外人》）探讨身份与存在的主题，可能引发共鸣。\n\n---\n\n最终，“我是谁”可能没有标准答案，但正是这种探索本身，让“我”成为独特的存在。如果你愿意，可以分享更多关于你的经历或困惑，我可以尝试更具体地帮你分析。 🌱'}], id='2025-10-20 08:36:38.153_051db1', created_at='2025-10-20 08:36:38.153', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1023, time=14.480735, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.880 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
