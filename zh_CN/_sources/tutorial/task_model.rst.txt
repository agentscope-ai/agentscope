
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-11 15:31:45.019_a469e0', created_at='2025-09-11 15:31:45.019', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-11 15:31:47.326_98aadc', created_at='2025-09-11 15:31:47.326', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=2.305715, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='kLYfwKnpas7kyBNUUHR76d', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-11 15:31:47.326', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-11 15:31:48.543_d249c7', created_at='2025-09-11 15:31:48.543', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.214914, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-09-11 15:31:48.591_c2d50c', created_at='2025-09-11 15:31:48.591', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.263408, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-09-11 15:31:48.638_c62625', created_at='2025-09-11 15:31:48.638', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.30985, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-09-11 15:31:48.978_3427c5', created_at='2025-09-11 15:31:48.978', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.650473, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-09-11 15:31:49.280_2dc14f', created_at='2025-09-11 15:31:49.280', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.952231, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-09-11 15:31:49.364_13e365', created_at='2025-09-11 15:31:49.364', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=2.036012, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-09-11 15:31:49.461_20e7df', created_at='2025-09-11 15:31:49.461', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.133105, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-09-11 15:31:49.585_ca60f0', created_at='2025-09-11 15:31:49.585', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.257173, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-09-11 15:31:49.658_fc887f', created_at='2025-09-11 15:31:49.658', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.330305, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-09-11 15:31:49.748_d41254', created_at='2025-09-11 15:31:49.748', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=2.420281, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-11 15:31:49.865_5c5072', created_at='2025-09-11 15:31:49.865', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.537176, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-11 15:31:49.885_04a2c4', created_at='2025-09-11 15:31:49.885', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.557412, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等方面。首先，我需要考虑用户可能的背景和意图。可能用户正在经历自我探索，或者对存在意义感到困惑。也有可能是在测试我的能力，或者有更深层次的心理需求。\n\n接下来，我应该从多个角度来回答这个问题。哲学上，笛卡尔的“我思故我在”是一个经典的观点，强调思维作为存在的证明。心理学方面，可以提到自我认知的发展，比如埃里克森的阶段理论，或者自我同一性的概念。此外，宗教或灵性角度可能提供不同的解释，比如佛教中的无我观念。\n\n同时，要考虑用户可能的深层需求。如果用户感到迷茫或焦虑，可能需要一些安慰或指导，而不仅仅是理论上的回答。因此，回答中应该包含同理心，鼓励用户进行自我反思，并建议通过实践或专业帮助来探索身份。\n\n还要注意避免过于抽象或晦涩的解释，保持回答的易懂性和实用性。可能需要结合例子或日常情境，让用户更容易理解和应用这些概念。此外，需要确认用户是否有特定的背景或文化视角，但如果没有信息，保持普遍适用性比较重要。\n\n最后，确保回答结构清晰，分点阐述不同角度的观点，同时保持自然流畅的对话语气，避免机械化的回复。可能还需要邀请用户进一步分享他们的想法，以促进更深入的交流。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学和心理学意义。不同的人、不同的文化、不同的时代可能会给出不同的答案。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### 1. **从哲学的角度**\n   - **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。你的存在本身是不可否认的。\n   - **存在主义**：萨特认为“存在先于本质”，人没有预先定义的本质，而是通过选择和行动定义自己。你的人生意义需要你自己去创造。\n   - **东方哲学**：如佛教中的“无我”观念，认为“我”是暂时的、因缘和合的产物，而非固定不变的实体。\n\n---\n\n### 2. **从心理学的角度**\n   - **自我认知**：心理学家埃里克森提出，人的身份认同（identity）是通过探索和选择逐渐形成的。你可能在不断尝试不同的角色、价值观和目标，最终找到属于自己的答案。\n   - **内在与外在的冲突**：你可能在“别人眼中的我”和“真实的我”之间挣扎。真正的自我可能需要通过反思、觉察和接纳来逐渐显现。\n\n---\n\n### 3. **从日常生活的视角**\n   - **角色与关系**：你可能是某个家庭中的孩子、朋友、同事，或者社会中的某种角色。这些身份可能影响你对“我是谁”的理解。\n   - **兴趣与能力**：你可能通过热爱的事物（如艺术、科学、运动）或擅长的技能（如沟通、创造、分析）来定义自己。\n\n---\n\n### 4. **从灵性的角度**\n   - **超越性的自我**：一些灵性传统认为，真正的“我”是超越身体、思想和情绪的永恒存在，比如“灵魂”或“本体”。\n   - **连接与合一**：你可能是宇宙的一部分，与万物相连，这种觉知可能带来更广阔的自我认知。\n\n---\n\n### 5. **从科学的角度**\n   - **生物学**：你是一个由细胞、基因和神经网络构成的有机体，但这些只是“身体”的层面。\n   - **意识与大脑**：现代科学尚未完全解释意识的本质，但可以确定的是，你的思维、情感和记忆构成了“你”的独特体验。\n\n---\n\n### 6. **你可能需要问自己的问题**\n   - 我最珍视的价值观是什么？\n   - 我的哪些特质让我感到真实？\n   - 如果没有社会标签（如职业、性别、年龄），我会如何定义自己？\n   - 我渴望成为什么样的人？为什么？\n\n---\n\n### 最后\n“我是谁”可能没有标准答案，但这个问题本身就是一个值得持续探索的旅程。或许答案并不重要，重要的是你如何通过提问和体验，与自己建立更深层的联结。如果你愿意，可以分享更多你的想法，我们可以一起探讨。 🌱'}], id='2025-09-11 15:32:00.674_27aaa8', created_at='2025-09-11 15:32:00.674', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=938, time=10.78457, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.661 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
