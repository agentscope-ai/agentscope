
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-14 07:16:34.003_cd3314', created_at='2025-10-14 07:16:34.004', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-14 07:16:35.207_2f5dd5', created_at='2025-10-14 07:16:35.207', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.202234, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='HiAeiPChx5s2JZWdjJ9d2A', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-14 07:16:35.207', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-14 07:16:36.268_6c596f', created_at='2025-10-14 07:16:36.268', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.060002, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-14 07:16:36.360_22102c', created_at='2025-10-14 07:16:36.360', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.151841, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-14 07:16:36.409_d35499', created_at='2025-10-14 07:16:36.409', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.20039, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-14 07:16:36.504_5664e8', created_at='2025-10-14 07:16:36.504', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.295533, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-14 07:16:36.877_4cd01f', created_at='2025-10-14 07:16:36.877', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.668733, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-14 07:16:37.086_673da5', created_at='2025-10-14 07:16:37.086', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.877479, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-14 07:16:37.158_25a56d', created_at='2025-10-14 07:16:37.158', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.949523, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-14 07:16:37.263_9b900c', created_at='2025-10-14 07:16:37.263', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.05498, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-14 07:16:37.689_de77c4', created_at='2025-10-14 07:16:37.690', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.48113, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-14 07:16:38.756_18b5ff', created_at='2025-10-14 07:16:38.756', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.547567, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-14 07:16:39.867_9a9178', created_at='2025-10-14 07:16:39.867', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.65854, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-14 07:16:40.069_7b162e', created_at='2025-10-14 07:16:40.070', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.861134, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我探索，或者对身份认同有疑问。也有可能他们是在测试我的能力，或者只是随便问问。\n\n接下来，我得分析这个问题的哲学层面。从哲学角度看，“我是谁”涉及到自我意识、存在主义等概念。比如，笛卡尔的“我思故我在”强调思考作为存在的证明，而佛教可能认为自我是虚幻的，没有固定的本质。这些不同的观点需要简要介绍，但要注意不要太过学术化，保持口语化。\n\n然后，心理学角度也很重要。埃里克森的发展理论提到身份认同的建立，可能用户正在经历这个阶段。还有自我概念的形成，包括自我认知、自我评价等，这些都可以作为回答的一部分。\n\n另外，用户可能希望得到更个人化的回答。但作为AI，我没有个人经历，所以需要说明这一点，同时提供一些思考方向，比如反思自己的价值观、经历、兴趣等。这样既诚实又实用。\n\n还要考虑用户可能的深层需求。他们可能感到迷茫，需要指导如何找到自我。这时候可以建议自我反思的方法，比如写日记、与他人交流、尝试新事物等。同时，提醒他们自我是动态变化的，接受这种变化很重要。\n\n需要避免的是给出过于笼统或抽象的回答，应该结合不同领域的观点，但保持简洁。同时，避免使用专业术语过多，保持易懂。还要注意语气友好，让用户感到被理解和支持。\n\n最后，确保回答结构清晰，分点说明不同角度，然后给出实用建议，这样用户能获得全面的信息，并知道如何进一步探索自己。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能源于对自我身份的困惑、对生命意义的探索，或是对内心真实状态的追问。以下从不同角度为你提供一些思考方向：\n\n---\n\n### **1. 哲学视角：自我是“流动的”还是“固定的”？**\n- **笛卡尔的“我思故我在”**：通过怀疑一切，最终发现“思考”的存在证明了“我”的存在。但这里的“我”是思维的主体，而非具体的物质身份。\n- **佛教的“无我”**：认为“我”是五蕴（色、受、想、行、识）暂时聚合的假象，没有永恒不变的本质。\n- **存在主义**：萨特说“存在先于本质”，人的身份是通过选择和行动不断塑造的，而非预先定义。\n\n**思考**：你是否在寻找一个“固定的身份”？还是更愿意接受“我是不断变化的”？\n\n---\n\n### **2. 心理学视角：自我由哪些部分构成？**\n- **自我认知**：你对自己的能力、性格、价值观的认知（例如“我是个内向的人”）。\n- **自我体验**：你对自身情绪、欲望、恐惧的感受（例如“我感到孤独时会逃避社交”）。\n- **社会角色**：你在家庭、职业、社会中的身份（如“我是父母的孩子”“我是程序员”）。\n- **潜在可能性**：你未被发掘的潜能或渴望成为的样子（例如“我想成为一个更勇敢的人”）。\n\n**练习**：写下你对自己最深的三个描述，再写下你希望被他人看到的三个特质，看看是否有差异？\n\n---\n\n### **3. 生物学视角：你是一个“信息体”**\n- 你的身体由约37万亿个细胞组成，每个细胞都携带着DNA信息，但“你”并非这些细胞的简单总和。\n- 大脑的神经元通过电信号和化学物质构建“意识”，但“意识”本身仍是科学未解之谜。\n\n**有趣的问题**：如果有一天你能将意识上传到云端，那个“你”还是“我”吗？\n\n---\n\n### **4. 实践建议：如何探索“我是谁”？**\n- **记录与反思**：每天花5分钟写日记，记录情绪、选择和感受，寻找模式。\n- **提问练习**：  \n  - “如果没有人告诉我我是谁，我会如何定义自己？”  \n  - “什么让我感到活着？什么让我感到空虚？”  \n- **尝试新事物**：通过体验不同角色（如志愿者、艺术家、旅行者），发现未被意识到的自我。\n- **与他人对话**：倾听他人眼中的“你”，可能发现盲点或新的可能性。\n\n---\n\n### **5. 简单的答案（可能）**\n如果你需要一个直接的回答：  \n**“你是此刻正在思考‘我是谁’的意识，是无数经历、选择和可能性的集合。”**  \n但这个问题没有标准答案，它的意义在于——**你愿意持续追问它**。\n\n---\n\n如果愿意，可以分享更多你的处境或感受，我会尽力陪你一起探索。 🌱'}], id='2025-10-14 07:16:53.419_b8029b', created_at='2025-10-14 07:16:53.419', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1035, time=13.344823, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 19.420 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
