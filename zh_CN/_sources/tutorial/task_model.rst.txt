
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-03 09:02:44.720_2ed059', created_at='2025-10-03 09:02:44.720', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-10-03 09:02:46.121_1b2a77', created_at='2025-10-03 09:02:46.121', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.399515, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='MtFFieQdcL4FDRFJjwDGcR', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-03 09:02:46.121', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-03 09:02:47.477_ba4932', created_at='2025-10-03 09:02:47.477', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.354879, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-10-03 09:02:47.531_ae8a3a', created_at='2025-10-03 09:02:47.531', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.408249, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-10-03 09:02:47.580_49eb19', created_at='2025-10-03 09:02:47.580', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.458101, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-10-03 09:02:47.629_412770', created_at='2025-10-03 09:02:47.629', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.50715, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-10-03 09:02:47.746_2fbb39', created_at='2025-10-03 09:02:47.746', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.624118, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-10-03 09:02:47.823_9a35b8', created_at='2025-10-03 09:02:47.823', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=1.700641, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-10-03 09:02:47.921_99808b', created_at='2025-10-03 09:02:47.921', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=1.798596, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-10-03 09:02:48.229_0214b9', created_at='2025-10-03 09:02:48.229', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.10671, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-10-03 09:02:48.308_7cecf7', created_at='2025-10-03 09:02:48.308', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.186024, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-10-03 09:02:48.407_74fc94', created_at='2025-10-03 09:02:48.407', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=2.284198, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-10-03 09:02:48.527_596744', created_at='2025-10-03 09:02:48.527', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.404707, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-10-03 09:02:48.546_bd990b', created_at='2025-10-03 09:02:48.546', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.423215, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要考虑用户可能的意图。可能他们正在经历自我探索，或者对存在主义有疑问，也可能只是出于好奇。\n\n接下来，我应该分析不同的角度来回答这个问题。从哲学角度来看，笛卡尔的“我思故我在”是一个经典的观点，强调思考作为存在的证明。而佛教则认为“我”是五蕴和合，没有永恒的自我。心理学方面，弗洛伊德的本我、自我、超我结构，或者荣格的个体化过程，都可以提供不同的解释。\n\n同时，用户可能希望得到更个人化的回答，所以需要结合他们的具体情境。但用户没有提供更多信息，所以回答需要保持普遍性。还要注意避免过于抽象，尽量用易懂的语言解释复杂的概念。\n\n另外，用户可能有深层需求，比如寻找人生意义或自我认同。这时候，除了提供理论，也可以建议他们通过自我反思或与他人交流来探索答案。最后，保持开放和中立的态度，鼓励用户继续思考和探索。'}, {'type': 'text', 'text': '“我是谁？”是一个深邃的哲学命题，不同的人、文化、思想体系可能会给出不同的答案。以下是一些可能的视角，或许能为你提供一些启发：\n\n---\n\n### 1. **从哲学的角度**\n   - **笛卡尔**（René Descartes）说：“我思故我在。”（*Cogito, ergo sum*）  \n     他认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。这里的“我”是一种思维的主体，是意识的核心。\n   - **佛教**认为，“我”是五蕴（色、受、想、行、识）的暂时聚合，没有永恒不变的“自我”。  \n     修行的目标是超越对“我”的执着，达到无我的境界。\n   - **存在主义**（如萨特）强调，人是“被抛入世界”的存在，通过选择和行动定义自己。  \n     “我是谁”不是预先给定的，而是通过生活不断创造的。\n\n---\n\n### 2. **从心理学的角度**\n   - **弗洛伊德**认为，人的自我由“本我”（本能）、“自我”（现实中的调节者）和“超我”（道德约束）组成。  \n     “我是谁”可能取决于这些内在冲突的平衡。\n   - **荣格**提出“个体化”（Individuation）的过程，认为人需要整合意识与潜意识，找到真实的自我。\n   - **现代心理学**则更关注“自我认知”——你如何理解自己的性格、价值观、经历和身份。\n\n---\n\n### 3. **从日常生活的角度**\n   - **身份标签**：你可能通过职业、家庭角色、兴趣爱好等定义自己（比如“我是学生”“我是母亲”“我是程序员”）。  \n   - **关系中的角色**：你可能是朋友、伴侣、子女，这些关系也塑造了你的自我认知。\n   - **内在体验**：你可能通过情绪、想法、直觉感受“我是谁”——比如“我是一个善良的人”“我渴望自由”。\n\n---\n\n### 4. **从科学的角度**\n   - **生物学**：你的身体由细胞、基因、神经系统构成，但“你”是否只是这些物质的组合？  \n     神经科学认为，意识是大脑活动的产物，但“自我”究竟是什么，仍是未解之谜。\n   - **量子物理**：某些理论（如“观察者效应”）暗示，意识可能与宇宙的运行方式有关，但这种关联尚未被证实。\n\n---\n\n### 5. **从灵性的角度**\n   - **东方哲学**（如道家、禅宗）认为，“我”是宇宙的一部分，与万物一体。  \n     修行的目标是超越“小我”，回归“大我”或“道”。\n   - **西方神秘学**：一些传统认为，“我是谁”是灵魂的旅程，通过轮回或灵性觉醒逐步揭示真相。\n\n---\n\n### 6. **你可能需要的答案**\n如果这是一个更个人化的问题（比如你感到迷茫、困惑或寻找意义），可以尝试：\n   - **自我反思**：写下你的价值观、梦想、恐惧、热爱的事物，看看它们如何塑造你的身份。\n   - **与他人对话**：朋友、家人或导师可能从外部视角帮你看到自己忽略的部分。\n   - **探索经历**：通过旅行、艺术、阅读或冥想，接触不同的世界，可能激发新的自我认知。\n\n---\n\n### 最终，或许答案并不重要，重要的是你如何提问。\n“我是谁？”本身就是一个不断探索的过程。你不需要立刻找到答案，而是可以像一个探险者一样，带着好奇去发现更多关于自己的可能性。✨\n\n如果你愿意，也可以分享更多背景，我可以帮你更具体地分析。'}], id='2025-10-03 09:03:03.133_1dc60d', created_at='2025-10-03 09:03:03.133', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1031, time=14.582828, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.418 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
