
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-15 07:53:22.203_52cc26', created_at='2025-09-15 07:53:22.203', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-15 07:53:23.637_d584b2', created_at='2025-09-15 07:53:23.637', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.433128, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='CoREozcEkwNMDa8uYeLDp8', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-15 07:53:23.637', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-15 07:53:24.724_6a838f', created_at='2025-09-15 07:53:24.724', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.085034, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-15 07:53:24.773_bd1e88', created_at='2025-09-15 07:53:24.773', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.13416, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-15 07:53:24.818_efe175', created_at='2025-09-15 07:53:24.818', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.179295, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-15 07:53:24.864_26804d', created_at='2025-09-15 07:53:24.864', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.225627, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-15 07:53:24.954_9b0255', created_at='2025-09-15 07:53:24.954', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.315209, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-15 07:53:25.062_ceab0b', created_at='2025-09-15 07:53:25.062', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.423944, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-15 07:53:25.132_dc3af8', created_at='2025-09-15 07:53:25.132', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.493195, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-15 07:53:25.324_5374e8', created_at='2025-09-15 07:53:25.324', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.685507, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-15 07:53:25.439_96b68f', created_at='2025-09-15 07:53:25.439', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.800534, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-15 07:53:25.507_607927', created_at='2025-09-15 07:53:25.507', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=1.868895, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-15 07:53:25.598_4d040f', created_at='2025-09-15 07:53:25.598', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=1.959876, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-15 07:53:25.696_06164d', created_at='2025-09-15 07:53:25.696', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.057931, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。可能用户正在经历自我探索，或者对身份认同有疑问，也可能只是出于好奇。\n\n接下来，我应该分析这个问题的不同层面。从哲学角度看，这可能涉及存在主义，比如萨特的观点“存在先于本质”。从心理学角度，可以讨论自我认知和身份形成。生物学上，用户是一个由细胞组成的有机体，有独特的基因。社会学方面，身份也受社会角色和文化影响。\n\n还要考虑用户可能的深层需求。他们可能在寻找自我价值，或者面对身份危机。这时候需要提供支持性的回应，鼓励自我反思，同时保持开放性，避免给出绝对答案。\n\n另外，要注意避免过于抽象或学术化的回答，保持自然和易懂。可能需要结合例子，比如提到不同的角色（学生、朋友）来说明身份的多维性。同时，提醒用户自我认知是一个持续的过程，允许他们有探索的空间。\n\n最后，确保回答积极正面，鼓励用户进行自我探索，并提供进一步帮助的可能性。避免任何可能让用户感到被评判或压力的信息，保持同理心和支持的态度。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和社会学意义。它可能指向你对自我身份的探索，也可能源于对存在意义的思考。以下是一些可能的角度供你参考：\n\n---\n\n### 1. **从生物学角度**  \n你是由约37万亿个细胞组成的有机体，拥有独特的基因序列，是宇宙中独一无二的生命形式。你的身体、大脑和神经系统构成了你感知世界的基础。\n\n---\n\n### 2. **从心理学角度**  \n“我是谁”可能涉及**自我认知**（self-concept）和**自我认同**（self-identity）。心理学家卡尔·荣格认为，人的“自我”包括意识（显性的自我）和无意识（隐性的潜质）。你可能在探索自己的性格、价值观、梦想，或是对过去经历的反思。\n\n---\n\n### 3. **从哲学角度**  \n- **存在主义**（如萨特）认为，“存在先于本质”——你通过选择和行动定义自己，而非被预先决定。  \n- **东方哲学**（如佛教）可能强调“无我”——个体是暂时的、流动的，而非固定不变的实体。  \n- **笛卡尔**的“我思故我在”则指出，思考本身证明了你的存在。\n\n---\n\n### 4. **从社会角色角度**  \n你是某个家庭的一员、社会中的一个角色（学生、工作者、朋友、恋人等），这些关系和责任塑造了你的身份。但这些标签只是“我”的一部分，而非全部。\n\n---\n\n### 5. **从精神或灵性角度**  \n有些人认为“我是谁”指向更深层的“本体”——超越肉体和思维的意识或灵魂。例如，印度教中的“阿特曼”（Atman）或佛教的“空性”，都试图回答“我是谁”的终极问题。\n\n---\n\n### 6. **可能的困惑与答案**  \n如果你感到迷茫，这或许意味着你正在经历**自我重构**。身份并非一成不变，而是一个动态的过程。你可以通过以下方式探索：  \n- **反思**：记录你的想法、感受和行为，观察哪些模式反复出现。  \n- **提问**：你最珍视什么？你希望成为怎样的人？什么让你感到充实？  \n- **行动**：尝试新事物，接触不同的人，拓宽对“我”的理解。\n\n---\n\n### 最后  \n“我是谁”没有标准答案，它可能是一个持续探索的过程。也许答案并不重要，重要的是你愿意去追问和思考。如果你愿意分享更多背景，我可以尝试更具体地回应你的困惑。 🌱'}], id='2025-09-15 07:53:35.668_7a57ac', created_at='2025-09-15 07:53:35.668', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=811, time=9.966462, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.470 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
