
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-19 10:56:36.092_b80751', created_at='2025-09-19 10:56:36.092', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-19 10:56:37.304_752d89', created_at='2025-09-19 10:56:37.304', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.21101, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='3uPUK2jCac5unNaUXDYgkE', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-19 10:56:37.304', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-19 10:56:38.344_87d2a0', created_at='2025-09-19 10:56:38.344', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.038142, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-19 10:56:38.367_4ca1a2', created_at='2025-09-19 10:56:38.367', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.061797, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-19 10:56:38.412_544e4f', created_at='2025-09-19 10:56:38.412', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.105956, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-19 10:56:38.460_4c2682', created_at='2025-09-19 10:56:38.460', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.154091, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-19 10:56:38.640_292ebf', created_at='2025-09-19 10:56:38.640', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.334138, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-19 10:56:38.822_f501af', created_at='2025-09-19 10:56:38.822', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=1.516523, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-19 10:56:39.006_d4893a', created_at='2025-09-19 10:56:39.006', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.700843, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-19 10:56:39.204_34c012', created_at='2025-09-19 10:56:39.205', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.898933, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-19 10:56:39.372_ce9d38', created_at='2025-09-19 10:56:39.372', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=2.066032, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-19 10:56:39.553_34bdcc', created_at='2025-09-19 10:56:39.553', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.247148, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-19 10:56:39.759_4c0ad2', created_at='2025-09-19 10:56:39.759', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.453388, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-19 10:56:39.984_e4b3f5', created_at='2025-09-19 10:56:39.984', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=2.678234, type='chat'), metadata=None)

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-19 10:56:40.150_0683bc', created_at='2025-09-19 10:56:40.150', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.844257, type='chat'), metadata=None)

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-19 10:56:40.335_e1d00a', created_at='2025-09-19 10:56:40.335', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.028956, type='chat'), metadata=None)

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-19 10:56:40.548_f3bc17', created_at='2025-09-19 10:56:40.548', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=3.242358, type='chat'), metadata=None)

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:56:40.655_dd6fbb', created_at='2025-09-19 10:56:40.655', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.34959, type='chat'), metadata=None)

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:56:40.675_c92a17', created_at='2025-09-19 10:56:40.675', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.369396, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等方面。首先，我需要考虑用户可能的背景和意图。也许用户正在经历自我反思，或者对存在意义感到困惑。也有可能用户是在测试我的能力，或者有更深层次的心理需求。\n\n接下来，我要分析这个问题的不同层面。从哲学角度看，这可能涉及到笛卡尔的“我思故我在”，或者佛教中的“无我”概念。从心理学角度，可能涉及自我认同的发展阶段，比如埃里克森的理论。另外，用户可能希望得到个人化的回答，但作为AI，我无法了解他们的具体经历，所以需要保持中立和开放。\n\n还要考虑用户的潜在需求。他们可能寻求确认自己的存在，或者寻找人生的方向。也有可能是在表达孤独或迷茫的情绪。这时候，回应需要既提供信息，又给予情感支持。\n\n然后，我需要组织回答的结构。先承认问题的复杂性，再分不同角度解释，比如哲学、心理学、日常身份等。同时，要避免过于学术化的语言，保持口语化和易懂。最后，邀请用户进一步分享，以促进更深入的交流。\n\n还要注意可能的误区，比如不要假设用户的具体情况，避免给出过于笼统或错误的答案。同时，保持尊重和同理心，让用户感到被理解和接纳。\n\n最后，检查回答是否符合指导原则，确保没有提供错误信息，保持中立，并鼓励用户探索自己的答案。'}, {'type': 'text', 'text': '“我是谁？”是一个深刻而复杂的问题，不同的人、不同的文化、不同的哲学体系可能会给出不同的答案。以下是一些可能的视角，或许能帮助你思考这个问题：\n\n---\n\n### 1. **从哲学的角度**\n   - **笛卡尔**（René Descartes）说：“我思故我在。”（*Cogito, ergo sum*）  \n     他认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。因此，“我是谁”可能与你的思维、意识和存在感相关。\n   - **佛教**认为“无我”（Anatta）：  \n     身体、感受、思想、行为和意识都是暂时的、不断变化的，没有一个永恒不变的“自我”。  \n     但这也可能引发对“我”的重新定义——比如“我是观察者”“我是体验者”。\n   - **存在主义**（如萨特）认为：  \n     人没有预设的本质，而是通过选择和行动“成为”自己。  \n     所以，“我是谁”可能取决于你如何选择生活。\n\n---\n\n### 2. **从心理学的角度**\n   - **自我认同**（Self-Identity）：  \n     你可能通过职业、兴趣、价值观、人际关系等来定义自己。比如“我是一个喜欢艺术的人”“我是一个父亲/母亲”。\n   - **发展阶段**：  \n     心理学家埃里克森（Erik Erikson）认为，人的一生会经历不同的身份危机。比如青少年时期可能在“我是谁”中挣扎，成年后逐渐形成稳定的自我认知。\n   - **内在与外在**：  \n     你可能同时感受到“真实的自我”和“社会角色”的冲突，比如“我是一个善良的人，但有时不得不表现得强硬”。\n\n---\n\n### 3. **从日常生活的角度**\n   - **身份标签**：  \n     你可能用“学生”“员工”“朋友”“父母”等角色来定义自己。但这些只是外在的标签，未必完全代表你。\n   - **内在特质**：  \n     你可能更关注自己的性格（如内向/外向）、价值观（如重视自由/责任）、情感（如敏感/理性）等。\n   - **变化与成长**：  \n     “我是谁”可能是一个动态的过程。随着经历、学习和反思，你的答案可能不断改变。\n\n---\n\n### 4. **从科学的角度**\n   - **生物学**：  \n     你是一个由细胞、基因、神经元构成的有机体，但这些物质本身并不能解释“意识”或“自我”。\n   - **脑科学**：  \n     神经科学家认为，意识可能是大脑中多个区域协同工作的结果，但“我”究竟是什么，仍是未解之谜。\n\n---\n\n### 5. **从个人体验的角度**\n   - 如果你感到困惑，或许可以问问自己：  \n     - 我最珍视的是什么？（比如自由、爱、知识、创造）  \n     - 我害怕失去什么？（比如关系、安全感、自我价值）  \n     - 我希望未来成为什么样的人？  \n     这些问题可能帮助你更接近“我是谁”的答案。\n\n---\n\n### 最后：\n“我是谁”没有标准答案，它可能是一个需要终身探索的问题。也许答案并不重要，重要的是你如何与这个问题共处——在思考中成长，在体验中定义自己。  \n如果你愿意，可以分享更多关于你的想法或感受，我会尽力陪你一起探索。 🌱'}], id='2025-09-19 10:56:52.951_02c492', created_at='2025-09-19 10:56:52.951', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1068, time=12.271154, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.863 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
