
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-19 10:53:19.326_f6f880', created_at='2025-09-19 10:53:19.326', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-19 10:53:20.736_428058', created_at='2025-09-19 10:53:20.736', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.408918, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='aMTkTvyHKUn3m4eC36aUDv', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-19 10:53:20.736', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-19 10:53:22.651_3f1f85', created_at='2025-09-19 10:53:22.651', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.913573, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-19 10:53:22.699_29db20', created_at='2025-09-19 10:53:22.699', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.961266, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-19 10:53:22.746_bc514e', created_at='2025-09-19 10:53:22.746', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=2.007952, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-19 10:53:22.792_f654ac', created_at='2025-09-19 10:53:22.792', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=2.05486, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-19 10:53:22.980_69ee48', created_at='2025-09-19 10:53:22.980', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=2.242419, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-19 10:53:23.466_b513d8', created_at='2025-09-19 10:53:23.466', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=2.728347, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-19 10:53:23.653_d1b2d9', created_at='2025-09-19 10:53:23.653', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=2.915545, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-19 10:53:23.856_1ad83c', created_at='2025-09-19 10:53:23.856', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=3.117999, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-19 10:53:24.810_30b27a', created_at='2025-09-19 10:53:24.811', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=4.0729, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-19 10:53:25.328_72f73f', created_at='2025-09-19 10:53:25.328', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=4.590109, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-19 10:53:25.528_7ff29d', created_at='2025-09-19 10:53:25.528', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=4.790782, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-19 10:53:25.729_b77716', created_at='2025-09-19 10:53:25.729', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=4.991006, type='chat'), metadata=None)

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-19 10:53:25.924_3a041f', created_at='2025-09-19 10:53:25.924', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=5.186646, type='chat'), metadata=None)

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-19 10:53:26.092_856770', created_at='2025-09-19 10:53:26.092', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=5.35444, type='chat'), metadata=None)

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-19 10:53:26.313_c650a6', created_at='2025-09-19 10:53:26.313', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=5.575422, type='chat'), metadata=None)

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:53:26.495_b96cc3', created_at='2025-09-19 10:53:26.495', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=5.757462, type='chat'), metadata=None)

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-19 10:53:26.512_d12aa9', created_at='2025-09-19 10:53:26.512', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=5.774799, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对人生意义感到迷茫。也有可能他们是在进行某种哲学思考，或者只是出于好奇。\n\n接下来，我要分析这个问题的层次。从心理学角度来看，自我认知是个人成长的重要部分。用户可能希望了解自己的身份、价值观、目标等。从哲学角度，这可能涉及到存在主义的问题，比如人的本质是什么，自我是如何形成的。\n\n然后，我需要考虑用户可能的背景。他们可能是个学生，正在探索人生方向；或者是一个成年人，面临生活中的挑战，需要重新审视自己。也有可能他们接触过一些哲学或心理学理论，想要更深入的理解。\n\n用户的需求可能不仅仅是得到一个简单的答案，而是希望获得一些启发或指导。他们可能需要帮助来梳理自己的想法，或者找到自我认同的方法。深层需求可能包括寻找人生的意义，或者解决内心的困惑。\n\n接下来，我应该组织回答的结构。首先，可以分几个方面来探讨，比如心理学、哲学、日常生活的自我认知。每个部分给出一些观点和建议，让用户有参考的视角。同时，要避免过于抽象，保持回答的实用性和可操作性。\n\n还要注意语言的亲切感，避免使用过于学术化的术语，让用户感觉被理解和支持。可能需要加入一些鼓励的话语，比如强调自我探索是一个持续的过程，不需要急于找到答案。\n\n另外，要确保回答的全面性，涵盖不同的角度，但不过于冗长。可能需要提到自我反思的方法，比如写日记、冥想，或者与他人交流。同时，提醒用户自我认知是一个动态的过程，随着经历和成长不断变化。\n\n最后，检查是否有遗漏的重要点，比如文化差异对自我认知的影响，或者不同理论之间的对比。确保回答既有深度又易于理解，帮助用户从多个角度思考“我是谁”这个问题。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和人生探索的维度。它可能源于对自我身份的困惑、对生命意义的追问，或是对存在本质的思考。以下从不同角度提供一些思考方向，或许能帮助你更接近答案：\n\n---\n\n### **1. 从心理学视角：自我认知的多维构建**\n- **身份标签**：你可能通过职业、家庭角色（如子女、父母）、兴趣爱好、性格特质（如内向/外向）等标签定义自己。但这些只是外在的“社会角色”，而非本质。\n- **内在核心**：心理学家荣格提出“自我”由意识（表层的“我”）和无意识（深层的“真我”）组成。你可能需要通过反思、冥想或艺术表达，触及更深层的动机、恐惧或渴望。\n- **动态变化**：人的身份并非固定。随着经历、环境、价值观的变化，“我是谁”会不断更新。例如，一个曾经以事业为重心的人，可能在经历人生转折后更重视家庭或精神追求。\n\n---\n\n### **2. 从哲学视角：存在的追问**\n- **笛卡尔的“我思故我在”**：即使质疑一切，思考本身证明了“我”的存在。但“我”究竟是什么？是思维的主体，还是肉体与意识的结合？\n- **存在主义的观点**：萨特认为“存在先于本质”，即人没有预设的本质，而是通过选择和行动定义自己。你的答案可能藏在你每天的选择中——比如你如何对待他人、如何面对困难。\n- **东方哲学的视角**：佛教强调“无我”，认为“我”是五蕴（色、受、想、行、识）的暂时聚合，执着于“我”会带来痛苦。道家则主张“复归于朴”，回归本真状态。\n\n---\n\n### **3. 从生活实践：通过行动与关系探索**\n- **提问自己**：  \n  - 我最珍视的价值观是什么？（如自由、正义、爱）  \n  - 在什么情境下我会感到“真实”？（比如独处时、帮助他人时、创造时）  \n  - 如果没有社会角色（如职业、学历），我还会是谁？  \n- **观察关系**：他人如何看待你？他们的反馈可能揭示你未意识到的特质（如“你总是很耐心”“你很擅长倾听”）。  \n- **尝试新体验**：旅行、学习新技能、接触不同文化，可能打破固有认知，发现新的自我维度。\n\n---\n\n### **4. 从科学视角：生物学与神经科学**\n- **基因与大脑**：你的性格、倾向可能部分受遗传和大脑结构影响（如多巴胺系统与冒险行为相关）。但环境与选择同样重要。  \n- **意识的谜题**：科学家尚未完全理解意识如何从神经活动中产生，这或许意味着“我”不仅仅是大脑的产物，而涉及更深层的未知。\n\n---\n\n### **5. 可能的答案：一个开放性的框架**\n“我是谁”或许没有终极答案，但可以尝试用以下方式描述：  \n- **我是**：一个不断学习、成长的个体，拥有独特的经历、情感和思维方式。  \n- **我可能是**：一个充满矛盾的存在——既渴望稳定又向往自由，既脆弱又坚韧。  \n- **我需要成为**：一个更接近自己真实需求和价值观的人，而非他人期待的“角色”。\n\n---\n\n### **最后：允许不确定性**\n“我是谁”可能是一个永无止境的探索过程。与其急于寻找答案，不如接纳这种不确定性，将其视为生命的一部分。正如诗人里尔克所说：“你如果愿意，就成为你自己。”  \n当你不再执着于“找到答案”，答案可能悄然浮现。 🌱'}], id='2025-09-19 10:53:40.226_a0b847', created_at='2025-09-19 10:53:40.226', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1219, time=13.709303, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.905 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
