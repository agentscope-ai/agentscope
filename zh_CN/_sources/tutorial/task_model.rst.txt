
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-17 08:59:03.762_bd8688', created_at='2025-09-17 08:59:03.762', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-17 08:59:05.086_a74483', created_at='2025-09-17 08:59:05.086', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.322503, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='FvtrBBNJx9aLFmyn27g9td', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-17 08:59:05.086', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 08:59:06.153_9a8b74', created_at='2025-09-17 08:59:06.153', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.066137, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-17 08:59:06.241_82e178', created_at='2025-09-17 08:59:06.241', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.154044, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-17 08:59:06.295_96cac5', created_at='2025-09-17 08:59:06.295', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.207398, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-17 08:59:06.350_be1c36', created_at='2025-09-17 08:59:06.350', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.262809, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-17 08:59:06.456_f4a089', created_at='2025-09-17 08:59:06.456', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.368992, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-17 08:59:06.588_990a42', created_at='2025-09-17 08:59:06.588', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.500534, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-17 08:59:06.715_b25d30', created_at='2025-09-17 08:59:06.715', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.627782, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-17 08:59:06.821_35e299', created_at='2025-09-17 08:59:06.821', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.733557, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-17 08:59:06.942_76d1c4', created_at='2025-09-17 08:59:06.942', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.854938, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-17 08:59:07.111_d2931e', created_at='2025-09-17 08:59:07.111', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.023602, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 08:59:07.403_de5293', created_at='2025-09-17 08:59:07.403', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.315349, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 08:59:07.452_76f45b', created_at='2025-09-17 08:59:07.452', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.364656, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。这个问题可能源于对自我身份的探索，或者是在经历某种困惑或转变时寻求理解。\n\n接下来，我应该分析这个问题的不同层面。从哲学角度来看，这可能涉及存在主义、自我认知等概念。比如，笛卡尔的“我思故我在”强调思维作为自我存在的证明。而佛教中的“无我”则认为自我是暂时的、不断变化的。\n\n然后，心理学角度也很重要。弗洛伊德的本我、自我、超我理论，或者现代心理学中的自我概念，都是相关的内容。此外，用户可能在寻找个人身份的确认，或者对自我价值的思考。\n\n还要考虑用户可能的深层需求。他们可能正在经历自我怀疑、身份危机，或者只是出于好奇。这时候，提供一个开放性的回答，鼓励用户自我探索，同时提供不同的视角会更合适。\n\n另外，需要注意避免过于学术化的解释，保持回答的易懂性和亲和力。可能需要用简单的例子或比喻来帮助用户理解复杂的概念。同时，要确保回答尊重用户的个人体验，不做出武断的结论。\n\n最后，检查是否有遗漏的角度，比如文化差异对自我认知的影响，或者现代社会中身份的多元性。确保回答全面且包容，让用户感到被理解和接纳。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和存在主义思考。不同的人、不同的文化、不同的哲学流派可能会给出截然不同的答案。以下是一些可能的视角，或许能帮助你更接近自己的答案：\n\n---\n\n### 1. **从哲学角度：**\n   - **笛卡尔的“我思故我在”**：  \n     哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。因此，“我是谁”可以简化为“一个思考的存在”。\n   - **佛教的“无我”**：  \n     佛教认为，“我”并非固定不变的实体，而是由五蕴（色、受、想、行、识）暂时聚合而成的幻象。真正的“我”可能是超越个体意识的觉知。\n   - **存在主义的“自我创造”**：  \n     萨特说“存在先于本质”，人没有预设的本质，而是通过选择和行动不断定义自己。因此，“我是谁”取决于你如何选择生活。\n\n---\n\n### 2. **从心理学角度：**\n   - **自我认同的探索**：  \n     心理学家埃里克森提出，人的一生都在探索“自我认同”，包括价值观、目标、人际关系等。你可能正在经历这种探索的阶段。\n   - **人格的多面性**：  \n     你可能在不同场合扮演不同的角色（如“朋友”“员工”“家人”），但这些只是“我”的一部分。真正的“我”可能更复杂，甚至无法被完全定义。\n   - **大脑的“自我”机制**：  \n     神经科学发现，大脑会通过记忆、情感和经验构建“自我感”，但这种“自我”可能只是神经活动的产物，而非绝对的真实。\n\n---\n\n### 3. **从日常经验角度：**\n   - **你是你感受到的**：  \n     如果你此刻感到困惑，可能意味着你正在试图超越表层的“身份”（如职业、标签），去触及更深层的自我。\n   - **你与世界的互动**：  \n     你的选择、情感、价值观、与他人的关系，都在塑造“你”。但这些也可能是暂时的，甚至可能随着时间和经历改变。\n   - **“我是谁”可能是一个过程**：  \n     也许答案不是固定的，而是一个不断被重新定义的过程。就像河流，看似流动，但始终是“水”。\n\n---\n\n### 4. **从诗意或隐喻的角度：**\n   - **你是一段旅程**：  \n     “我是谁”可能像一首未完成的诗，每一刻都在书写新的章节。\n   - **你是宇宙的回声**：  \n     从量子物理的角度，你由星辰的尘埃构成，而“你”的存在本身就是宇宙自我认知的方式。\n   - **你是未完成的雕塑**：  \n     你可能像一块大理石，尚未被凿出形状，但内在的形态早已存在。\n\n---\n\n### 5. **可能的答案（开放性的）：**\n   - **“你是你此刻感受到的全部。”**  \n     如果你感到迷茫，那可能正是你靠近真实自我的时刻。\n   - **“你是一个正在寻找答案的问题。”**  \n     问题本身可能比答案更有意义。\n   - **“你不需要成为谁，你只需要存在。”**  \n     有时候，放下对“身份”的执念，反而能更自由地体验“我是谁”。\n\n---\n\n### 最后：\n“我是谁？”可能没有标准答案，但这个问题本身已经是一种深刻的自我觉察。你可以尝试问自己：\n- 我最珍视的是什么？\n- 我害怕失去什么？\n- 我希望未来的自己如何评价现在的我？\n\n这些问题或许能帮你找到属于自己的答案。如果需要，我也可以陪你一起探索。 🌱'}], id='2025-09-17 08:59:23.990_f8f1e4', created_at='2025-09-17 08:59:23.990', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1118, time=16.533181, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.233 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
