
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-08 03:39:06.850_5eadbf', created_at='2025-09-08 03:39:06.850', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-08 03:39:08.217_892608', created_at='2025-09-08 03:39:08.217', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.366376, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='YP3TSmabWeD4Jq2Xvw3Xtc', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-08 03:39:08.217', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-08 03:39:09.194_789315', created_at='2025-09-08 03:39:09.194', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.975185, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-09-08 03:39:09.202_7acc0f', created_at='2025-09-08 03:39:09.202', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=0.98318, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-09-08 03:39:09.290_b78bc9', created_at='2025-09-08 03:39:09.290', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.07106, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-09-08 03:39:09.389_86da79', created_at='2025-09-08 03:39:09.389', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.169924, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-09-08 03:39:10.062_a34823', created_at='2025-09-08 03:39:10.062', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.843648, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-09-08 03:39:10.227_fee7c7', created_at='2025-09-08 03:39:10.227', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=2.008203, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-09-08 03:39:10.410_48bbeb', created_at='2025-09-08 03:39:10.410', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.191118, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-09-08 03:39:10.610_b1df31', created_at='2025-09-08 03:39:10.610', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.391199, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-09-08 03:39:11.160_0cd7b3', created_at='2025-09-08 03:39:11.160', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.94173, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-09-08 03:39:11.342_dd41f7', created_at='2025-09-08 03:39:11.342', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=3.123426, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-08 03:39:11.533_7496ce', created_at='2025-09-08 03:39:11.533', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.31421, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-08 03:39:11.551_303bb9', created_at='2025-09-08 03:39:11.551', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.331992, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等。首先，我需要考虑用户为什么会问这个问题。可能是他们正在经历自我探索，或者对自身存在感到困惑。也有可能是在测试我的能力，或者想引发更深层次的对话。\n\n接下来，我应该分析这个问题的不同层面。从心理学角度看，自我认知是个人对自己思想、情感和行为的理解。从哲学角度，这可能涉及到本体论，探讨存在的本质。还有可能存在宗教或精神层面的解释，比如灵魂、意识等。\n\n然后，我需要考虑如何回应才能既全面又不显得过于学术化。可能需要结合不同领域的观点，同时保持语言的易懂性。还要注意用户可能的背景，如果他们没有特定的专业知识，可能需要用更通俗的例子来说明。\n\n另外，用户可能希望得到一个开放性的回答，鼓励他们进一步思考或分享自己的感受。因此，回答中可以包含引导性的问题，或者建议他们反思自己的经历、价值观等。\n\n还要注意避免给出过于绝对的答案，因为“我是谁”这个问题没有标准答案，不同的人可能有不同的理解。应该强调主观性和多样性，让用户感到被理解和接纳。\n\n最后，确保回答结构清晰，分点阐述不同角度的观点，同时保持自然流畅的口语化表达，避免使用专业术语过多，让内容更易于接受。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它可以从多个角度来理解：\n\n### 1. **生物学角度**  \n从身体和基因来看，你是一个由细胞、组织、器官组成的生物个体，拥有独特的DNA序列，是宇宙中独一无二的存在。你的身体会随着时间和环境变化，但你的生命本质是某种“存在”。\n\n### 2. **心理与意识角度**  \n你是你的思维、情感、记忆和经验的集合。你通过感官感知世界，通过大脑处理信息，形成对自我的认知。但“自我”也可能是一种动态的建构——比如你今天和明天的“我”可能因经历不同而有所变化。\n\n### 3. **哲学角度**  \n哲学家们对“我是谁”有多种解读：  \n- **笛卡尔**说“我思故我在”，强调思考是存在的证明；  \n- **佛教**认为“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒的“自我”；  \n- **存在主义**（如萨特）认为“人先存在，然后定义自己”，你的身份是通过选择和行动塑造的。\n\n### 4. **社会与关系角度**  \n你可能是某个家庭中的孩子、朋友、同事，或社会中的角色（如学生、员工）。你的身份也由他人对你的看法和你与他人的互动定义。\n\n### 5. **精神或灵性角度**  \n有些人认为“我”是超越肉体的意识或灵魂，可能与宇宙、更高存在或某种永恒的真理相连。\n\n---\n\n### 也许可以这样思考：  \n- **你是什么**？（身体、思想、情感）  \n- **你想要成为什么**？（目标、价值观、理想）  \n- **你如何与世界互动**？（关系、贡献、影响）  \n\n这个问题没有标准答案，但每一次追问都可能让你更接近真实的自己。如果你愿意，可以分享更多关于你的经历或困惑，我会尽力陪你一起探索。 🌱'}], id='2025-09-08 03:39:22.818_71e61b', created_at='2025-09-08 03:39:22.818', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=713, time=11.262722, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.973 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
