
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-17 09:04:16.787_3675d1', created_at='2025-09-17 09:04:16.787', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-17 09:04:18.502_fa7c4b', created_at='2025-09-17 09:04:18.502', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.713591, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='SsQ3Woy6ybPepc2acX25VN', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-17 09:04:18.502', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 09:04:19.613_1171b7', created_at='2025-09-17 09:04:19.613', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.109773, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-17 09:04:19.739_c76c27', created_at='2025-09-17 09:04:19.739', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.235124, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-17 09:04:19.828_b93093', created_at='2025-09-17 09:04:19.828', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.324183, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-17 09:04:19.878_f346fc', created_at='2025-09-17 09:04:19.878', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.374207, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-17 09:04:20.279_62193e', created_at='2025-09-17 09:04:20.279', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.775118, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-17 09:04:20.807_d76665', created_at='2025-09-17 09:04:20.807', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.303472, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-17 09:04:20.984_475798', created_at='2025-09-17 09:04:20.984', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.480263, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-17 09:04:21.089_50e900', created_at='2025-09-17 09:04:21.089', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.585673, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-17 09:04:21.221_9eb810', created_at='2025-09-17 09:04:21.221', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.717475, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-17 09:04:21.529_8d29d2', created_at='2025-09-17 09:04:21.529', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.0258, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 09:04:21.688_43f28a', created_at='2025-09-17 09:04:21.688', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.184893, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 09:04:22.237_e5205c', created_at='2025-09-17 09:04:22.237', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.734013, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要理解用户为什么会问这个问题。可能的情况有很多种：用户可能在经历身份认同的困惑，或者对自我存在感到好奇，也可能是在进行某种哲学思考。也有可能用户是在测试我的能力，或者想了解更深层次的自我认知。\n\n接下来，我需要考虑如何回答这个问题。直接回答“你是谁”可能不太合适，因为这需要用户自己去探索和定义。但作为AI，我应该提供一些引导性的思考，帮助用户从不同角度理解自我。\n\n可以从多个层面来分析：生物学上的自我，比如身体和基因；心理学上的自我，包括记忆、情感和思维；社会角色，比如家庭、职业等；还有哲学层面的自我，比如存在主义的观点，或者东方哲学中的“无我”概念。\n\n同时，要注意避免给出绝对化的答案，因为“我是谁”没有标准答案，每个人的答案都可能不同。应该鼓励用户进行自我反思，或者提供一些问题引导他们思考，比如“你最重视的价值观是什么？”、“你在不同情境下的表现有什么不同？”等等。\n\n还要考虑用户可能的潜在需求。如果用户感到迷茫或焦虑，可能需要更多的支持和同理心。如果用户是学生或对哲学感兴趣，可能需要更深入的理论解释。但根据当前的信息，保持回答的开放性和启发性可能更合适。\n\n另外，要注意语言的简洁和易懂，避免使用过于专业的术语，除非用户显示出更高的知识水平。同时，保持回答的积极和鼓励态度，让用户感到被理解和支持。\n\n最后，确保回答符合AI的伦理准则，不提供可能引起不适或误导的信息，同时保持中立和客观，尊重不同的观点和文化背景。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与自我探索的意义。从不同的角度，可以有不同的回答：\n\n### 1. **生物学角度**  \n你是由细胞、基因、神经系统构成的有机体，是宇宙中亿万年演化出的生命形式之一。你的身体、基因、生理特征，构成了你存在的物质基础。\n\n### 2. **心理学角度**  \n你是记忆、情感、思维和经验的集合。你的性格、价值观、习惯、恐惧与渴望，共同塑造了“你”的独特性。心理学认为，自我是动态的，随着经历不断变化。\n\n### 3. **社会角色角度**  \n你是家庭中的成员、社会中的个体、职业中的角色。你的身份往往与他人的关系、社会角色和责任交织在一起。比如“我是父母的孩子”“我是朋友”“我是职场人”。\n\n### 4. **哲学角度**  \n- **存在主义**：萨特说“存在先于本质”，你通过选择和行动定义自己。  \n- **佛教**：认为“我”是虚幻的，是五蕴（色、受、想、行、识）的暂时组合，没有永恒的“自我”。  \n- **道家**：庄子提出“吾丧我”，主张超越对“我”的执着，与自然合一。\n\n### 5. **主观体验角度**  \n你可能无法用语言完全描述“我是谁”，但你可以感受：此刻的你正在思考、感受、呼吸，这种“觉知”本身或许就是“你”的核心。\n\n---\n\n### 为什么问这个问题？  \n也许你正经历身份的困惑、对人生意义的追问，或是想要更深刻地理解自己。  \n**答案可能不在外部，而在你内在的探索中**。  \n试着问自己：  \n- 我最珍视什么？  \n- 我的恐惧和渴望是什么？  \n- 如果没有社会标签（如职业、身份），我会是谁？  \n\n最终，“我是谁”可能没有标准答案，但每一次追问，都是接近真实的一步。 🌱'}], id='2025-09-17 09:04:31.123_c600ee', created_at='2025-09-17 09:04:31.123', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=797, time=8.880704, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.340 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
