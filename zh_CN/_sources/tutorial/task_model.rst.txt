
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-08 07:55:11.584_aa2599', created_at='2025-09-08 07:55:11.584', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-09-08 07:55:12.918_8ad27c', created_at='2025-09-08 07:55:12.918', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.332695, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='SQz9REK5kiewfPoDi9YWem', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-08 07:55:12.918', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-08 07:55:14.011_7ddd5c', created_at='2025-09-08 07:55:14.011', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.091611, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-08 07:55:14.110_49b026', created_at='2025-09-08 07:55:14.110', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.190258, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-08 07:55:14.205_d62576', created_at='2025-09-08 07:55:14.205', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.285843, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-08 07:55:14.298_c2f48d', created_at='2025-09-08 07:55:14.299', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.379041, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-08 07:55:14.480_766124', created_at='2025-09-08 07:55:14.480', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.560741, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-08 07:55:15.040_19b133', created_at='2025-09-08 07:55:15.040', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.120194, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-08 07:55:15.210_bcd3c4', created_at='2025-09-08 07:55:15.210', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.29098, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-08 07:55:15.387_ee814c', created_at='2025-09-08 07:55:15.387', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.467584, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-08 07:55:15.586_7a6ddf', created_at='2025-09-08 07:55:15.587', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.667033, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-08 07:55:15.739_b0b51f', created_at='2025-09-08 07:55:15.739', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.819755, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-08 07:55:15.915_444a20', created_at='2025-09-08 07:55:15.915', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.995333, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-08 07:55:16.025_9ccd57', created_at='2025-09-08 07:55:16.025', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.105374, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要考虑用户可能的背景和意图。可能用户正在思考自我身份，或者是在进行哲学性的探索，也可能是遇到某种困惑，想要寻找答案。\n\n接下来，我要分析这个问题的不同层面。从哲学角度，这可能涉及存在主义，比如萨特说的“存在先于本质”，强调人的自我定义。心理学上，可能涉及到自我认同、人格发展，比如埃里克森的阶段理论。宗教或灵性方面，可能有不同的解释，比如佛教中的“无我”概念。\n\n然后，我需要考虑用户可能的深层需求。他们可能在寻找自我认知的方法，或者希望得到一些启发，帮助他们理解自己的身份。也有可能他们感到迷茫，需要支持和指导。\n\n还要注意用户可能没有明确表达的背景信息。比如，他们是否在经历人生转折点，或者有心理压力？这时候回答需要既全面又具同理心，避免过于学术化，而是提供实用的建议或思考方向。\n\n另外，要确保回答不带有偏见，尊重不同的观点。可能需要提到不同领域的视角，让用户自己选择适合的解释。同时，避免给出绝对化的答案，因为“我是谁”没有标准答案，每个人的答案都可能不同。\n\n最后，组织语言时要清晰、有条理，分点说明不同角度的解释，并鼓励用户进行自我反思，可能加上一些问题引导他们思考。同时保持语气友好，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它可以从多个角度来探讨：\n\n### 1. **哲学视角**  \n   - **存在主义**（如萨特）认为，人没有预设的本质，而是通过选择和行动定义自己。  \n   - **东方哲学**（如佛教）可能提出“无我”的概念，认为“我”是暂时的、流动的，而非固定不变的实体。  \n   - **笛卡尔的“我思故我在”**：即使怀疑一切，思考本身证明了“我”的存在。\n\n### 2. **心理学视角**  \n   - **自我认同**：你可能通过职业、关系、兴趣或价值观来定义自己（例如“我是艺术家”“我是母亲”）。  \n   - **人格理论**：心理学家如埃里克森认为，人的一生会经历不同阶段的“身份危机”，不断探索和重塑自我。  \n   - **内在与外在**：你是否更关注内在感受（如“我是一个善良的人”），还是外在表现（如“我是某个角色”）？\n\n### 3. **科学视角**  \n   - **生物学**：从基因、大脑结构到身体特征，你的生理属性构成“你”的一部分。  \n   - **神经科学**：意识和自我感可能源于大脑的复杂活动，但目前科学尚未完全解释“意识的本质”。\n\n### 4. **灵性/宗教视角**  \n   - 一些信仰体系认为“我是神圣的一部分”“我是宇宙的延伸”或“我是灵魂的载体”。  \n   - 佛教强调超越对“我”的执着，追求觉悟；基督教可能认为“我是上帝的造物”。\n\n### 5. **日常实践中的答案**  \n   - **通过提问探索**：  \n     - 我最珍视什么？（价值观）  \n     - 我如何与他人互动？（人际关系）  \n     - 我的梦想和恐惧是什么？（内在驱动力）  \n   - **动态的过程**：身份可能随时间变化，比如从“学生”到“职场人”，从“孤独者”到“家庭成员”。\n\n### 6. **可能的困惑与启示**  \n   - 如果感到迷茫，这可能意味着你正在突破旧的自我认知，探索更真实的自己。  \n   - 答案可能不在“找到”而在于“体验”——通过生活、反思和行动逐渐清晰。\n\n---\n\n**你可以尝试问自己**：  \n- 如果没有社会角色（如职业、家庭身份），我会如何描述自己？  \n- 我的哪些特质是独一无二的？  \n- 什么让我感到活着？  \n\n最终，“我是谁”或许没有标准答案，但每一次思考都在帮你更接近真实的自己。你愿意分享更多关于你的想法吗？'}], id='2025-09-08 07:55:28.845_12272d', created_at='2025-09-08 07:55:28.845', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=909, time=12.815874, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.266 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
