
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-18 04:33:16.143_14559e', created_at='2025-09-18 04:33:16.143', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-18 04:33:17.891_338d31', created_at='2025-09-18 04:33:17.891', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.74754, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='3qPof7Amfp8SNwuXCknjYJ', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-18 04:33:17.891', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-18 04:33:19.051_6ad64f', created_at='2025-09-18 04:33:19.051', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.157874, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-09-18 04:33:19.139_4d27ba', created_at='2025-09-18 04:33:19.139', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.246805, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-09-18 04:33:19.265_d43b2e', created_at='2025-09-18 04:33:19.265', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.372798, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-09-18 04:33:19.346_1e2224', created_at='2025-09-18 04:33:19.346', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.453156, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-09-18 04:33:19.549_7bbba6', created_at='2025-09-18 04:33:19.549', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.656708, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-09-18 04:33:19.720_c3e34e', created_at='2025-09-18 04:33:19.720', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=1.827262, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-09-18 04:33:19.906_48505f', created_at='2025-09-18 04:33:19.906', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.013343, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-09-18 04:33:20.105_b9eede', created_at='2025-09-18 04:33:20.105', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.212744, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-09-18 04:33:20.265_e3734b', created_at='2025-09-18 04:33:20.265', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.372144, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-09-18 04:33:20.444_d9698f', created_at='2025-09-18 04:33:20.445', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=2.551828, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-18 04:33:21.068_356489', created_at='2025-09-18 04:33:21.068', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.175386, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-18 04:33:21.089_cf44e6', created_at='2025-09-18 04:33:21.089', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.196453, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要考虑用户为什么会问这个问题。可能是在自我反思，或者遇到了身份认同的问题，也可能是对哲学问题感兴趣。接下来，我得分析用户的需求。他们可能想要一个哲学上的回答，或者更实际的自我认知方法。\n\n然后，我应该考虑不同的角度来回答这个问题。比如哲学方面，可以引用笛卡尔的“我思故我在”，或者佛教中的无我概念。心理学方面，可以提到自我认同和人格理论。还有可能用户需要一些实际的建议，比如如何探索自我，或者通过哪些方法来认识自己。\n\n还要注意用户可能的深层需求。如果用户处于迷茫期，可能需要鼓励和引导他们进行自我探索。如果他们是在寻找某种答案，可能需要提供不同的视角，帮助他们理解自我是一个动态的过程，而不是固定的答案。\n\n另外，要避免给出过于抽象或晦涩的回答，保持语言通俗易懂。同时，要确保信息准确，比如提到的哲学家和理论要正确。可能还需要提醒用户，自我认知是一个持续的过程，没有标准答案，鼓励他们进行自我反思和探索。\n\n最后，检查是否有遗漏的角度，比如文化差异对自我认知的影响，或者现代科技如心理学测试对自我了解的帮助。确保回答全面且有帮助，同时保持友好和支持的语气。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及哲学、心理学、宗教等多领域的核心议题。不同的人、不同的文化、不同的时代对此可能有截然不同的回答。以下是一些可能的视角，或许能帮助你更深入地思考这个问题：\n\n---\n\n### **1. 哲学视角：自我是流动的**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，怀疑本身证明了“我”的存在。你的思考、感受、怀疑本身，就是“你”的证据。\n- **佛教的“无我”**：佛教认为，“我”并非固定不变的实体，而是五蕴（色、受、想、行、识）的暂时组合。执着于“我”的概念，可能成为痛苦的根源。\n- **存在主义**：萨特说“存在先于本质”，人没有预设的本质，而是通过选择和行动不断定义自己。你的人生意义，是由你主动创造的。\n\n---\n\n### **2. 心理学视角：自我是动态的建构**\n- **人格理论**：心理学家荣格提出“个体化”过程，认为自我是通过整合意识与潜意识、内在与外在世界逐渐形成的。\n- **社会角色**：你可能在不同场合扮演不同角色（如学生、朋友、员工），这些角色共同构成了你对“自我”的认知。\n- **认知偏差**：心理学家丹尼尔·卡尼曼指出，人类的自我认知常受“叙事谬误”影响，倾向于用故事解释自己的行为，而未必完全真实。\n\n---\n\n### **3. 宗教与灵性视角**\n- **基督教**：认为人是“神的形象”，自我价值源于与神的关系，而非单纯的自我认同。\n- **道教**：强调“道法自然”，主张超越对“我”的执着，与天地合一。\n- **现代灵性实践**：如冥想、正念练习，帮助人观察“自我”的流动，打破对固定身份的依赖。\n\n---\n\n### **4. 实践层面：如何探索“我是谁”？**\n- **自我反思**：通过写日记、记录情绪、分析行为模式，观察自己的核心价值观和动机。\n- **提问练习**：  \n  - 我最珍视什么？  \n  - 我的恐惧和渴望是什么？  \n  - 如果没有社会标签（如职业、性别、年龄），我会如何定义自己？  \n- **与他人互动**：通过人际关系中的反馈，了解他人眼中的“你”是否与自我认知一致。\n- **尝试新体验**：突破舒适区（如学习新技能、旅行、志愿服务），可能发现未被意识到的潜能或兴趣。\n\n---\n\n### **5. 一个可能的答案**\n“你是你此刻的体验、记忆、选择和关系的总和。你既不是固定的实体，也不是完全虚无的幻象，而是一个不断生成的过程——就像河流，看似连续，实则每一滴水都在流动。”\n\n---\n\n### **最后**\n“我是谁？”或许没有标准答案，但提问本身已是一种觉醒。你无需急于找到“终极答案”，而是可以通过持续的探索和觉察，逐渐接近更真实的自己。如果你愿意，可以分享更多关于你的经历或困惑，我会尽力帮你一起思考。 🌱'}], id='2025-09-18 04:33:31.956_d4bba3', created_at='2025-09-18 04:33:31.956', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=983, time=10.862059, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.818 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
