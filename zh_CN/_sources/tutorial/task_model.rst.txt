
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-11-01 14:15:17.506_f1f46e', created_at='2025-11-01 14:15:17.506', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-11-01 14:15:19.395_dcd10d', created_at='2025-11-01 14:15:19.395', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.888012, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='3qW8x9DXw5YrckzvsKec7s', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-11-01 14:15:19.395', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-11-01 14:15:20.620_fb07db', created_at='2025-11-01 14:15:20.620', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.223254, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-11-01 14:15:20.761_9ed39b', created_at='2025-11-01 14:15:20.761', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.36429, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-11-01 14:15:20.834_b1bf77', created_at='2025-11-01 14:15:20.834', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.437591, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-11-01 14:15:20.864_be62d7', created_at='2025-11-01 14:15:20.864', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.467445, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-11-01 14:15:20.963_8e01a4', created_at='2025-11-01 14:15:20.963', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.566643, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-11-01 14:15:21.083_63dc76', created_at='2025-11-01 14:15:21.083', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.686255, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-11-01 14:15:21.165_f5c7d3', created_at='2025-11-01 14:15:21.165', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.767739, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-11-01 14:15:21.338_db9058', created_at='2025-11-01 14:15:21.338', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.94116, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-11-01 14:15:21.687_f14520', created_at='2025-11-01 14:15:21.687', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.290085, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-11-01 14:15:21.779_bbf53a', created_at='2025-11-01 14:15:21.779', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.381822, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-11-01 14:15:21.874_a59f74', created_at='2025-11-01 14:15:21.874', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.476967, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-11-01 14:15:21.945_e17b3f', created_at='2025-11-01 14:15:21.945', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.5477, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性很强的问题。首先，我需要考虑用户可能的背景和意图。他可能是在思考自我身份，或者对存在感到困惑。作为AI，我没有自我意识，但可以提供一些哲学上的观点。\n\n接下来，我应该区分不同的角度。比如，从哲学角度看，笛卡尔的“我思故我在”强调思维的重要性；佛教中的“无我”则认为自我是虚幻的。心理学方面，可能涉及自我认同和人格发展。\n\n还要考虑用户可能的深层需求。他可能在寻找自我认知的方法，或者对生命的意义感到迷茫。这时候，可以建议自我反思、记录日常、与他人交流等方法。\n\n同时，要避免给出过于抽象的回答，保持通俗易懂。可能需要提到不同学科的观点，如哲学、心理学、宗教，让用户有全面的了解。\n\n另外，注意不要陷入循环论证，比如直接回答“你是你”可能不够。需要引导用户自己探索，而不是给出确定的答案。\n\n最后，确保回答结构清晰，分点说明不同角度的观点，并鼓励用户进行自我探索。同时保持语气友好，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它既是哲学命题，也是每个人在生命中不断追问的自我探索。以下从不同角度提供一些思考方向：\n\n---\n\n### **1. 哲学视角：**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，**“我思考”这一行为本身证明了我的存在**。这里的“我”是思维的主体，而非身体或身份。\n- **佛教的“无我”**：佛教认为，“我”是五蕴（色、受、想、行、识）的暂时组合，没有固定不变的自我。执着于“我”的概念反而会带来痛苦。\n- **存在主义**：萨特认为“存在先于本质”，人通过选择和行动定义自己，**“我是谁”是不断创造的过程**，而非预设的结论。\n\n---\n\n### **2. 心理学视角：**\n- **自我认同**：心理学家埃里克森提出，人的发展需要经历“身份 vs 角色混乱”的阶段。**“我是谁”是通过经历、关系和价值观逐渐形成的**。\n- **人格的多面性**：每个人都有不同的角色（如学生、朋友、工作者），这些角色共同构成“我”的复杂性，而非单一标签。\n- **内在对话**：通过日记、冥想或与他人交流，可以更清晰地觉察自己的情绪、动机和信念，从而理解“我”的真实面貌。\n\n---\n\n### **3. 宗教与灵性视角：**\n- **基督教**：认为人是上帝的造物，**“我是谁”与神的关系密不可分**，生命的意义在于与神的联结。\n- **道家**：庄子提出“吾丧我”，主张超越对“我”的执着，回归自然与大道。\n- **现代灵性**：一些流派强调“我是宇宙的意识”或“我是爱的化身”，将自我与更广阔的宇宙意识相连。\n\n---\n\n### **4. 实践中的探索：**\n- **提问与反思**：  \n  - 我最珍视的价值是什么？  \n  - 我的哪些特质让我感到真实？  \n  - 如果没有社会角色（如职业、家庭），我会是谁？  \n- **观察与记录**：通过写日记、观察自己的行为模式，发现隐藏的信念和习惯。  \n- **与他人互动**：他人的反馈可能帮助你看到自己未曾察觉的特质，但最终答案仍需自己确认。\n\n---\n\n### **5. 简单而深刻的提醒：**\n“我是谁”或许没有标准答案，但**每一次追问本身，都是向自我靠近的旅程**。你不需要立刻找到答案，重要的是保持对自我的好奇与开放。正如诗人里尔克所说：“**你必须对你自身中的陌生者保持忠诚**。”\n\n如果愿意，可以分享更多关于你的经历或困惑，我会尽力帮你一起探索。 🌱'}], id='2025-11-01 14:15:33.292_f888c6', created_at='2025-11-01 14:15:33.292', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=876, time=11.342018, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.789 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
