
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-11 07:04:41.182_a68ade', created_at='2025-09-11 07:04:41.183', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-11 07:04:42.606_ef5cb3', created_at='2025-09-11 07:04:42.606', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.42209, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='L9tXZ3kCcXx3rRNEddbw2E', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-11 07:04:42.606', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-11 07:04:43.645_34717b', created_at='2025-09-11 07:04:43.645', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.037477, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-11 07:04:43.975_839976', created_at='2025-09-11 07:04:43.975', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.36787, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-11 07:04:44.080_456a42', created_at='2025-09-11 07:04:44.080', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.472894, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-11 07:04:44.181_136c7a', created_at='2025-09-11 07:04:44.181', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.573498, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-11 07:04:44.425_ab3d2a', created_at='2025-09-11 07:04:44.425', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.817567, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-11 07:04:44.666_0cc493', created_at='2025-09-11 07:04:44.666', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.058751, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-11 07:04:44.811_2f589e', created_at='2025-09-11 07:04:44.811', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.203889, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-11 07:04:44.977_3650c9', created_at='2025-09-11 07:04:44.977', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.369593, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-11 07:04:45.262_a9505e', created_at='2025-09-11 07:04:45.262', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.654968, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-11 07:04:45.749_d68ccb', created_at='2025-09-11 07:04:45.750', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.142181, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-11 07:04:46.548_079ce2', created_at='2025-09-11 07:04:46.548', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.940323, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-11 07:04:46.686_3f1f71', created_at='2025-09-11 07:04:46.686', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.0787, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、存在意义等。首先，我需要考虑用户可能的背景和意图。他可能是在思考人生，或者对自我身份感到困惑，也可能只是出于好奇。\n\n接下来，我应该分析这个问题的不同层面。从心理学角度，自我认知涉及对自己的了解，包括性格、价值观、经历等。哲学上，这可能涉及笛卡尔的“我思故我在”，或者存在主义对个体存在的探讨。宗教或灵性角度可能有不同的解释，比如灵魂、业力等。\n\n用户可能没有明确说明他需要哪种类型的回答，所以需要涵盖多个方面，同时保持开放和包容。要避免给出单一答案，而是提供不同的视角，让用户自己思考。\n\n还要注意用户可能的深层需求。他可能在寻找自我认同，或者对生活方向感到迷茫。这时候，除了理论上的回答，可能需要一些引导性的建议，比如自我反思的方法，或者推荐相关书籍、哲学家的观点。\n\n另外，要确保回答简洁易懂，避免过于学术化，让用户容易理解。同时，保持同理心，表达对用户问题的重视，让他感到被理解和尊重。\n\n最后，检查是否有遗漏的角度，比如科学角度（神经科学对自我意识的研究），或者文化差异对自我认知的影响。确保回答全面，但不过于冗长。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。它可能引发对自我认知、存在意义、身份认同的探索。以下是一些可能的视角，或许能为你提供一些启发：\n\n---\n\n### 1. **从心理学角度**\n   - **自我认知**：你是一个独特的个体，由你的思想、情感、记忆、经历和价值观构成。心理学中的“自我”概念涉及**本我、自我、超我**（弗洛伊德）或**自我效能感**（班杜拉）等理论，强调你对自身行为、动机和身份的理解。\n   - **成长与变化**：你并非一成不变。随着经历、学习和反思，你的“自我”会不断演变。例如，青少年时期的你可能与成年后的你截然不同。\n\n---\n\n### 2. **从哲学角度**\n   - **存在主义**：萨特认为“存在先于本质”，即你通过选择和行动定义自己，而非被预先设定。你的“是谁”取决于你如何生活。\n   - **东方哲学**：佛教认为“我”是虚幻的执念，真正的自我是超越个体的“空性”；道家则强调“无我”与自然的合一。\n   - **笛卡尔的“我思故我在”**：即使怀疑一切，思考本身证明了“我”的存在。\n\n---\n\n### 3. **从灵性或宗教角度**\n   - **灵魂与业力**：某些信仰认为“你”是灵魂的化身，通过轮回或神圣计划来体验生命。\n   - **神的创造**：基督教等宗教可能认为“你是神的造物”，拥有独特的使命或价值。\n\n---\n\n### 4. **从科学角度**\n   - **神经科学**：大脑的神经网络和化学反应塑造了你的意识，但“自我”是否仅仅是大脑的产物？这一问题仍是科学界的未解之谜。\n   - **基因与环境**：你的性格、能力可能受遗传和环境共同影响，但“你”的独特性仍无法完全被量化。\n\n---\n\n### 5. **从日常生活的角度**\n   - **角色与关系**：你可能是某人的朋友、家人、同事，或某个社会角色（如学生、艺术家）。这些身份共同构成了你的“是谁”。\n   - **行动与选择**：你的价值观、目标和行为方式，往往比“身份标签”更能定义你。\n\n---\n\n### 6. **可能的困惑与答案**\n   - 如果你感到迷茫，或许可以问自己：\n     - **我真正关心的是什么？**\n     - **我希望成为什么样的人？**\n     - **我的经历如何塑造了现在的我？**\n   - 答案可能并非一成不变，但探索的过程本身就能带来成长。\n\n---\n\n### 最后\n“我是谁？”没有标准答案，它更像一场持续的自我对话。或许不必急于寻找结论，而是允许自己在不同阶段、不同情境中重新定义“我”。你愿意和我分享更多关于你的想法吗？'}], id='2025-09-11 07:05:02.020_38f99e', created_at='2025-09-11 07:05:02.020', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=928, time=15.329275, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.842 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
