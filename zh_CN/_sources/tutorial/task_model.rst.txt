
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-21 06:58:18.178_fc31ed', created_at='2025-10-21 06:58:18.178', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-10-21 06:58:20.088_90a739', created_at='2025-10-21 06:58:20.088', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.909332, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='2w3xekaXVkRn9ZHy4ihtLo', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-21 06:58:20.088', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-21 06:58:21.094_225529', created_at='2025-10-21 06:58:21.094', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.003753, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-21 06:58:21.153_e502b0', created_at='2025-10-21 06:58:21.153', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.063094, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-21 06:58:21.207_1d6067', created_at='2025-10-21 06:58:21.207', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.117316, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-21 06:58:21.261_71eab7', created_at='2025-10-21 06:58:21.261', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.17067, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-21 06:58:21.391_e5b239', created_at='2025-10-21 06:58:21.391', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.301324, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-21 06:58:21.496_0ba316', created_at='2025-10-21 06:58:21.496', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.405734, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-21 06:58:21.574_782f6b', created_at='2025-10-21 06:58:21.574', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.484001, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-21 06:58:21.680_ae68ef', created_at='2025-10-21 06:58:21.680', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.590042, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-21 06:58:22.075_3f30a0', created_at='2025-10-21 06:58:22.075', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.985043, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-21 06:58:22.157_d82630', created_at='2025-10-21 06:58:22.157', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.067103, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-21 06:58:22.456_f51ace', created_at='2025-10-21 06:58:22.456', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.366513, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-21 06:58:22.530_6b2951', created_at='2025-10-21 06:58:22.530', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.440249, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，涉及到自我认知和存在。首先，我需要理解用户为什么会问这个问题。可能的情况包括：用户可能正在经历身份认同的困惑，或者对自我存在感到好奇，也可能是出于哲学思考。\n\n接下来，我应该考虑如何回应。直接回答“你是你”可能太简单，不够深入。需要结合心理学、哲学和可能的宗教观点来提供多角度的解释。比如，心理学中的自我概念，哲学中的存在主义，或者宗教中的灵魂观念。\n\n同时，要注意用户可能的背景。如果是年轻人，可能更关注自我探索和成长；如果是成年人，可能涉及更深层次的存在意义。但用户没有提供具体信息，所以需要保持回答的通用性。\n\n还要避免过于学术化的语言，保持口语化，让用户容易理解。可能需要分点解释不同的观点，比如科学、哲学、心理学等，最后总结可能的答案，并鼓励用户自我探索。\n\n另外，要确保回答积极正面，避免让用户感到困惑或无助。可以提到自我认知是一个持续的过程，鼓励用户通过反思和体验来寻找答案。\n\n最后，检查是否有遗漏的重要观点，比如不同文化对“自我”的看法，或者现代科技如人工智能对身份的挑战。不过可能用户的问题比较基础，不需要深入这些方面，保持简洁即可。'}, {'type': 'text', 'text': '“我是谁？”是一个古老而深刻的哲学问题，不同的人、文化、学科可能会给出不同的答案。以下是一些可能的视角，或许能帮助你思考这个问题：\n\n---\n\n### 1. **从生物学角度看**  \n你是**一个由细胞、基因、神经系统和大脑构成的有机体**。你的身体由数万亿细胞组成，基因决定了你的生理特征，大脑则负责思考、感知和记忆。从这个角度看，“你”是物质世界的产物，是宇宙中一个独特的生命形式。\n\n---\n\n### 2. **从心理学角度看**  \n“你”是**自我意识的集合**。心理学认为，人的身份由**记忆、经历、性格、价值观和情感**共同塑造。例如，弗洛伊德提出“本我、自我、超我”的结构，荣格则强调“个体化”过程——你不断通过与世界的互动，逐渐形成对“我是谁”的理解。\n\n---\n\n### 3. **从哲学角度看**  \n- **笛卡尔**说：“我思故我在。”（*Cogito, ergo sum*）——思考本身证明了你的存在。  \n- **存在主义**（如萨特）认为，人没有预设的本质，而是通过选择和行动“定义自己”。  \n- **佛教**则认为，“我”是虚幻的执念，真正的自我是超越个体的“空性”。\n\n---\n\n### 4. **从社会学角度看**  \n“你”是**社会关系的产物**。你的身份（如学生、朋友、职业角色）由他人和环境共同构建。社会学家认为，人是在与他人的互动中逐渐形成“自我”的。\n\n---\n\n### 5. **从灵性或宗教角度看**  \n- **基督教**可能认为你是“上帝的造物”，灵魂是永恒的。  \n- **印度教**认为“我”（Atman）与宇宙的“梵”（Brahman）是同一的。  \n- **道教**强调“道法自然”，“我”是天地间的一部分，与万物一体。\n\n---\n\n### 6. **从科幻或未来视角看**  \n如果人工智能或虚拟现实发展到极致，**“你”是否还能被定义为“你”？** 这可能挑战我们对“自我”的传统认知。\n\n---\n\n### 最终，或许答案在于：  \n**“你是你此刻所体验的一切。”**  \n你的思想、情感、选择、经历，共同构成了“你”。而这个问题本身，可能正是你探索自我的开始。\n\n---\n\n如果你愿意，可以尝试回答这些问题：  \n- 你最珍视的品质是什么？  \n- 什么让你感到真实和充实？  \n- 如果没有社会标签（如职业、国籍），你觉得自己是谁？  \n\n答案可能随着时间和经历不断变化，这正是“我是谁”的魅力所在。 🌱'}], id='2025-10-21 06:58:33.266_f4913f', created_at='2025-10-21 06:58:33.266', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=870, time=10.731283, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.093 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
