
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-11-02 00:50:45.338_53a884', created_at='2025-11-02 00:50:45.338', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-11-02 00:50:46.740_6e28b2', created_at='2025-11-02 00:50:46.741', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.401699, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='GjtLwdZDMRYBnwrJseVGxU', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-11-02 00:50:46.741', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-11-02 00:50:47.760_d5447d', created_at='2025-11-02 00:50:47.760', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.017864, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-11-02 00:50:47.862_35e7ed', created_at='2025-11-02 00:50:47.862', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.119529, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-11-02 00:50:48.134_8ec162', created_at='2025-11-02 00:50:48.134', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.39206, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-11-02 00:50:48.236_821a23', created_at='2025-11-02 00:50:48.236', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.494238, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-11-02 00:50:48.437_a13926', created_at='2025-11-02 00:50:48.437', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.695041, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-11-02 00:50:49.478_d3330f', created_at='2025-11-02 00:50:49.478', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.735788, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-11-02 00:50:49.661_0cddac', created_at='2025-11-02 00:50:49.661', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.919093, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-11-02 00:50:49.866_98cdf5', created_at='2025-11-02 00:50:49.866', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.12353, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-11-02 00:50:50.088_b7f611', created_at='2025-11-02 00:50:50.088', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.345579, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-11-02 00:50:50.359_dff4f0', created_at='2025-11-02 00:50:50.359', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.616739, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-11-02 00:50:50.560_31a98a', created_at='2025-11-02 00:50:50.560', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.817624, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-11-02 00:50:51.463_6f6d12', created_at='2025-11-02 00:50:51.463', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.720447, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对人生的意义感到困惑。也有可能他们只是出于好奇，想探讨哲学问题。\n\n接下来，我得分析用户的背景。他们可能没有明确说明自己的情况，所以需要从不同角度来回答。比如，从哲学、心理学、宗教或科学的角度来看。每个角度都有不同的解释，可能需要综合起来给出一个全面的回答。\n\n然后，我要考虑用户可能的深层需求。他们可能希望得到情感上的支持，或者寻找自我认同的方法。这时候，除了提供理论上的解释，可能还需要一些实际的建议，比如自我反思的方法或推荐相关的书籍。\n\n另外，还要注意回答的语气。用户可能处于一种脆弱的状态，所以需要保持同理心，避免过于学术化或冷漠。同时，要确保信息准确，避免误导。\n\n还要检查是否有文化或个人因素影响。比如，某些文化可能更强调集体身份，而另一些则强调个人主义。不过用户没有提供这些信息，所以需要保持中立。\n\n最后，确保回答结构清晰，分点说明不同的视角，并在结尾提供帮助的意愿，让用户感到被理解和支持。同时，避免使用专业术语过多，保持语言通俗易懂。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和存在主义思考。不同的人、不同的背景和视角可能会给出不同的答案。以下是一些可能的思考方向，或许能帮助你探索自己的身份：\n\n---\n\n### 1. **从哲学角度看**\n   - **存在主义**：萨特说“存在先于本质”，意味着人首先存在，然后通过选择和行动定义自己。你不是被预先定义的“谁”，而是通过生活中的决定和行动不断塑造自己。\n   - **东方哲学**：佛教认为“我”是虚幻的，是五蕴（色、受、想、行、识）的暂时组合，真正的自我可能超越个体的执着；道家则强调“无我”与自然的合一。\n   - **斯多葛学派**：认为“我”是理性与意志的结合，真正的自我在于对内在的掌控而非外在的标签。\n\n---\n\n### 2. **从心理学角度看**\n   - **自我认同**：心理学家埃里克森提出，人的一生中会不断探索“我是谁”的问题，尤其是在青少年时期。身份是动态的，由经历、关系、价值观等共同构建。\n   - **人格理论**：弗洛伊德认为“我”是意识部分，介于本我（本能）和超我（道德）之间；荣格则强调“个体化”过程，即整合潜意识中的不同面向以形成完整的自我。\n   - **社会角色**：你可能通过职业、家庭角色（如父母、朋友）、兴趣爱好等定义自己，但这些只是“社会面具”，未必完全等同于内在的“我”。\n\n---\n\n### 3. **从科学角度看**\n   - **生物学**：你的身体由细胞构成，基因决定了部分特征，但“我是谁”更多是神经元活动的结果——大脑的复杂网络塑造了意识、记忆和情感。\n   - **量子物理**：一些理论认为，观察者与被观察者不可分割，或许“我”是宇宙自我认知的一种形式。\n\n---\n\n### 4. **从日常经验看**\n   - **你可能是一个**：\n     - 有特定兴趣和热情的人（比如热爱艺术、科技、自然）；\n     - 有独特性格特质（如内向、敏感、幽默）；\n     - 与他人建立关系的纽带（如家人、朋友、伴侣）；\n     - 在某个领域有技能或知识（如医生、作家、运动员）；\n     - 有梦想和目标的人（比如希望改变世界、追求自由）。\n\n---\n\n### 5. **从更抽象的角度看**\n   - **“我是谁”可能是一个无法被完全回答的问题**：就像镜子中的自己，你永远无法完全看清自己，但每一次凝视都可能带来新的理解。\n   - **“我”是流动的**：你今天可能是一个学生，明天可能成为职场人；你可能在不同场合扮演不同角色，但核心的“我”可能始终存在某种连贯性。\n\n---\n\n### 如果你正在寻找答案：\n- **写下你的故事**：记录你的人生经历、重要时刻和感受，可能会发现一些重复的主题。\n- **提问自己**：你最珍视什么？什么让你感到充实？什么让你害怕？这些问题可能指向你的核心价值观。\n- **与他人对话**：朋友、家人或心理咨询师可能会提供不同的视角。\n- **尝试新事物**：通过体验未知，你可能会发现新的自我面向。\n\n---\n\n最终，“我是谁”可能没有标准答案，但这个问题本身可能正是你探索生命意义的起点。如果你愿意，可以告诉我更多关于你的想法或经历，我会尽力帮你一起思考。 🌱'}], id='2025-11-02 00:51:03.645_58eb88', created_at='2025-11-02 00:51:03.645', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1058, time=12.178362, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 18.313 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
