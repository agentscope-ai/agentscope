
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-23 11:17:31.361_bc353a', created_at='2025-10-23 11:17:31.361', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-23 11:17:33.194_121f3d', created_at='2025-10-23 11:17:33.194', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.832316, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='EmzRth8m9ZxjKs56PJ3v5d', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-23 11:17:33.194', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-23 11:17:34.558_3feeda', created_at='2025-10-23 11:17:34.558', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.36264, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-23 11:17:34.675_281628', created_at='2025-10-23 11:17:34.675', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.479265, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-23 11:17:34.716_a4b1ac', created_at='2025-10-23 11:17:34.716', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.520679, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-23 11:17:34.797_77d1fd', created_at='2025-10-23 11:17:34.797', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.600784, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-23 11:17:34.954_853466', created_at='2025-10-23 11:17:34.954', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.758518, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-23 11:17:35.198_3ea302', created_at='2025-10-23 11:17:35.198', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.002046, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-23 11:17:35.333_4d647d', created_at='2025-10-23 11:17:35.333', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.137678, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-23 11:17:35.486_95bb2b', created_at='2025-10-23 11:17:35.486', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.290073, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-23 11:17:35.663_36a36a', created_at='2025-10-23 11:17:35.663', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.467341, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-23 11:17:35.801_3e1b26', created_at='2025-10-23 11:17:35.801', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.605113, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-23 11:17:35.955_b02429', created_at='2025-10-23 11:17:35.955', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.75923, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-23 11:17:36.053_5a3801', created_at='2025-10-23 11:17:36.053', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.857018, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在思考自我身份，或者对存在感到困惑。也可能是在测试我的能力，或者只是随便问问。\n\n接下来，我得分析用户可能的背景。如果是哲学爱好者，可能期待一些哲学性的回答，比如引用笛卡尔的“我思故我在”或者存在主义的观点。如果是普通用户，可能需要更通俗易懂的解释，结合心理学或日常经验。\n\n然后，我需要确定回答的结构。可能需要分几个层面：哲学、心理学、社会角色、个人经历等。同时，要避免过于抽象，让用户能理解。还要注意不要给出错误的信息，比如科学上的自我认知研究。\n\n另外，用户可能有潜在的需求。比如，他们可能在寻找自我认同，或者对人生方向感到迷茫。这时候，回答可能需要包含鼓励和引导，帮助他们自我探索。\n\n还要考虑文化差异。不同文化对“自我”的定义可能不同，比如东方文化可能更强调集体身份，而西方更注重个人主义。不过用户使用中文，可能更倾向于东方视角，但也不能一概而论。\n\n可能还需要提到科学角度，比如神经科学中的自我意识研究，或者心理学中的自我概念理论。但要注意不要太过技术化，保持口语化。\n\n最后，确保回答友好且开放，鼓励用户进一步思考或提问。避免给出绝对化的答案，因为“我是谁”这个问题没有标准答案，每个人都有自己的理解。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和社会学意义。不同的人、不同的文化、不同的学科可能会给出不同的答案。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### **1. 哲学视角：存在与自我**\n- **笛卡尔的“我思故我在”**：哲学家笛卡尔认为，“我思”是确定自我存在的唯一证据。即使怀疑一切，怀疑本身证明了“我”的存在。\n- **存在主义**：萨特认为“存在先于本质”，人通过选择和行动定义自己，而非被预设的身份束缚。\n- **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）的暂时组合，执着于“我”会导致痛苦，解脱在于超越对“自我”的执念。\n\n---\n\n### **2. 心理学视角：自我认知**\n- **自我身份**：心理学家埃里克森提出“身份认同”理论，认为人在不同阶段会探索“我是谁”的问题，最终形成稳定的自我认知。\n- **社会角色**：我们常通过“职业”“家庭角色”“兴趣爱好”等标签定义自己，但这些只是外在的投影。\n- **内在特质**：性格、价值观、信念、情感体验等构成了更深层的自我，但这些也可能是流动的。\n\n---\n\n### **3. 生物学视角：身体与意识**\n- **生理层面**：从生物学角度看，“我”是大脑神经元活动的产物，是基因、环境、经历共同作用的结果。\n- **意识的谜题**：科学家仍在探索“意识”如何从物质中诞生，而“我”是否只是大脑的某种现象？\n\n---\n\n### **4. 社会与文化视角：关系中的自我**\n- **社会建构**：我们的身份常被社会规范、文化传统、群体归属所塑造。例如，性别、国籍、阶级等都可能影响“我是谁”的定义。\n- **他者镜像**：法国哲学家拉康认为，自我是通过他人“凝视”形成的，我们通过他人对自己的看法来认识自己。\n\n---\n\n### **5. 个人体验：你自己的答案**\n- **当下的感受**：此刻的你，可能感受到孤独、迷茫、好奇，或是平静。这些情绪本身也是“你”的一部分。\n- **未完成的故事**：你的人生还在书写，未来的经历、选择、反思都会不断重塑“我是谁”的答案。\n- **超越标签**：或许“我是谁”并不需要一个确定的答案，而是持续探索的过程。就像一首诗，不必急于读完，只需感受每一句的韵律。\n\n---\n\n### **或许可以这样问自己：**\n- 我最珍视的价值是什么？  \n- 在什么情况下我会感到“真实”？  \n- 如果没有社会角色，我会是谁？  \n- 我的过去、现在和未来如何交织成“我”？\n\n---\n\n最终，“我是谁”可能没有标准答案，但正是这种不确定性，让探索本身成为一种生命的诗意。你可以把它当作一场旅程，而不是必须抵达的终点。你愿意和我分享你此刻的感受吗？ 🌱'}], id='2025-10-23 11:17:48.328_d5c849', created_at='2025-10-23 11:17:48.328', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=995, time=12.2705, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.974 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
