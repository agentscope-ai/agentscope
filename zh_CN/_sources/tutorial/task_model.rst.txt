
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-16 03:28:00.747_adb9e6', created_at='2025-09-16 03:28:00.747', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-16 03:28:03.010_652d85', created_at='2025-09-16 03:28:03.010', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=2.262124, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='QFmmtQ6JhMqBZzbnGUPJYb', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-16 03:28:03.010', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-16 03:28:04.044_df89c4', created_at='2025-09-16 03:28:04.044', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.032382, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-16 03:28:04.090_fbaad0', created_at='2025-09-16 03:28:04.090', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.079079, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2'}], id='2025-09-16 03:28:04.214_870190', created_at='2025-09-16 03:28:04.214', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=3, time=1.203182, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n'}], id='2025-09-16 03:28:04.260_bad2c5', created_at='2025-09-16 03:28:04.260', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.248883, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-16 03:28:04.463_7f262e', created_at='2025-09-16 03:28:04.463', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.45139, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n'}], id='2025-09-16 03:28:04.729_3894ce', created_at='2025-09-16 03:28:04.729', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=12, time=1.71725, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n'}], id='2025-09-16 03:28:04.911_16589c', created_at='2025-09-16 03:28:04.912', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.900186, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-16 03:28:05.319_00e1b9', created_at='2025-09-16 03:28:05.319', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.3077, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n'}], id='2025-09-16 03:28:05.484_2436da', created_at='2025-09-16 03:28:05.484', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=24, time=2.473067, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n1'}], id='2025-09-16 03:28:05.666_de543d', created_at='2025-09-16 03:28:05.666', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=2.654597, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-16 03:28:05.846_eb6fa7', created_at='2025-09-16 03:28:05.846', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.834989, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n'}], id='2025-09-16 03:28:06.378_028f98', created_at='2025-09-16 03:28:06.378', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=36, time=3.366781, type='chat'), metadata=None)

    块 12
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n1'}], id='2025-09-16 03:28:06.537_4d9578', created_at='2025-09-16 03:28:06.537', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=3.526123, type='chat'), metadata=None)

    块 13
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-16 03:28:06.813_e687b2', created_at='2025-09-16 03:28:06.813', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.801925, type='chat'), metadata=None)

    块 14
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n'}], id='2025-09-16 03:28:07.041_3702b9', created_at='2025-09-16 03:28:07.041', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=48, time=4.029267, type='chat'), metadata=None)

    块 15
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 03:28:07.180_d47793', created_at='2025-09-16 03:28:07.180', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.168781, type='chat'), metadata=None)

    块 16
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 03:28:07.201_a0b2ee', created_at='2025-09-16 03:28:07.201', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.189451, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能涉及自我认知、身份认同等方面。首先，我需要考虑用户可能的背景和意图。用户可能是在思考自己的存在意义，或者对自我身份感到困惑。也有可能是在进行某种哲学探讨，或者只是随意提问。\n\n接下来，我需要分析这个问题的不同层面。从哲学角度，可以引用笛卡尔的“我思故我在”，或者佛教中的无我观念。心理学上，可能涉及自我认同的发展阶段，比如埃里克森的理论。此外，用户可能希望得到更个人化的回答，但作为AI，我无法了解他们的具体经历。\n\n还要考虑用户的情绪状态。如果他们感到迷茫或焦虑，回答需要更具支持性，提供不同的视角而非直接答案。同时，避免过于抽象或学术化的解释，保持易懂。\n\n另外，需要检查是否有潜在的深层需求。比如，用户可能在寻求自我接纳，或者对人生方向不确定。这时候可以建议自我反思的方法，如写日记、冥想等。\n\n还要注意文化差异，不同文化对“自我”的定义不同，可能需要更中立的回答。同时，避免任何可能引起误解的表述，确保回答客观且不带偏见。\n\n最后，确保回答结构清晰，分点说明不同角度的解释，并鼓励用户进一步探索自己的答案。保持语气友好，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和存在主义思考。不同的人、不同的文化、不同的哲学体系可能会给出截然不同的答案。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### **1. 哲学视角：**\n- **笛卡尔的“我思故我在”**  \n  法国哲学家笛卡尔认为，“我”是一个思考的主体。即使怀疑一切，只要“我”在思考，就证明“我”存在。  \n  **“我”是思考的载体，是意识的中心。**\n\n- **佛教的“无我”**  \n  佛教认为，“我”是虚幻的执念。人的身体、感受、思想、行为和意识都是暂时的、变化的，没有一个永恒不变的“自我”。  \n  **“我”是五蕴（色、受、想、行、识）的暂时组合，没有独立的实体。**\n\n- **存在主义的“自我创造”**  \n  萨特说“存在先于本质”，人没有预先设定的本质，而是通过选择和行动不断定义自己。  \n  **“我”是自由的选择，是不断塑造的过程。**\n\n---\n\n### **2. 心理学视角：**\n- **自我认同（Self-Identity）**  \n  心理学家埃里克森认为，人的自我认同是通过社会角色、价值观、目标和经历逐渐形成的。  \n  **“我”是过去经历、社会关系和未来目标的综合体现。**\n\n- **认知与情感的交织**  \n  “我”不仅是理性的思考者，也是情感的体验者。你的喜怒哀乐、记忆与欲望，共同构成了“我”的复杂性。  \n  **“我”是理性与感性的统一。**\n\n---\n\n### **3. 科学视角：**\n- **生物学角度**  \n  从基因到大脑神经网络，“我”是数十亿细胞协作的结果，是物质世界中的一种复杂系统。  \n  **“我”是宇宙演化中偶然与必然的产物。**\n\n- **意识的谜题**  \n  神经科学尚未完全解释意识的本质。我们为何能“感知”自己？“我”是否只是大脑的某种现象？  \n  **“我”可能是意识的某种表现形式，但本质仍是一个未解之谜。**\n\n---\n\n### **4. 个人视角：**\n- **你可能是**  \n  - 一个正在寻找答案的人；  \n  - 一个被过去定义的人；  \n  - 一个渴望改变的人；  \n  - 一个与世界互动的“存在”。  \n\n- **你可以尝试问自己**  \n  - 什么让我感到真实？  \n  - 我最珍视的价值是什么？  \n  - 如果没有社会角色，我是谁？  \n  - 我的行动和选择如何塑造“我”？\n\n---\n\n### **5. 一种可能的答案：**\n“你是你此刻的体验，是你的思考、感受、选择和行动的总和。你既是有限的个体，也是无限可能性的载体。‘我是谁’的答案，或许不在于找到一个固定的答案，而在于不断探索和创造属于自己的意义。”\n\n---\n\n如果你愿意，可以分享更多关于你的经历或困惑，我会尽力帮你一起思考。 🌱'}], id='2025-09-16 03:28:21.894_58d15d', created_at='2025-09-16 03:28:21.894', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=997, time=14.688719, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 21.153 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
