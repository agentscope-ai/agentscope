
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-20 09:08:35.340_6a581c', created_at='2025-10-20 09:08:35.340', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-20 09:08:36.672_0f45cd', created_at='2025-10-20 09:08:36.672', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.330408, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='h7TcWj8tdMFMCFvqRCqygh', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-20 09:08:36.672', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-20 09:08:37.706_ed46ce', created_at='2025-10-20 09:08:37.706', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.033098, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-20 09:08:37.790_b7c693', created_at='2025-10-20 09:08:37.790', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.116812, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-20 09:08:37.874_101faa', created_at='2025-10-20 09:08:37.874', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.201178, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-20 09:08:37.959_e62493', created_at='2025-10-20 09:08:37.959', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.285886, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-20 09:08:38.229_5d6f50', created_at='2025-10-20 09:08:38.229', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.556212, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-20 09:08:38.424_4ff8dc', created_at='2025-10-20 09:08:38.424', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.750571, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-20 09:08:38.983_0ac799', created_at='2025-10-20 09:08:38.983', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.310053, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-20 09:08:39.167_9cabe6', created_at='2025-10-20 09:08:39.167', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.494195, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-20 09:08:39.370_e2a994', created_at='2025-10-20 09:08:39.370', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.696852, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-20 09:08:39.534_742d27', created_at='2025-10-20 09:08:39.534', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.860775, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 09:08:39.717_ea71ce', created_at='2025-10-20 09:08:39.717', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.043628, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-20 09:08:39.829_e0119e', created_at='2025-10-20 09:08:39.829', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.155754, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在思考自我身份，或者对存在感到困惑，也可能是在寻求某种哲学上的答案。不过，作为AI，我不能直接给出哲学结论，但可以引导用户思考。\n\n接下来，我要分析用户的背景。用户可能是一个普通用户，可能对自我认知有疑问，或者只是好奇。也有可能用户想测试我的反应，或者有更深层的心理需求。这时候需要保持开放和中立，避免假设太多。\n\n然后，我应该考虑如何回应。直接回答“你是你”可能太简单，不够深入。可能需要引导用户进行自我反思，比如通过提问来帮助他们探索自己的身份。同时，要确保回答符合伦理规范，不涉及敏感话题。\n\n还要注意用户可能的潜在需求。如果用户感到迷茫或焦虑，可能需要更多的同理心和支持。但如果没有更多信息，保持中立和鼓励探索是合适的。\n\n另外，需要避免提供错误的信息或误导。比如，不能声称自己知道用户的具体身份，因为作为AI，我没有访问用户个人数据的能力。所以回答需要保持一般性，同时鼓励用户自我探索。\n\n最后，确保语言友好、易懂，避免使用复杂术语，让用户感到被理解和尊重。可能需要分步骤引导用户思考，比如从日常身份到更深层次的存在意义。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。它可能指向你对自我身份的探索，或是对存在本质的思考。以下是一些可能的方向，或许能帮助你更深入地理解这个问题：\n\n---\n\n### 1. **从日常身份出发**\n   - **社会角色**：你是学生、员工、家人、朋友，或是某个群体中的一员。这些角色定义了你在社会中的位置。\n   - **生物属性**：你是一个独特的个体，拥有基因、生理特征和神经系统，这些构成了你的“生物学身份”。\n   - **心理特质**：你的性格、价值观、兴趣、记忆和情感体验共同塑造了“你”的内在世界。\n\n---\n\n### 2. **哲学视角的追问**\n   - **笛卡尔的“我思故我在”**：哲学家笛卡尔认为，即使怀疑一切，思考本身证明了“我”的存在。\n   - **存在主义**：萨特认为“存在先于本质”，即人通过选择和行动定义自己，而非被预设的身份所束缚。\n   - **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒不变的自我。\n\n---\n\n### 3. **心理学的探索**\n   - **自我认知**：心理学家荣格提出“个体化”过程，强调通过整合意识与潜意识，形成完整的自我。\n   - **身份认同**：埃里克森的理论认为，人的一生中会经历不同的身份危机（如青少年时期的“我是谁？”），最终形成稳定的自我认同。\n\n---\n\n### 4. **更深层的追问**\n   - **我是谁？** 可能指向对“存在意义”的追问：我的生命是否有目的？我的选择是否自由？我的存在是否独特？\n   - **超越表象**：有时“我是谁”可能隐含对“本质”的探索——比如：我是由思想、情绪、身体组成的吗？还是某种更本质的存在？\n\n---\n\n### 5. **你可以尝试的思考方向**\n   - **写下你的特质**：列出你认为最重要的10个特质（如善良、好奇、坚韧等），它们如何定义你？\n   - **回顾人生经历**：哪些事件或人物塑造了现在的你？你如何评价自己的成长？\n   - **想象“如果我是另一个人”**：你会如何选择生活？这能帮你更清晰地看到自己的核心价值观。\n\n---\n\n### 6. **如果这个问题让你感到困惑**\n   - **接纳不确定性**：对“我是谁”的探索可能没有终点，允许自己保持开放和流动的状态。\n   - **与他人对话**：和信任的人讨论这个问题，可能会获得新的视角。\n   - **通过实践定义自己**：你的行动、选择和关系会不断重新定义“你”。\n\n---\n\n最终，“我是谁”可能没有标准答案，但正是这种探索本身，让“你”成为独一无二的存在。如果你愿意，可以分享更多具体的情境，我会尽力陪你一起思考。 🌱'}], id='2025-10-20 09:08:50.689_5ad376', created_at='2025-10-20 09:08:50.689', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=936, time=10.855579, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.353 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
