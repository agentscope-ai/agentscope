
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-27 10:17:24.222_0f1a57', created_at='2025-10-27 10:17:24.222', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-27 10:17:25.725_ec6fdf', created_at='2025-10-27 10:17:25.725', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.501503, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='3NjW9BMFmNFaSGAdtRwyBH', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-27 10:17:25.725', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-27 10:17:26.908_d145f7', created_at='2025-10-27 10:17:26.908', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.181833, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-27 10:17:26.957_d20392', created_at='2025-10-27 10:17:26.957', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.230336, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-27 10:17:27.007_c316ff', created_at='2025-10-27 10:17:27.008', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.281016, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-27 10:17:27.057_703de2', created_at='2025-10-27 10:17:27.057', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.330469, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-27 10:17:27.488_e83fa9', created_at='2025-10-27 10:17:27.488', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.761371, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-27 10:17:27.648_1c60e0', created_at='2025-10-27 10:17:27.648', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.921483, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-27 10:17:27.729_439b3a', created_at='2025-10-27 10:17:27.729', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.002413, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-27 10:17:27.830_baf46a', created_at='2025-10-27 10:17:27.830', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.103338, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-27 10:17:27.947_0ab69f', created_at='2025-10-27 10:17:27.947', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.220122, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-27 10:17:28.273_d3bd87', created_at='2025-10-27 10:17:28.273', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.546576, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-27 10:17:28.376_f44776', created_at='2025-10-27 10:17:28.376', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.649494, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-27 10:17:28.454_cc0dde', created_at='2025-10-27 10:17:28.454', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.727307, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从不同角度来回答。首先，我需要考虑用户可能的背景和意图。他可能是在思考自我身份，或者对存在感到困惑，也可能是在进行某种心理探索。\n\n接下来，我应该分析这个问题的不同层面。从心理学角度，自我认知涉及个人的身份认同、价值观和经历。哲学上，这可能涉及到本体论，探讨存在的本质。宗教或灵性方面，可能有不同的解释，比如灵魂或更高的自我。\n\n然后，我需要考虑用户可能的深层需求。他可能正在经历身份危机，或者寻求自我理解。这时候，提供一个开放性的回答，鼓励他反思自己的经历和价值观会更合适。\n\n还要注意避免给出过于笼统或抽象的答案，应该结合具体的例子或方法，帮助用户进行自我探索。比如建议他通过回顾过去的经历、思考自己的价值观、与他人互动等方式来理解自己。\n\n另外，要确保回答的语气友好且支持，让用户感到被理解和接纳。可能还需要提醒他，自我认知是一个持续的过程，不需要急于找到答案。\n\n最后，检查是否有文化或个人差异需要考虑，确保回答的普遍适用性，同时保持中立和客观。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。它可能指向对自我身份、存在意义或内心本质的探索。以下是一些可能的视角，或许能帮助你更接近自己的答案：\n\n---\n\n### 1. **从经验与经历出发**  \n   - **你是你的经历**：你过去的选择、情感、挑战和成就塑造了现在的你。比如，你可能是一个热爱艺术的人，或是一个在困境中坚持的人。  \n   - **你是你的习惯与价值观**：你每天的行为模式、对善恶的判断、对生活的态度，都在定义你。\n\n---\n\n### 2. **从哲学角度思考**  \n   - **“我”是流动的**：哲学家如赫拉克利特说“人不能两次踏入同一条河流”，你的身份可能在不断变化。今天的你可能与昨天的你有所不同。  \n   - **“我”是意识的观察者**：有些哲学认为，“我”是观察世界、思考问题的主体，而“我”本身可能超越具体的身体或思想。\n\n---\n\n### 3. **从心理学视角**  \n   - **自我认知的层次**：心理学家荣格提出“自我”包含意识（显性的自我）和无意识（隐藏的潜能）。你可能需要通过反思或探索，发现更深层的自己。  \n   - **社会角色与内在本质**：你可能是某个家庭中的孩子、职场中的员工，但这些角色只是“你”的一部分，而非全部。\n\n---\n\n### 4. **从灵性或存在主义角度**  \n   - **“我是”是一种存在**：存在主义认为，人先存在，然后通过选择定义自己。你可能需要主动创造自己的意义。  \n   - **“我是”是连接的纽带**：在灵性传统中，“我”可能被视为与宇宙、他人或更高力量的连接点。\n\n---\n\n### 5. **一个简单的练习**  \n   如果你感到困惑，可以尝试以下问题：  \n   - 我最珍视的是什么？（例如：自由、爱、知识）  \n   - 我害怕失去什么？（这可能揭示你的核心需求）  \n   - 如果没有社会标签（如职业、国籍），我会如何定义自己？  \n\n---\n\n### 最后  \n“我是谁？”没有标准答案，它可能是一个持续探索的过程。有时，答案藏在你做的小事里——比如你愿意为他人付出的善意，或是在深夜独自思考时的纯粹感受。允许自己慢慢靠近这个答案，无需急于求成。 🌱'}], id='2025-10-27 10:17:37.199_c82f82', created_at='2025-10-27 10:17:37.199', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=795, time=8.740741, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.982 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
