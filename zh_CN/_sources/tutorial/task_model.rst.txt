
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-14 01:54:01.344_e6b2db', created_at='2025-09-14 01:54:01.344', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-14 01:54:02.748_cfa621', created_at='2025-09-14 01:54:02.748', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.402299, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='XMwYgWZ9yS9sjpCRBskZaA', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-14 01:54:02.748', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-14 01:54:03.883_acaf7e', created_at='2025-09-14 01:54:03.883', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.133985, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-14 01:54:03.962_98bafb', created_at='2025-09-14 01:54:03.962', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.213027, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-14 01:54:04.043_1a4340', created_at='2025-09-14 01:54:04.043', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.293572, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-14 01:54:04.124_a79c50', created_at='2025-09-14 01:54:04.124', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.374527, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-14 01:54:04.284_016afc', created_at='2025-09-14 01:54:04.284', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.534537, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-14 01:54:04.462_8b55e7', created_at='2025-09-14 01:54:04.462', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.712885, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-14 01:54:04.599_2741aa', created_at='2025-09-14 01:54:04.599', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.849883, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-14 01:54:04.768_7e36b8', created_at='2025-09-14 01:54:04.768', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.018926, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-14 01:54:04.936_d982cc', created_at='2025-09-14 01:54:04.936', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.18671, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-14 01:54:05.074_dd5f39', created_at='2025-09-14 01:54:05.074', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.324341, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-14 01:54:05.230_c287a3', created_at='2025-09-14 01:54:05.230', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.481033, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-14 01:54:05.332_fb73ab', created_at='2025-09-14 01:54:05.332', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.582325, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。也许用户正在思考自我身份，或者对存在感到困惑。也有可能是在进行某种心理探索，或者只是好奇。\n\n接下来，我应该分析这个问题的不同层面。从哲学角度看，这涉及到自我认知、意识和存在的本质。比如，笛卡尔的“我思故我在”强调思维作为存在的证明。而佛教中的“无我”则认为自我是暂时的现象，不是固定的实体。\n\n然后，心理学的角度，自我身份是由个人经历、社会互动和内在信念共同构建的。荣格的个体化理论提到自我是整合不同心理部分的结果。同时，现代心理学也强调自我是动态发展的，随着时间和经验变化。\n\n科学方面，神经科学指出大脑的活动与自我意识有关，但具体机制仍在研究中。量子物理中的观察者效应可能引发关于意识与现实关系的讨论，但需要谨慎对待，避免过度延伸。\n\n文化差异也是一个因素。不同文化对自我的定义不同，比如西方强调个体独立，东方可能更注重群体关系。这可能影响用户对“我是谁”的理解。\n\n用户可能的深层需求是什么？他们可能在寻找自我认同，或者应对身份危机，或者对生命意义的探索。需要提供多角度的视角，同时保持开放和包容，避免给出单一答案。\n\n还要注意回答的结构，先分点解释不同角度，再综合，最后鼓励用户自我探索。语言要简洁易懂，避免术语过多，同时保持深度。需要检查是否有遗漏的重要观点，比如存在主义或宗教视角，但根据用户的问题，可能不需要深入每个领域，保持平衡即可。\n\n最后，确保回答友好且支持性，让用户感到被理解，并鼓励他们继续思考和探索。'}, {'type': 'text', 'text': '“我是谁？”是一个深刻而复杂的哲学问题，不同学科、文化和个人可能会给出不同的答案。以下是一些可能的视角，或许能帮助你更接近自己的理解：\n\n---\n\n### 1. **哲学视角：自我与存在**\n   - **笛卡尔**：“我思故我在”（Cogito, ergo sum）——思考本身证明了你的存在，但“我”可能只是思维的主体。\n   - **佛教**：认为“我”是暂时的、流动的，是五蕴（色、受、想、行、识）的组合，没有固定不变的“自我”。\n   - **存在主义**（如萨特）：人没有预设的本质，而是通过选择和行动“成为自己”。\n\n---\n\n### 2. **心理学视角：身份的构建**\n   - **自我认同**：你的身份是过去经历、价值观、人际关系和社会角色共同塑造的。比如，你可能认为自己是“一个善良的人”“一个追求知识的人”。\n   - **动态变化**：心理学认为自我是不断发展的，随着年龄、环境和经历的变化而调整。\n   - **潜意识**：弗洛伊德提出“本我、自我、超我”的结构，可能暗示“我”是多重心理力量的交织。\n\n---\n\n### 3. **科学视角：身体与意识**\n   - **生物学**：你是一个由细胞、基因和神经系统构成的有机体，但“自我”是否仅仅是这些物质的总和？科学家仍在探索意识的起源。\n   - **神经科学**：大脑的活动与自我意识相关，但“我”是否只是大脑的产物？这个问题仍无定论。\n\n---\n\n### 4. **文化与社会视角**\n   - **集体身份**：你可能通过家庭、民族、职业或文化背景定义自己（例如“我是中国人”“我是教师”）。\n   - **关系中的自我**：在亲密关系或社会角色中，你可能通过他人的反馈来确认自己的身份（例如“我是父母的孩子”“我是朋友的朋友”）。\n\n---\n\n### 5. **神秘主义与灵性视角**\n   - **超越个体**：一些灵性传统认为“我”是更广阔的存在（如宇宙、灵魂或“道”的一部分），个体的自我只是暂时的显现。\n   - **内在觉察**：通过冥想或反思，可能体验到“我”并非局限于身体或思维，而是更深层的觉知。\n\n---\n\n### 6. **你自己的答案**\n   - 这个问题没有标准答案，但你可以通过以下方式探索：\n     - **提问**：你最珍视的价值观是什么？什么让你感到活着？你希望未来成为怎样的人？\n     - **观察**：在不同情境下（如工作、独处、与他人互动），你如何定义自己？\n     - **接纳**：也许“我是谁”并不需要完全解答，而是持续的自我探索过程。\n\n---\n\n最终，**“你是谁”可能是一个不断变化的谜题**，答案可能藏在你的选择、感受和与世界的互动中。或许，真正的答案不在于找到一个固定的“身份”，而在于接纳自己的复杂性，并在探索中逐渐理解自己。 🌱'}], id='2025-09-14 01:54:19.005_5a0f28', created_at='2025-09-14 01:54:19.005', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1066, time=13.667498, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.665 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
