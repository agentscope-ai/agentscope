
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-20 01:20:14.963_157813', created_at='2025-09-20 01:20:14.963', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-20 01:20:17.003_73d973', created_at='2025-09-20 01:20:17.003', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=2.039112, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='74rthxTP3mC4qjvQ86xTuy', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-20 01:20:17.004', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-20 01:20:18.277_92b57e', created_at='2025-09-20 01:20:18.277', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.271808, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-20 01:20:18.329_e3b605', created_at='2025-09-20 01:20:18.329', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.323566, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-20 01:20:18.379_88c0f1', created_at='2025-09-20 01:20:18.379', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.374151, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-20 01:20:18.431_ddcc0d', created_at='2025-09-20 01:20:18.431', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.426238, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-20 01:20:18.534_f71bd3', created_at='2025-09-20 01:20:18.534', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.528741, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-20 01:20:19.060_538179', created_at='2025-09-20 01:20:19.060', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.054658, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-20 01:20:19.174_bd8fd9', created_at='2025-09-20 01:20:19.174', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.168891, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-20 01:20:19.229_2d2c9d', created_at='2025-09-20 01:20:19.229', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.223683, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-20 01:20:19.344_d9494c', created_at='2025-09-20 01:20:19.344', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.339264, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-20 01:20:19.459_a635b9', created_at='2025-09-20 01:20:19.459', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.453601, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-20 01:20:19.554_1d6d1b', created_at='2025-09-20 01:20:19.554', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.548773, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-20 01:20:19.678_9f7202', created_at='2025-09-20 01:20:19.678', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.672588, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个哲学性的问题，可能需要从多个角度来回答。首先，我需要考虑用户可能的背景和意图。也许他们正在经历自我探索，或者对存在意义感到困惑。也有可能他们只是出于好奇，想了解不同的观点。\n\n接下来，我应该分析这个问题的不同层面。从心理学角度，自我认知涉及个人的身份、价值观和经历。哲学上，这可能涉及到本体论和认识论的问题，比如笛卡尔的“我思故我在”。宗教或灵性层面可能有不同的解释，比如认为自我是灵魂或更高意识的体现。\n\n还要考虑用户可能的深层需求。他们可能在寻找认同感，或者面对身份危机。这时候需要提供支持性的回应，同时引导他们思考自己的价值观和目标。\n\n另外，需要避免过于抽象的回答，尽量结合实际例子或建议。比如建议自我反思、记录想法或与他人交流。同时，保持开放和中立的态度，不强加某种观点，而是提供不同的视角供用户参考。\n\n最后，确保回答结构清晰，分点说明不同角度的观点，并鼓励用户进一步探索自己的答案。这样既全面又具有互动性，帮助用户更好地理解这个问题。'}, {'type': 'text', 'text': '“我是谁？”是一个跨越哲学、心理学、宗教和科学的深刻问题，不同领域和视角可能会给出不同的答案。以下是一些可能的思考方向，或许能帮助你探索这个问题：\n\n---\n\n### **1. 从哲学角度**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。这里的“我”是思维的主体，是意识的核心。\n- **存在主义**：萨特认为“存在先于本质”，人没有预设的本质，而是通过选择和行动定义自己。你的人生意义需要你自己创造。\n- **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）暂时聚合的假象，执着于“我”会带来痛苦，解脱需要放下对“自我”的执着。\n\n---\n\n### **2. 从心理学角度**\n- **自我认知**：心理学中的“自我”包括对自身身份、性格、价值观、能力的认知。例如，你可能认为自己是“善良的”“好奇的”或“内向的”。\n- **社会角色**：你可能在不同情境中扮演不同角色（如“学生”“朋友”“员工”），这些角色共同构成了你对“自我”的理解。\n- **潜意识与经历**：童年经历、文化背景、社会压力等都会塑造你的自我认知，甚至可能让你对自己的“真实身份”产生困惑。\n\n---\n\n### **3. 从科学角度**\n- **生物学**：从基因、大脑结构到身体特征，你的生理属性是“你是谁”的一部分。但科学无法完全解释意识或“自我感”。\n- **神经科学**：大脑的神经元活动与意识有关，但“我”的感觉（即主观体验）仍然是未解之谜，被称为“意识的难题”。\n\n---\n\n### **4. 从灵性或宗教角度**\n- **灵魂与超越**：许多宗教认为“我”不仅是肉体或意识，还包括永恒的灵魂或更高的存在（如“真我”“梵我”）。\n- **修行与觉醒**：一些灵性实践（如冥想、瑜伽）旨在超越对“小我”的执着，体验更广阔的自我或与宇宙的连接。\n\n---\n\n### **5. 从日常生活的角度**\n- **你可能是**：\n  - 一个正在寻找答案的人；\n  - 一个由经历、关系、目标和价值观定义的个体；\n  - 一个不断变化的存在——今天的你可能与明天的你不同。\n\n---\n\n### **如何探索“我是谁”？**\n- **自我反思**：写下你的核心价值观、兴趣、恐惧和梦想。\n- **提问**：如果没有人定义你，你会如何描述自己？什么让你感到充实？\n- **与他人对话**：听听他人眼中的你，或许能发现新的视角。\n- **尝试新事物**：通过行动和体验，逐渐理解自己的可能性。\n\n---\n\n最终，“我是谁”可能没有标准答案，而是一个持续探索的过程。或许答案并不重要，重要的是你如何与这个问题共处，并在其中找到属于自己的意义。你愿意和我分享更多关于你的想法吗？ 😊'}], id='2025-09-20 01:20:35.954_2c7a5b', created_at='2025-09-20 01:20:35.954', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=933, time=16.27271, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 20.997 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
