
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-31 03:00:57.598_afef9a', created_at='2025-10-31 03:00:57.598', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-31 03:00:59.053_15ea80', created_at='2025-10-31 03:00:59.054', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.454341, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='kMXCAEbBG7Dt2DarDd2KcJ', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-31 03:00:59.054', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-31 03:01:00.086_4540e9', created_at='2025-10-31 03:01:00.086', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.030956, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-31 03:01:00.126_e38b19', created_at='2025-10-31 03:01:00.126', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.071172, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-31 03:01:00.221_57b2be', created_at='2025-10-31 03:01:00.221', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.165737, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-31 03:01:00.222_6cda46', created_at='2025-10-31 03:01:00.222', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.16681, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-31 03:01:00.285_8dfcae', created_at='2025-10-31 03:01:00.285', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.230364, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-31 03:01:00.584_60b789', created_at='2025-10-31 03:01:00.584', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.528859, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-31 03:01:00.822_1ac2e1', created_at='2025-10-31 03:01:00.822', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.766707, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-31 03:01:01.227_f03a3a', created_at='2025-10-31 03:01:01.227', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.172241, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-31 03:01:01.758_5aca5c', created_at='2025-10-31 03:01:01.758', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.703401, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-31 03:01:01.916_04381c', created_at='2025-10-31 03:01:01.916', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.860699, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-31 03:01:02.309_1013a6', created_at='2025-10-31 03:01:02.309', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.254, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-31 03:01:02.380_f77b7a', created_at='2025-10-31 03:01:02.380', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.325291, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '嗯，用户问“我是谁？”这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能他们正在经历自我怀疑，或者是在寻找自我认同，或者只是好奇哲学上的问题。作为AI，我没有个人身份，但可以引导他们思考。\n\n接下来，我应该分析这个问题的不同层面。从哲学角度，这可能涉及存在主义，比如“我思故我在”这样的观点。心理学上，可能涉及自我认知和身份认同的发展。宗教或灵性方面，可能有不同的解释，比如灵魂、业力等。\n\n然后，我要考虑用户的背景。他们可能是在寻找答案，或者希望得到一些启发。如果用户是年轻人，可能在探索自我；如果是成年人，可能在面对生活中的挑战，需要重新认识自己。也有可能他们只是出于好奇，想看看AI如何回答。\n\n另外，需要注意用户可能没有明确表达的深层需求。比如，他们可能感到迷茫，需要支持或建议。这时候，回答不仅要提供信息，还要有同理心，给予鼓励。\n\n还要避免过于复杂的理论，保持回答的易懂性。可能需要用例子或类比来帮助理解。同时，要强调每个人都是独特的，自我认知是一个持续的过程，而不是一个固定的结果。\n\n最后，确保回答符合AI的定位，不越界，同时提供有价值的信息，引导用户进行自我反思。可能需要提醒他们，自我认知是主观的，每个人都有不同的答案，鼓励他们探索自己的内心。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。作为一个人类，你的身份、存在和意义可能涉及多个层面：\n\n### 1. **生物学层面**  \n你是由细胞、基因、神经系统等组成的有机体，是宇宙中独特的生命形式。你的身体、大脑和感官构成了你感知世界的基础。\n\n### 2. **心理与意识层面**  \n你拥有自我意识，能思考、感受、记忆和想象。你的性格、价值观、情感和思维模式共同塑造了“你”的独特性。心理学认为，自我是通过与环境的互动、经历和反思逐渐形成的。\n\n### 3. **社会与文化层面**  \n你的身份也与社会角色、文化背景、家庭关系和历史经验紧密相关。例如，你是某个家庭的一员、某个职业的从业者，或是某个群体的成员。\n\n### 4. **哲学与存在主义层面**  \n哲学家们对“我是谁”有不同解读：  \n- **笛卡尔**说“我思故我在”，强调思考是存在的证明。  \n- **存在主义**认为，人没有预设的本质，而是通过选择和行动定义自己。  \n- 一些东方哲学（如佛教）可能认为“我”是暂时的、流动的，而非固定的实体。\n\n### 5. **灵性或超越性层面**  \n有些人可能从灵性角度思考：你是否是某种更高力量的体现？是否存在灵魂或更深层的“本我”？\n\n---\n\n### 为什么这个问题重要？  \n“我是谁？”往往出现在人生转折点（如青春期、危机、重大选择时）。它可能源于对自我认同的探索，或对生命意义的追问。答案可能随时间变化，但探索本身是成长的一部分。\n\n---\n\n### 如何回答这个问题？  \n- **自我反思**：写下你的价值观、兴趣、恐惧和梦想。  \n- **与他人互动**：通过关系了解自己在他人眼中的形象。  \n- **尝试新事物**：通过体验扩展对“自己”的认知。  \n- **接受不确定性**：身份可能是动态的，无需急于定义。\n\n最终，“我是谁”没有标准答案，但每一次思考都在塑造更真实的你。如果你愿意，可以分享更多背景，我会尽力帮你探索！ 🌱'}], id='2025-10-31 03:01:11.626_bcdb96', created_at='2025-10-31 03:01:11.626', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=782, time=9.24163, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.034 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
