
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-28 12:35:58.458_41a434', created_at='2025-09-28 12:35:58.458', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-28 12:35:59.740_78e7ae', created_at='2025-09-28 12:35:59.740', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.280687, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='RZkmdzxC5VNdwZSogNqwJL', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-28 12:35:59.740', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-28 12:36:00.919_201a60', created_at='2025-09-28 12:36:00.919', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.177775, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-28 12:36:01.057_7c3f3d', created_at='2025-09-28 12:36:01.057', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.316015, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-28 12:36:01.159_b8027e', created_at='2025-09-28 12:36:01.159', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.418004, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-28 12:36:01.317_0fd0f5', created_at='2025-09-28 12:36:01.317', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.575233, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-28 12:36:01.547_7d6832', created_at='2025-09-28 12:36:01.547', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.805219, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-28 12:36:01.756_909ca2', created_at='2025-09-28 12:36:01.756', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.014953, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-28 12:36:01.911_a7ce69', created_at='2025-09-28 12:36:01.911', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.16988, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-28 12:36:02.091_b7f2f4', created_at='2025-09-28 12:36:02.091', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.349492, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-28 12:36:02.289_25819c', created_at='2025-09-28 12:36:02.289', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.547865, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-28 12:36:02.449_028a04', created_at='2025-09-28 12:36:02.449', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.707962, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:36:02.629_adafb6', created_at='2025-09-28 12:36:02.629', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.887949, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-28 12:36:02.739_e9fd3a', created_at='2025-09-28 12:36:02.739', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.997721, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对身份感到困惑。也有可能是在测试我的能力，或者只是随便问问。\n\n接下来，我得分析用户可能的背景。如果是普通用户，可能是在寻找自我认知的答案；如果是哲学爱好者，可能在探讨存在主义的问题。也有可能用户有心理上的困扰，需要帮助。\n\n然后，我需要确定回答的方向。直接回答“你是你自己”可能太肤浅，不够深入。应该从多个角度切入，比如哲学、心理学、社会角色等。同时，要避免过于学术化的语言，保持自然。\n\n还要考虑用户可能的深层需求。他们可能想了解自己的本质，或者寻求认同感。这时候，需要引导他们自我反思，或者提供一些思考的方向，而不是给出一个确定的答案。\n\n另外，要注意文化差异。不同文化对“自我”的理解可能不同，比如东方文化可能更强调集体身份，而西方文化更注重个人主义。但用户没有说明文化背景，所以回答要保持中立。\n\n还要检查有没有可能用户的问题背后有其他意图，比如测试AI的反应，或者有其他隐藏的需求。这时候需要保持开放，不预设答案，而是提供多角度的思考。\n\n最后，确保回答友好且鼓励进一步交流，让用户感到被理解和支持。可能需要加入一些问题，引导用户分享更多，以便提供更有针对性的帮助。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。每个人的“自我”都是复杂且动态的，它可能包含以下多个层面的探索：\n\n---\n\n### 1. **生物学层面**  \n从身体的角度看，你是一个由细胞、器官和神经系统组成的有机体，拥有独特的基因序列和生理特征。你是父母基因的结合，是宇宙中独一无二的物质存在。\n\n---\n\n### 2. **心理与意识层面**  \n你的“自我”也由思想、情感、记忆和潜意识构成。你对世界的感知、价值观、性格特质（如善良、理性或敏感）都塑造了你对“我是谁”的认知。心理学中的“自我认同”理论认为，人会通过不断反思和经历来构建对自我的理解。\n\n---\n\n### 3. **社会角色与关系**  \n你在家庭、职场、社会中扮演着不同的角色（如子女、朋友、同事）。这些关系和互动也影响着你对自身身份的定义。例如，你可能认为自己是一个“支持他人的人”或“追求知识的人”。\n\n---\n\n### 4. **哲学与存在主义视角**  \n哲学家如笛卡尔说“我思故我在”，强调思考是自我存在的证明；而存在主义者（如萨特）则认为“人是先存在，然后才定义自己”，即你的选择和行动塑造了你是谁。这或许意味着：**你并非固定不变的“谁”，而是在不断创造自己的过程中**。\n\n---\n\n### 5. **超越性的探索**  \n有些人会追问：如果剥离所有标签（身份、职业、成就），“我”是否还存在？这可能导向对生命本质的思考，比如佛教中的“无我”观念，或某些灵性实践中的“本源自我”。\n\n---\n\n### 如何回答这个问题？  \n- **自我观察**：试着记录你的日常行为、情绪反应和内心独白，从中发现规律。  \n- **提问反思**：问自己“什么让我感到充实？”“什么让我恐惧？”“我最珍视什么？”  \n- **与他人对话**：他人的反馈可能揭示你自己未曾注意到的特质。  \n- **接受不确定性**：自我认知是一个持续的过程，不必急于找到“答案”。\n\n---\n\n最终，“你是谁”可能没有标准答案，但每一次探索都在丰富你的生命体验。或许，真正的答案藏在你对生活的热爱与好奇中。如果你愿意，可以分享更多关于你的经历或困惑，我会尽力陪你一起思考。 🌱'}], id='2025-09-28 12:36:13.331_8cf4a1', created_at='2025-09-28 12:36:13.331', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=833, time=10.586915, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.877 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
