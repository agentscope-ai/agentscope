
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-13 09:39:07.559_2d8052', created_at='2025-10-13 09:39:07.559', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-13 09:39:08.815_8a7107', created_at='2025-10-13 09:39:08.815', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.255459, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='Q6Agxn97kRbYyFQe86HkDk', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-13 09:39:08.815', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-13 09:39:09.829_ea9d23', created_at='2025-10-13 09:39:09.829', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.012158, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-13 09:39:09.959_21cfbf', created_at='2025-10-13 09:39:09.959', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.142274, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-13 09:39:09.998_b32d02', created_at='2025-10-13 09:39:09.998', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.181621, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-13 09:39:10.039_2f8e13', created_at='2025-10-13 09:39:10.039', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.22263, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-13 09:39:10.121_905a8a', created_at='2025-10-13 09:39:10.121', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.304268, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-13 09:39:10.220_f75414', created_at='2025-10-13 09:39:10.220', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.403053, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-13 09:39:10.277_3bcd31', created_at='2025-10-13 09:39:10.277', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.460239, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-13 09:39:10.356_d93008', created_at='2025-10-13 09:39:10.356', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.538932, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-13 09:39:10.534_7d9a44', created_at='2025-10-13 09:39:10.534', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.717219, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-13 09:39:10.631_6a3ddb', created_at='2025-10-13 09:39:10.631', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=1.814592, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-13 09:39:10.776_d97557', created_at='2025-10-13 09:39:10.776', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=1.959647, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-13 09:39:10.835_d3d384', created_at='2025-10-13 09:39:10.835', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.018338, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对存在感到困惑，也可能是在寻求某种哲学上的答案。\n\n接下来，我要分析用户的身份。用户可能是一个普通人，正在思考自己的身份和存在意义。也有可能是学生、哲学爱好者，或者有心理困扰的人。不过用户没有提供更多信息，所以需要保持回答的通用性。\n\n然后，我需要考虑如何回答这个问题。直接回答“你是你自己”可能太简单，用户可能需要更深入的解释。可以从哲学角度，比如笛卡尔的“我思故我在”，或者心理学中的自我认知理论。同时，也可以提到不同的文化或宗教对身份的看法，比如佛教中的“无我”概念。\n\n还要注意用户可能的深层需求。他们可能在寻找认同感，或者对自我身份有疑问，比如职业、社会角色等方面。这时候可以建议自我反思，或者推荐一些方法帮助他们探索自我，比如写日记、冥想等。\n\n另外，要避免过于学术化的语言，保持回答的易懂和亲切。同时，要确保信息准确，不误导用户。可能需要提到不同学科对“自我”的定义，比如心理学、哲学、社会学等，但不需要太深入，保持简洁。\n\n最后，检查是否有遗漏的方面，比如是否存在用户可能的误解，或者需要进一步澄清的地方。比如，用户是否在问更具体的问题，比如“我是谁”在特定情境下的含义，但根据当前信息，只能做一般性回答。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。不同的人、不同的文化、不同的学科可能会给出不同的答案。以下是一些可能的视角：\n\n---\n\n### 1. **哲学视角**\n   - **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，即使怀疑一切，只要“我”在思考，就证明“我”存在。因此，“我是谁”可以简化为“一个思考的存在”。\n   - **佛教的“无我”**：佛教认为，“我”是五蕴（色、受、想、行、识）的暂时组合，没有永恒不变的“自我”。因此，“我是谁”可能指向对执念与虚幻身份的超越。\n   - **存在主义**：萨特等哲学家认为，“人先存在，然后定义自己”。因此，“我是谁”是通过选择、行动和责任不断塑造的过程。\n\n---\n\n### 2. **心理学视角**\n   - **自我认知**：心理学家认为，“我是谁”是通过自我反思、经验积累和与他人的互动形成的。例如，埃里克森的“身份认同理论”强调个体在不同人生阶段对自我角色的探索。\n   - **人格特质**：性格测试（如MBTI、大五人格）可能帮助你理解自己的行为模式和偏好，但这只是对“我”的一种描述，而非定义。\n   - **社会角色**：在家庭、职场、社会中，你可能扮演多种角色（如“女儿”“同事”“朋友”），这些角色共同构成了你对“自我”的感知。\n\n---\n\n### 3. **生物学视角**\n   - 从基因和进化角度看，“我是谁”可能与DNA编码、生物本能有关。但这种视角更偏向“我是什么”，而非“我是谁”。\n\n---\n\n### 4. **文化与宗教视角**\n   - **儒家**：强调“仁”与社会责任，认为“我是谁”与道德修养、家庭责任密切相关。\n   - **基督教**：认为“我是谁”是上帝创造的个体，需通过信仰与爱来实现自我价值。\n   - **道家**：主张“道法自然”，“我是谁”可能是与天地万物合一的体验。\n\n---\n\n### 5. **现实中的探索**\n   - **自我反思**：通过提问“我真正想要什么？”“我的价值观是什么？”“我如何与他人相处？”来逐渐接近答案。\n   - **行动与体验**：你的选择、行动和经历会不断塑造“我是谁”的答案。例如，一个热爱艺术的人可能认为自己是“创造者”。\n   - **接受不确定性**：许多哲学家认为，“我是谁”并非一个固定答案，而是一个持续探索的过程。\n\n---\n\n### 最后，或许可以这样回答：\n**“你是你此刻的体验、选择与成长的总和。你可能尚未完全了解自己，但每一次思考、行动和感受，都在重新定义‘我是谁’。”**\n\n如果你愿意分享更多背景，我可以尝试更具体地探讨这个问题。'}], id='2025-10-13 09:39:23.727_ccaa61', created_at='2025-10-13 09:39:23.727', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=972, time=12.886763, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.174 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
