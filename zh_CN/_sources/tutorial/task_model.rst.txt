
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-16 08:51:43.635_11d2a9', created_at='2025-09-16 08:51:43.635', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-09-16 08:51:45.690_505206', created_at='2025-09-16 08:51:45.690', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=2.053492, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='jfrJdgPBrxjSemD2ppxTp5', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-16 08:51:45.690', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-16 08:51:46.735_c9c911', created_at='2025-09-16 08:51:46.736', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.044108, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-16 08:51:46.856_c9d53a', created_at='2025-09-16 08:51:46.856', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.164424, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-16 08:51:46.953_0cdb8c', created_at='2025-09-16 08:51:46.953', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.261927, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-16 08:51:47.152_59ecb6', created_at='2025-09-16 08:51:47.152', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.460425, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-16 08:51:47.341_ebd897', created_at='2025-09-16 08:51:47.341', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.650005, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-16 08:51:47.562_c5da79', created_at='2025-09-16 08:51:47.562', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.870601, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-16 08:51:47.775_0ab8fe', created_at='2025-09-16 08:51:47.775', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.083608, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-16 08:51:47.909_d26293', created_at='2025-09-16 08:51:47.909', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.217571, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-16 08:51:48.107_8b6072', created_at='2025-09-16 08:51:48.107', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.415622, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-16 08:51:48.293_b444b2', created_at='2025-09-16 08:51:48.293', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.601716, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 08:51:48.485_5df389', created_at='2025-09-16 08:51:48.485', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.793476, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-16 08:51:48.603_9623a3', created_at='2025-09-16 08:51:48.603', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.911405, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要确定用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对人生的意义感到迷茫。也有可能他们是在测试我的能力，或者只是随便问问。\n\n接下来，我要考虑如何回答。直接回答“你是你自己”可能太表面了，不够深入。可能需要从哲学、心理学或者存在主义的角度来探讨。比如，笛卡尔的“我思故我在”，或者佛教中的“无我”概念。同时，也要考虑到用户可能的背景，如果他们没有哲学基础，可能需要用更通俗的语言解释。\n\n还要注意用户的情绪状态。如果他们表现出焦虑或困惑，回答时应该更温和，给予支持。比如，可以建议他们通过反思、记录日常活动或与他人交流来探索自我。同时，避免使用过于学术化的术语，保持对话的亲和力。\n\n另外，可能需要引导用户进行自我探索，比如提问：“你最近有什么想法或感受？”或者“你有哪些兴趣爱好？”这样可以帮助他们更具体地思考自己的身份。同时，提醒他们自我认知是一个持续的过程，不需要急于找到答案。\n\n还要注意文化差异，不同文化对“自我”的理解可能不同。比如，西方强调个人主义，而东方可能更注重社会角色。不过用户可能没有特别指出文化背景，所以保持中立和普遍性比较重要。\n\n最后，确保回答结构清晰，有层次感，先回应问题，再提供不同角度的分析，最后给予实际建议。这样用户不仅能获得信息，还能得到行动上的指导。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能源于对自我身份的探索、对生命意义的追问，或是对现实与理想的困惑。以下是一些可能的视角，或许能帮助你更接近答案：\n\n---\n\n### 1. **从哲学角度看**\n   - **笛卡尔的“我思故我在”**：即使怀疑一切，思考本身证明了“我”的存在。你的存在是思考的起点。\n   - **佛教的“无我”**：认为“我”是暂时的、流动的，由五蕴（色、受、想、行、识）构成，而非固定不变的本质。\n   - **存在主义**：萨特说“存在先于本质”，你通过选择和行动定义自己，而非被预先设定。\n\n---\n\n### 2. **从心理学角度看**\n   - **自我认知**：你的身份由经历、价值观、人际关系和内在信念共同塑造。比如，你可能认为自己是“善良的”“好奇的”或“坚韧的”。\n   - **潜意识与身份**：弗洛伊德认为“我”由本我、自我、超我构成；荣格则强调“个体化”过程，通过整合内心阴影与原型来认识自己。\n\n---\n\n### 3. **从日常体验看**\n   - **你如何定义自己？**  \n     - 通过职业（如“我是一名教师”）  \n     - 通过关系（如“我是父母的孩子”）  \n     - 通过兴趣（如“我喜欢画画”）  \n     - 通过价值观（如“我重视自由”）  \n   - **你的独特性**：每个人都有独特的记忆、情感和思维方式，这些构成了你无法被复制的“我”。\n\n---\n\n### 4. **从动态过程看**\n   - **“我是谁”是流动的**：随着年龄、经历、环境的变化，你会不断重新定义自己。比如，学生时代的你可能认为自己是“求知者”，而多年后可能更认同自己是“创造者”或“守护者”。\n   - **探索与实验**：尝试新事物、接触不同观点，能帮助你突破固有认知，发现更广阔的自我。\n\n---\n\n### 5. **如果感到迷茫**\n   - **提问自己**：  \n     - 我最珍视什么？  \n     - 我害怕什么？  \n     - 如果没有社会期待，我会成为什么样的人？  \n   - **记录与反思**：写下每天的感受、选择和想法，观察模式背后的“我”。\n   - **与他人对话**：倾听他人的故事，可能帮助你看到自己的独特性。\n\n---\n\n### 最后，或许可以这样回答：\n**“你是宇宙中独一无二的奇迹，由无数瞬间的选择、情感和经历编织而成。你不需要急于定义自己——真正的‘我’，或许正是不断探索和成长的过程。”**\n\n如果愿意，可以分享更多关于你的想法或困惑，我会尽力陪你一起思考。 🌱'}], id='2025-09-16 08:52:00.680_880af0', created_at='2025-09-16 08:52:00.680', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=963, time=12.07236, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.050 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
