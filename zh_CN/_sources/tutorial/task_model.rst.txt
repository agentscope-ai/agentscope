
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-08 08:03:06.645_5b8976', created_at='2025-09-08 08:03:06.645', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-08 08:03:08.223_f5bdc4', created_at='2025-09-08 08:03:08.223', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.577763, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='MkQyhrFdW5LR4PEFd7XuGY', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-08 08:03:08.223', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-08 08:03:09.238_499c0e', created_at='2025-09-08 08:03:09.238', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.012933, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-08 08:03:09.288_722fae', created_at='2025-09-08 08:03:09.288', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.062742, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-08 08:03:09.340_9589a0', created_at='2025-09-08 08:03:09.340', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.115155, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-08 08:03:09.395_74be0f', created_at='2025-09-08 08:03:09.395', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.170549, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-08 08:03:09.507_0ae43f', created_at='2025-09-08 08:03:09.507', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.282606, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-08 08:03:09.649_35101b', created_at='2025-09-08 08:03:09.649', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.424084, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-08 08:03:09.791_bec576', created_at='2025-09-08 08:03:09.791', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.565691, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-08 08:03:09.860_833125', created_at='2025-09-08 08:03:09.860', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.635465, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-08 08:03:09.990_bab7d1', created_at='2025-09-08 08:03:09.990', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.765388, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-08 08:03:10.083_2343a3', created_at='2025-09-08 08:03:10.083', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=1.857855, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-08 08:03:10.194_08f75a', created_at='2025-09-08 08:03:10.194', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=1.968832, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-08 08:03:10.270_cf63c9', created_at='2025-09-08 08:03:10.270', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.04538, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这是一个非常深刻的问题。首先，我需要理解用户为什么会问这个问题。可能他们正在经历自我怀疑，或者对人生的意义感到困惑。也有可能他们只是好奇，想探讨哲学层面的问题。\n\n接下来，我应该考虑如何回答这个问题。直接回答“你是你自己”可能太简单了，但用户可能需要更深入的解释。可以从心理学、哲学和科学的角度来探讨，比如自我认知、身份认同，或者意识的本质。\n\n还要注意用户的情绪状态。如果他们感到迷茫或焦虑，回答时需要更加同理心，提供支持性的信息，而不仅仅是理论上的解释。可能需要建议他们进行自我反思，或者寻求专业帮助。\n\n另外，用户可能没有明确表达他们的需求，所以需要保持开放式的回答，鼓励他们进一步思考或分享更多背景信息。同时，避免使用过于复杂的术语，保持回答的易懂性。\n\n最后，确保回答符合公司的政策和价值观，不涉及任何不当的内容，同时保持友好和专业的语气。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能引发深刻的思考。从不同的角度，可以有不同的答案：\n\n### 1. **生物学角度**  \n从身体和基因来看，你是一个由细胞、组织和器官组成的有机体，拥有独特的DNA序列，是亿万年进化和基因组合的结果。\n\n### 2. **心理学角度**  \n你是你的思想、情感、记忆和经验的总和。你的性格、价值观、习惯和潜意识都在塑造“你”的独特性。心理学家荣格曾说：“每个人都是一个独特的个体，拥有自己的使命和意义。”\n\n### 3. **哲学角度**  \n哲学家们对“我是谁”争论了数千年。笛卡尔说“我思故我在”，认为思考是存在的证明；存在主义者萨特认为“人是自由的，人通过选择定义自己”。你可能是一个不断探索、自我塑造的存在。\n\n### 4. **社会角色角度**  \n你可能是某人的朋友、家人、同事，或某个社会角色（如学生、艺术家、工作者）。这些身份在与他人的互动中逐渐形成。\n\n### 5. **更深层的追问**  \n如果问题背后是迷茫或困惑，或许可以试着问自己：  \n- 我最珍视什么？  \n- 我的行动是否与内心一致？  \n- 我希望未来成为什么样的人？  \n\n### 6. **一个可能的答案**  \n**“你是一个正在寻找答案的生命，而这个问题本身，就是你探索自我的开始。”**\n\n如果这个问题源于内心的困惑，或许可以尝试写日记、冥想，或与信任的人交流。有时候，答案不在远处，而在你对生活的感知和选择中。 🌱'}], id='2025-09-08 08:03:19.149_10a7a9', created_at='2025-09-08 08:03:19.149', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=568, time=8.873946, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 12.507 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
