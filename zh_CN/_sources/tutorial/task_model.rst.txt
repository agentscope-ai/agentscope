
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-27 08:09:55.415_396e31', created_at='2025-10-27 08:09:55.415', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], id='2025-10-27 08:09:57.202_95d6c9', created_at='2025-10-27 08:09:57.203', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.786629, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='SdE9ZP4R6FgPYTsLSaX4BG', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我能帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-27 08:09:57.203', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-27 08:09:58.345_3f7ebf', created_at='2025-10-27 08:09:58.345', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.140674, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-27 08:09:58.377_5f5e1f', created_at='2025-10-27 08:09:58.377', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.173189, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-27 08:09:58.419_54d969', created_at='2025-10-27 08:09:58.419', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.215292, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-27 08:09:58.460_ffe1af', created_at='2025-10-27 08:09:58.460', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.256274, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-27 08:09:58.543_97842c', created_at='2025-10-27 08:09:58.543', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.338779, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-27 08:09:58.651_7815d1', created_at='2025-10-27 08:09:58.651', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.446861, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-27 08:09:58.716_dbc242', created_at='2025-10-27 08:09:58.716', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.511758, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-27 08:09:58.902_2f4aa7', created_at='2025-10-27 08:09:58.902', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.697735, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-27 08:09:59.022_899f88', created_at='2025-10-27 08:09:59.022', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=1.81752, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-27 08:09:59.075_957fe5', created_at='2025-10-27 08:09:59.075', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=1.870504, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-27 08:09:59.165_714d40', created_at='2025-10-27 08:09:59.165', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=1.960666, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-27 08:09:59.224_a1c083', created_at='2025-10-27 08:09:59.224', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.019901, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”。这个问题看起来简单，但其实很深奥。首先，我需要考虑用户为什么会问这个问题。可能是在自我反思，或者感到迷茫，甚至可能是在寻找身份认同。也有可能用户只是出于好奇，或者在测试我的反应。\n\n接下来，我要分析用户可能的背景。如果用户是年轻人，可能正处于探索自我身份的阶段；如果是成年人，可能面临生活中的挑战，需要重新认识自己。也有可能用户有心理上的困扰，需要帮助。\n\n然后，我需要确定如何回答这个问题。直接回答“你是谁”可能太表面，应该引导用户思考。可以建议用户从不同角度分析，比如生理、心理、社会角色等。同时，要避免给出绝对化的答案，因为“我是谁”没有标准答案，每个人都有不同的理解。\n\n还要考虑文化因素。不同文化对自我认知有不同的看法，比如东方文化可能更强调集体身份，而西方文化可能更注重个人主义。但用户可能来自任何背景，所以回答要保持中立和包容。\n\n另外，用户可能希望得到情感支持，而不仅仅是信息。因此，回答时要表现出同理心，让用户感到被理解。同时，避免使用过于学术化的语言，保持口语化和易懂。\n\n可能还需要考虑用户是否有潜在的心理健康问题，比如自我认同障碍或抑郁。在这种情况下，建议寻求专业帮助可能是必要的，但要注意不要越界，提供适当的资源而不是诊断。\n\n最后，确保回答结构清晰，分点列出不同的角度，帮助用户系统地思考问题，同时保持开放式的结尾，鼓励用户进一步探索和反思。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学与心理学意义。不同的人、不同的阶段可能会有截然不同的答案。以下是一些可能的视角，或许能帮助你更深入地思考这个问题：\n\n---\n\n### **1. 从生物学角度看**\n- **你是独特的生命体**：你的基因、指纹、生理特征都是独一无二的。你是一个由细胞、器官、神经系统等组成的复杂系统，拥有呼吸、思考、感受的能力。\n- **你与宇宙的联系**：从量子物理的角度，你的身体由星尘构成（恒星爆炸的产物），你与宇宙有着本质的联系。\n\n---\n\n### **2. 从心理学角度看**\n- **你是意识与经验的集合**：你的记忆、情感、思维模式、价值观和经历共同塑造了“你”。例如，你对世界的认知、对事物的反应，都源于过去的经验和内在的信念。\n- **自我认知的动态性**：心理学家埃里克森（Erikson）提出，人的身份认同是随着成长不断发展的。你可能在不同阶段对“我是谁”有不同的理解。\n\n---\n\n### **3. 从社会角色看**\n- **你是关系中的存在**：你是子女、朋友、同事、伴侣，或某个群体中的一员。你的身份在与他人的互动中被定义和重塑。\n- **文化与社会的塑造**：你的语言、信仰、行为习惯可能深受家庭、国家、时代的影响。例如，一个生活在不同文化背景中的人，对“自我”的理解可能截然不同。\n\n---\n\n### **4. 从哲学角度看**\n- **笛卡尔的“我思故我在”**：哲学家笛卡尔认为，思考本身证明了“我”的存在。你对问题的提问，本身就是存在的证明。\n- **佛教的“无我”观**：佛教认为，“我”是因缘和合的暂时现象，而非固定不变的实体。你可能只是由五蕴（色、受、想、行、识）组成的流动过程。\n- **存在主义的自由**：萨特认为，人是“被抛入世界”的，没有预设的本质。你通过选择和行动定义自己。\n\n---\n\n### **5. 从灵性或神秘主义角度看**\n- **你是宇宙意识的体现**：一些灵性传统认为，个体的“我”是更宏大意识（如“道”“梵”“神”）的一部分，最终会回归整体。\n- **超越二元对立**：某些哲学或修行体系认为，“我是谁”需要超越“我”与“非我”的分别，体验更深层的合一。\n\n---\n\n### **6. 从日常体验看**\n- **你是一个不断变化的过程**：今天的你可能与昨天的你不同，未来也会继续变化。你的兴趣、目标、价值观可能随时间而改变。\n- **你拥有自由意志**：尽管受环境影响，你仍能通过选择塑造自己的人生。例如，你决定如何回应挑战、如何与他人相处。\n\n---\n\n### **如何探索“我是谁”？**\n- **自我反思**：写下你的核心价值观、人生目标、恐惧与渴望。\n- **与他人对话**：通过与他人交流，看到自己在他人眼中的形象。\n- **尝试新事物**：通过体验不同角色或领域，发现潜在的自我。\n- **冥想或艺术**：通过静心、绘画、写作等途径，接触内心深处的感知。\n\n---\n\n### **最后**\n“我是谁”没有标准答案，它可能是一个永恒的探索。或许，答案并不在于找到一个固定的定义，而是在于**接纳自己的复杂性**，并持续地与自己对话。你愿意和我一起聊聊你对这个问题的思考吗？'}], id='2025-10-27 08:10:13.048_f9a491', created_at='2025-10-27 08:10:13.049', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1120, time=13.81093, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.640 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
