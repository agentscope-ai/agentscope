
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-17 02:31:27.686_aa2a78', created_at='2025-09-17 02:31:27.686', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-17 02:31:31.036_35d325', created_at='2025-09-17 02:31:31.036', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=3.348559, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='FhQitn2H4YJa4myDGxZSKm', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-17 02:31:31.036', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 02:31:32.027_b1204e', created_at='2025-09-17 02:31:32.027', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=0.989854, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-17 02:31:32.160_2394ca', created_at='2025-09-17 02:31:32.160', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.12206, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-17 02:31:32.355_87c230', created_at='2025-09-17 02:31:32.355', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.317706, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-17 02:31:32.506_90034b', created_at='2025-09-17 02:31:32.506', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.468645, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-17 02:31:32.960_67d009', created_at='2025-09-17 02:31:32.960', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.922701, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-17 02:31:33.480_71af69', created_at='2025-09-17 02:31:33.480', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.442883, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-17 02:31:33.675_accee0', created_at='2025-09-17 02:31:33.675', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.637778, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-17 02:31:34.825_1158b2', created_at='2025-09-17 02:31:34.825', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=3.787451, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-17 02:31:35.152_7305af', created_at='2025-09-17 02:31:35.152', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=4.114162, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-17 02:31:35.374_3aea9b', created_at='2025-09-17 02:31:35.374', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=4.336157, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 02:31:35.580_eafad0', created_at='2025-09-17 02:31:35.580', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.542095, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 02:31:35.787_2088bd', created_at='2025-09-17 02:31:35.787', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=4.749983, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者对身份感到困惑。也有可能是在测试我的能力，或者有某种心理上的需求。\n\n接下来，我要分析用户的身份。用户可能是一个正在寻找自我认知的人，或者对哲学问题感兴趣。也有可能用户是第一次使用我的服务，想了解我的功能，但用了一个比较抽象的问题。\n\n然后，我需要确定用户的需求。表面上看，用户想知道自己的身份，但深层可能是在寻求认同感、存在意义，或者需要帮助解决某种困扰。也有可能用户只是好奇，想看看我能怎么回答。\n\n还要考虑用户可能的背景。如果是学生，可能在学习哲学或心理学；如果是成年人，可能面临人生转折点；如果是青少年，可能在探索自我身份。不同背景的人会有不同的需求和期望。\n\n另外，用户可能没有明确表达更深层的问题，比如对自我价值的怀疑，或者对未来的迷茫。这时候需要我提供支持性的回应，引导他们深入思考，而不是简单回答。\n\n还要注意文化差异。不同文化对“自我”的定义不同，可能需要更包容的回答。同时，避免使用专业术语，保持回答的易懂性。\n\n最后，确保回答既符合逻辑，又富有同理心。可能需要结合哲学观点、心理学理论，或者提供一些引导性的问题，帮助用户自己找到答案。同时保持开放性，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学和心理学意义。它可能源于你对自我认知的探索，或是对存在意义的思考。以下是一些可能的视角，或许能帮助你更接近答案：\n\n---\n\n### 1. **从生物学角度**  \n你是由基因、细胞和神经系统构成的有机体，是数百万年进化结果的产物。你的身体、大脑和感官是你与世界互动的媒介。\n\n---\n\n### 2. **从心理学角度**  \n你是一个独特的个体，拥有情感、记忆、思维和价值观。你的身份由经历、选择、人际关系和内在信念共同塑造。心理学中的“自我”概念（如弗洛伊德的本我、自我、超我，或荣格的个体化过程）试图解释这种复杂性。\n\n---\n\n### 3. **从哲学角度**  \n- **笛卡尔**：“我思故我在”——你的存在可以通过思考证明。  \n- **存在主义**（如萨特）：你通过选择和行动定义自己，自由是人类的本质。  \n- **东方哲学**（如佛教）：自我可能是一种暂时的、流动的“聚合体”，而非固定不变的实体。\n\n---\n\n### 4. **从社会角色角度**  \n你是某个家庭的成员、朋友、同事，或社会中的一份子。你的身份也与他人的期待、文化背景和社会关系交织。\n\n---\n\n### 5. **从灵性或超越性角度**  \n有些人认为“我是”某种更广阔的存在（如宇宙意识、灵魂或能量），超越物质身体的局限。\n\n---\n\n### 6. **你可能需要的答案**  \n如果这个问题源于困惑或迷茫，或许可以尝试：  \n- **提问自己**：我最珍视什么？我的目标是什么？我如何与他人相处？  \n- **观察行为**：我的习惯、反应和选择反映了怎样的内在信念？  \n- **接纳不确定性**：身份可能是一个动态的过程，而非固定的答案。\n\n---\n\n最终，“我是谁”没有标准答案，但探索本身可能比答案更有价值。你愿意分享更多背景吗？或许我们可以一起深入探讨。 🌱'}], id='2025-09-17 02:31:44.321_3e7d65', created_at='2025-09-17 02:31:44.321', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=763, time=8.529879, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.640 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
