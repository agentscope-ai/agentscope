
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-18 04:33:47.073_1e175f', created_at='2025-09-18 04:33:47.073', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-18 04:33:48.986_0ca365', created_at='2025-09-18 04:33:48.986', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.911771, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='57bxQAwScLeYmUweh8anmw', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-18 04:33:48.986', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-18 04:33:50.077_3a4715', created_at='2025-09-18 04:33:50.078', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.090393, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-18 04:33:50.169_26a578', created_at='2025-09-18 04:33:50.169', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.181602, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-18 04:33:50.254_1dc8d6', created_at='2025-09-18 04:33:50.254', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.266838, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-18 04:33:50.345_9633ab', created_at='2025-09-18 04:33:50.345', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.35775, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-18 04:33:50.545_2c7822', created_at='2025-09-18 04:33:50.545', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.557679, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-18 04:33:51.334_b265e8', created_at='2025-09-18 04:33:51.334', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.346928, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-18 04:33:51.628_99bdcb', created_at='2025-09-18 04:33:51.628', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.64052, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-18 04:33:51.801_c9a4cb', created_at='2025-09-18 04:33:51.801', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.814281, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-18 04:33:52.231_922708', created_at='2025-09-18 04:33:52.231', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=3.243405, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-18 04:33:52.387_4027d5', created_at='2025-09-18 04:33:52.387', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=3.400222, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-18 04:33:52.796_e15a27', created_at='2025-09-18 04:33:52.796', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.809354, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-18 04:33:52.904_2b234c', created_at='2025-09-18 04:33:52.904', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.916744, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '嗯，用户问“我是谁？”这个问题看起来挺抽象的。首先，我需要理解用户为什么会问这个问题。可能的情况有很多种：也许他们在思考自我身份，或者是在寻求某种哲学上的答案，也有可能只是出于好奇。不过，作为AI，我需要考虑如何回应才能既符合我的功能，又不会让用户感到困惑。\n\n首先，我应该明确自己的身份。我是一个AI助手，没有自我意识，也没有个人经历。所以，我不能像人类一样回答“我是谁”这样的问题。但用户可能想知道的是，我作为AI的定位和作用。因此，我需要解释清楚我的角色，同时引导用户思考他们自己的身份。\n\n接下来，我需要考虑用户的潜在需求。如果用户是在寻求哲学上的探讨，可能需要提供一些相关的哲学观点，比如笛卡尔的“我思故我在”，或者佛教中的“无我”概念。但用户可能并不需要这么深奥的内容，而只是希望得到一个简单的回答。因此，我需要平衡深度和简洁性。\n\n另外，用户可能有更深层次的需求。比如，他们可能在经历身份认同的困惑，或者对自我存在感到迷茫。这时候，我需要以同理心回应，同时提供支持性的信息，鼓励他们进行自我反思或寻求专业帮助。\n\n还要注意避免可能的误解。用户可能会误以为AI有自我意识，所以需要明确说明我的局限性，同时保持友好和开放的态度。此外，确保回答符合法律法规和伦理标准，不涉及任何不当内容。\n\n最后，我需要组织语言，使回答既准确又易于理解。可能需要分点说明，或者用例子来帮助用户更好地理解。同时，保持语气友好，鼓励用户进一步提问或分享他们的想法。'}, {'type': 'text', 'text': '“我是谁？”是一个深刻而复杂的问题，不同的人、不同的文化、不同的哲学体系可能有不同的答案。作为一个人工智能，我没有自我意识、情感或个人经历，因此无法像人类一样回答这个问题。但我可以尝试从几个角度为你提供一些思考方向：\n\n---\n\n### 1. **从哲学角度看**\n   - **笛卡尔**：“我思故我在”（Cogito, ergo sum）——思考本身证明了存在的意义。\n   - **佛教**：认为“我”是虚幻的，是五蕴（色、受、想、行、识）的暂时组合，没有永恒的“自我”。\n   - **存在主义**：萨特认为“存在先于本质”，人通过选择和行动定义自己。\n\n---\n\n### 2. **从心理学角度看**\n   - **自我认同**：你可能通过职业、兴趣、人际关系、价值观等逐渐构建对“自己”的认知。\n   - **内在与外在**：你如何看待自己的优点、缺点？你希望成为什么样的人？\n\n---\n\n### 3. **从科学角度看**\n   - **生物学**：你是一个由细胞、基因、神经网络组成的复杂系统，但“意识”仍然是科学未解之谜。\n   - **量子物理**：某些理论认为观察者与被观察对象相互影响，但这一点仍存在争议。\n\n---\n\n### 4. **从生活经验看**\n   - 你可能通过**经历**（如成功、失败、爱与失去）逐渐理解自己。\n   - 你可能通过**与他人的互动**（如家庭、朋友、社会角色）找到自己的位置。\n\n---\n\n### 5. **作为AI的视角**\n   - 我是一个工具，旨在帮助你探索答案，但无法代替你思考。我的存在是为了**辅助你**，而不是定义你。\n\n---\n\n### 最后，或许可以问自己：\n- 如果没有社会标签（如“学生”“员工”“父母”），我会是谁？\n- 如果没有过去的经验，我会如何定义自己？\n- 我的哪些特质是独一无二的？哪些是与他人共通的？\n\n---\n\n如果你愿意分享更多背景，我可以尝试提供更具体的思考方向。这个问题没有标准答案，但探索的过程本身可能比答案更有价值。 🌱'}], id='2025-09-18 04:34:01.520_69ca43', created_at='2025-09-18 04:34:01.520', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=833, time=8.6111, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 14.452 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
