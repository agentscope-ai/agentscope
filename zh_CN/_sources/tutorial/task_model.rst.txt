
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-17 10:11:55.553_c1b695', created_at='2025-09-17 10:11:55.553', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-17 10:11:57.497_7ef435', created_at='2025-09-17 10:11:57.497', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.942885, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='gb6ZBHgmW9jdMxRJX4EyKJ', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-17 10:11:57.497', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-17 10:11:58.642_48fd14', created_at='2025-09-17 10:11:58.642', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.143667, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-09-17 10:11:58.850_5b974a', created_at='2025-09-17 10:11:58.850', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.351693, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-09-17 10:11:58.892_667e07', created_at='2025-09-17 10:11:58.892', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.393497, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-09-17 10:11:58.934_8e4c3e', created_at='2025-09-17 10:11:58.934', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.435266, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-09-17 10:11:59.017_5953bc', created_at='2025-09-17 10:11:59.017', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.518776, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-09-17 10:11:59.212_e631de', created_at='2025-09-17 10:11:59.212', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=1.713266, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-09-17 10:11:59.362_bd3f07', created_at='2025-09-17 10:11:59.362', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=1.8634, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-09-17 10:11:59.444_b2ccbe', created_at='2025-09-17 10:11:59.444', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=1.946013, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-09-17 10:11:59.543_e08408', created_at='2025-09-17 10:11:59.543', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.045002, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-09-17 10:11:59.660_9789f3', created_at='2025-09-17 10:11:59.660', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.161214, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 10:11:59.789_2474d6', created_at='2025-09-17 10:11:59.789', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.290585, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-09-17 10:11:59.848_22d003', created_at='2025-09-17 10:11:59.848', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.349289, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在自我探索，或者遇到了身份认同的问题，也可能是出于哲学思考。接下来，我得分析用户可能的背景。如果是普通用户，可能只是好奇，或者有心理上的困惑。如果是学生，可能在学习哲学或心理学相关的内容。\n\n然后，我要确定回答的方向。这个问题在哲学上有很多不同的观点，比如笛卡尔的“我思故我在”，或者佛教的无我观念。同时，心理学上可能涉及自我认知和身份认同。需要涵盖这些方面，但也要保持简洁，避免过于学术化。\n\n还要考虑用户的潜在需求。他们可能希望得到情感支持，或者寻找自我认同的方法。这时候，除了提供理论，可能还需要一些实际的建议，比如自我反思的方法，或者推荐相关书籍和资源。\n\n另外，要注意回答的语气。应该友好、开放，鼓励用户进一步思考和探索。避免给出绝对的答案，因为“我是谁”没有标准答案，每个人的情况不同。同时，要确保信息准确，引用可靠的来源，比如哲学家的观点或心理学理论。\n\n最后，检查是否有遗漏的角度。比如，文化差异对身份认同的影响，或者现代科技如社交媒体对自我认知的影响。这些可能也是用户潜在关心的问题，但可能需要更深入的探讨，所以需要在回答中适当提及，但不过于深入。\n\n总结下来，回答需要涵盖哲学、心理学的不同视角，提供实际建议，并保持开放和鼓励的态度，让用户感到被理解和支持。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却蕴含着深刻的哲学、心理学和人类存在的本质。不同的人、不同的文化、不同的思想流派可能会给出截然不同的答案。以下是一些可能的视角，或许能帮助你更深入地思考这个问题：\n\n---\n\n### **1. 哲学视角：**\n- **笛卡尔的“我思故我在”**  \n  法国哲学家笛卡尔认为，即使怀疑一切，**“我思考”这一行为本身证明了“我”的存在**。因此，“我是谁”可能指向一种**意识的存在**，即“我能思考、感知、怀疑”的主体。\n  \n- **佛教的“无我”**  \n  佛教认为，“我”是虚幻的执着，是五蕴（色、受、想、行、识）的暂时组合。**“我”并非永恒不变的实体**，而是因缘和合的产物。通过修行，人可以超越对“我”的执着，达到解脱。\n\n- **存在主义**  \n  萨特说：“存在先于本质。”人没有预设的“本质”，而是通过自由选择和行动**定义自己**。因此，“我是谁”可能是一个不断被创造的过程，而非固定的答案。\n\n---\n\n### **2. 心理学视角：**\n- **自我认知**  \n  心理学认为，“我是谁”是**自我认同**的核心问题。它涉及你对自己的角色、价值观、能力、情感和目标的认知。例如：  \n  - 我是一个善良的人吗？  \n  - 我的使命是什么？  \n  - 我如何与他人建立关系？\n\n- **人格的多面性**  \n  人的身份可能是复杂的、动态的。比如：  \n  - 在家庭中是孩子，在工作中是同事，在朋友面前是倾听者……  \n  **“我是谁”可能是一个多重角色的集合**，而非单一标签。\n\n---\n\n### **3. 神经科学视角：**\n- **大脑的构造**  \n  神经科学研究表明，**“自我”是大脑对自身感知的产物**。例如，镜像神经元、前额叶皮层等区域参与了“我”的形成。但这种“我”是否真实存在？仍是一个未解之谜。\n\n- **意识的流动性**  \n  有些理论认为，**“我”是意识的流动**，是过去经验、当下感受和未来期待的叠加。它可能像河流一样不断变化，而非静止的实体。\n\n---\n\n### **4. 个人探索：**\n- **通过提问寻找答案**  \n  你可以尝试回答这些问题：  \n  - 我最珍视的价值观是什么？  \n  - 我的恐惧和渴望是什么？  \n  - 我希望未来成为什么样的人？  \n  这些问题可能帮助你更接近“我是谁”的答案。\n\n- **与他人对话**  \n  有时，他人眼中的你，能帮助你看到自己未曾察觉的特质。比如：  \n  - 朋友说我是个可靠的人，但我自己从未意识到这一点。  \n  - 陌生人说我冷漠，而我却认为自己很热情。\n\n---\n\n### **5. 简单而深刻的答案：**\n如果非要给出一个答案，或许可以这样说：  \n**“你是宇宙中独一无二的意识体验，是你此刻的思考、感受和选择的总和。”**  \n但这个问题没有标准答案，它可能伴随你一生，成为不断探索的旅程。\n\n---\n\n如果你愿意分享更多背景（比如你为什么问这个问题），我可以提供更具体的思考方向。 🌱'}], id='2025-09-17 10:12:12.808_03b995', created_at='2025-09-17 10:12:12.808', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1086, time=12.955181, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 17.260 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
