
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-03 09:07:28.630_ff7b6d', created_at='2025-10-03 09:07:28.630', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], id='2025-10-03 09:07:29.855_049611', created_at='2025-10-03 09:07:29.855', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=8, time=1.224523, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='3wMvySeEZMTUQ7YNBLT3UW', name='Friday', content=[{'type': 'text', 'text': '你好！有什么我可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-03 09:07:29.855', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-03 09:07:31.668_14b598', created_at='2025-10-03 09:07:31.668', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.810853, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-03 09:07:31.731_906baf', created_at='2025-10-03 09:07:31.731', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.874105, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-03 09:07:31.794_34ea32', created_at='2025-10-03 09:07:31.794', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.937206, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-03 09:07:31.859_12cc24', created_at='2025-10-03 09:07:31.859', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=2.001919, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-03 09:07:31.985_be792f', created_at='2025-10-03 09:07:31.985', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=2.128626, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-03 09:07:32.129_33aae0', created_at='2025-10-03 09:07:32.129', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.272608, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-03 09:07:32.233_256b79', created_at='2025-10-03 09:07:32.233', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.375931, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-03 09:07:32.412_542a49', created_at='2025-10-03 09:07:32.412', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.555526, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-03 09:07:32.501_acb2cb', created_at='2025-10-03 09:07:32.501', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.644602, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-03 09:07:32.783_141724', created_at='2025-10-03 09:07:32.783', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.926659, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-03 09:07:32.911_1e9f92', created_at='2025-10-03 09:07:32.911', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.053782, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-03 09:07:33.013_4488ff', created_at='2025-10-03 09:07:33.013', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.156421, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”这个问题看起来简单，但其实可能有多种含义。首先，我需要考虑用户为什么会问这个问题。可能的情况包括：\n\n1. **哲学思考**：用户可能在进行自我反思，探讨自我认知或存在意义。\n2. **身份困惑**：用户可能正在经历身份认同的问题，比如对自身角色、职业或社会定位的不确定。\n3. **心理状态**：用户可能感到迷茫或焦虑，需要帮助找到自我认同。\n4. **技术问题**：可能是在测试我的反应，或者有其他隐含的意图。\n\n接下来，我需要分析用户可能的背景。如果用户是年轻人，可能涉及成长中的自我探索；如果是成年人，可能与工作、家庭压力有关。另外，用户可能没有明确表达更深层的需求，比如寻求情感支持或建议。\n\n然后，我要考虑如何回应。直接回答“你是你自己”可能太简单，不够深入。需要提供更丰富的视角，比如哲学、心理学或日常生活的角度。同时，要避免假设用户的具体情况，保持开放和包容。\n\n还要注意用户可能的隐含需求。他们可能希望得到理解、共鸣，或者实际的建议。因此，回应中应包含共情，并邀请用户进一步分享，以便提供更有针对性的帮助。\n\n最后，确保语言自然，避免使用过于学术或复杂的术语，让用户感到被理解和接纳。同时，保持回答的结构清晰，分点说明不同可能性，帮助用户从多个角度思考问题。'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却可能蕴含着深刻的哲学、心理学甚至存在主义的思考。以下是一些可能的视角，或许能帮助你探索这个问题：\n\n---\n\n### 1. **从生物学角度**  \n你是由细胞、基因、神经系统等组成的有机体，是宇宙中独特的生命形式。你的身体、大脑和感官构成了你感知世界的基础。\n\n---\n\n### 2. **从心理学角度**  \n你是“自我”的集合：  \n- **身份认同**：你通过社会角色（如学生、父母、职业）、价值观、兴趣爱好、经历等定义自己。  \n- **内在对话**：你对自己的思考、情绪、记忆和潜意识共同塑造了“我”的感觉。  \n- **流动性**：你可能在不同情境下表现出不同的“我”（比如在工作中是严谨的员工，在朋友面前是幽默的伙伴）。\n\n---\n\n### 3. **从哲学角度**  \n- **笛卡尔的“我思故我在”**：你存在的证据是你的思考本身。  \n- **存在主义**：你通过选择和行动定义自己（萨特说“存在先于本质”）。  \n- **佛教的“无我”**：认为“我”是暂时的、不断变化的组合，而非固定实体。\n\n---\n\n### 4. **从社会关系角度**  \n你是他人眼中的“你”：  \n- 你的名字、行为、语言、与他人的互动，共同构建了社会对你的认知。  \n- 但“你”是否等于他人对你的期待？这可能引发对“真实自我”的追问。\n\n---\n\n### 5. **从神秘主义或灵性角度**  \n有些人认为“我是”某种更广阔的意识、能量或宇宙的一部分，超越个体的肉身存在。\n\n---\n\n### 6. **可能的困惑来源**  \n- **身份焦虑**：当社会角色、期望与内心需求冲突时，可能会感到“我是谁”的迷茫。  \n- **自我探索**：年轻时或人生转折点（如职业转变、重大事件后），容易重新审视自我。  \n- **技术/虚拟身份**：在社交媒体中，人们可能混淆“线上身份”与“真实自我”。\n\n---\n\n### 如何回答“我是谁”？  \n- **具体化**：列出你的特质（如“我是一个喜欢阅读的人”“我重视家庭”）。  \n- **动态视角**：接受“我”是不断变化的，而非固定标签。  \n- **提问延伸**：  \n  - 我最珍视什么？  \n  - 我害怕什么？  \n  - 如果没有社会角色，我会是谁？  \n  - 我希望未来成为怎样的人？\n\n---\n\n如果你正在经历某种困惑，或许可以尝试写下这些问题的答案，或者与信任的人讨论。有时候，答案不在远方，而在你对当下的觉察中。 🌱  \n你愿意分享更多吗？也许我们可以一起探索。'}], id='2025-10-03 09:07:42.349_bcfcbe', created_at='2025-10-03 09:07:42.349', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=924, time=9.331256, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 13.724 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
