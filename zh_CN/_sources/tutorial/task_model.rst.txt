
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

.. note:: 兼容 OpenAI API 的模型（例如 vLLM 部署的模型），推荐使用 ``OpenAIChatModel``，并通过 ``client_args={"base_url": "http://your-api-endpoint"}`` 参数指定 API 端点。例如：

    .. code-block:: python

        OpenAIChatModel(client_args={"base_url": "http://localhost:8000/v1"})

.. note:: 模型的行为参数（如温度、最大长度等）可以通过 ``generate_kwargs`` 参数在构造函数中提前设定。例如：

    .. code-block:: python

        OpenAIChatModel(generate_kwargs={"temperature": 0.3, "max_tokens": 1000})

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 80-105

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-10-22 12:31:54.336_59dc39', created_at='2025-10-22 12:31:54.336', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 106-107

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 107-132

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-10-22 12:31:55.723_ca2501', created_at='2025-10-22 12:31:55.723', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.385557, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='TAkcqdb8E7voXYW6niwqQW', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-10-22 12:31:55.723', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 133-140

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 140-170

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-10-22 12:31:56.897_ec3c16', created_at='2025-10-22 12:31:56.897', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.172863, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n'}], id='2025-10-22 12:31:57.084_0a8f16', created_at='2025-10-22 12:31:57.084', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=2, time=1.35953, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3'}], id='2025-10-22 12:31:57.167_d3bce3', created_at='2025-10-22 12:31:57.167', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=5, time=1.4429, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n'}], id='2025-10-22 12:31:57.249_1e6e92', created_at='2025-10-22 12:31:57.249', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=8, time=1.52499, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n'}], id='2025-10-22 12:31:57.558_4a133f', created_at='2025-10-22 12:31:57.558', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=14, time=1.833484, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10'}], id='2025-10-22 12:31:57.801_0da469', created_at='2025-10-22 12:31:57.801', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=20, time=2.076987, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12'}], id='2025-10-22 12:31:57.964_ae4e0d', created_at='2025-10-22 12:31:57.964', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=26, time=2.240288, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14'}], id='2025-10-22 12:31:58.133_2fdc98', created_at='2025-10-22 12:31:58.133', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=32, time=2.408922, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16'}], id='2025-10-22 12:31:58.359_5de623', created_at='2025-10-22 12:31:58.359', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=38, time=2.634562, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18'}], id='2025-10-22 12:31:58.516_e61ee2', created_at='2025-10-22 12:31:58.516', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=44, time=2.791836, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-22 12:31:58.709_6120fd', created_at='2025-10-22 12:31:58.709', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.984575, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20'}], id='2025-10-22 12:31:58.827_21ab84', created_at='2025-10-22 12:31:58.827', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=3.103032, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 171-175

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 175-200

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实挺深奥的。首先，我需要考虑用户为什么会问这个问题。可能是在思考自我身份，或者对存在感到困惑。也有可能是在测试我的能力，或者想进行哲学探讨。\n\n接下来，我得分析这个问题的不同层面。从心理学角度，自我认知是每个人都在不断探索的过程。用户可能正在经历自我怀疑，或者想要更深入了解自己。从哲学角度看，这个问题涉及本体论和意识的本质，比如笛卡尔的“我思故我在”。\n\n然后，我需要考虑用户可能的背景。如果是年轻人，可能是在寻找人生方向；如果是成年人，可能在面对生活挑战时寻求自我确认。也有可能用户有心理困扰，需要支持。\n\n还要注意用户的潜在需求。他们可能希望得到情感支持，或者寻求具体的建议。也有可能他们想通过这个问题引发更深入的对话，了解AI如何处理哲学问题。\n\n另外，要避免给出过于笼统或哲学化的回答，可能需要结合实际例子，帮助用户从不同角度理解自己。同时，要保持同理心，让用户感到被理解和支持。\n\n最后，确保回答既全面又不过于复杂，让用户能够根据自己的情况找到共鸣。可能需要分点回答，涵盖心理学、哲学、日常实践等方面，同时鼓励用户进一步探索自己的身份。\n'}, {'type': 'text', 'text': '“我是谁？”这个问题看似简单，却触及人类存在的核心。它可能源于对自我身份的探索、对生命意义的思考，或是对现实与虚幻的困惑。以下是一些可能的视角，或许能为你提供一些启发：\n\n---\n\n### 1. **从心理学角度：自我认知的动态过程**\n   - **身份的多维性**：你可能是“学生”“朋友”“工作者”“梦想家”……这些角色共同构成了你，但它们并非固定不变。你的身份会随着环境、经历和成长而变化。\n   - **内在与外在的矛盾**：你可能在他人眼中是“理性”的，但内心却充满感性；或在社会期待中扮演“成功者”，却对自身价值产生怀疑。这种矛盾恰恰说明“我是谁”是一个持续探索的过程。\n   - **心理学中的“自我”**：心理学家认为，自我由“自我概念”（你对自己的认知）和“自我体验”（你对自身的情感）组成。它像一面镜子，但镜子本身也在不断被重塑。\n\n---\n\n### 2. **从哲学角度：存在的本质追问**\n   - **笛卡尔的“我思故我在”**：即使怀疑一切，怀疑本身证明了“我”的存在。你的思考、疑问本身，就是你存在的证据。\n   - **佛教的“无我”**：佛教认为，“我”是五蕴（色、受、想、行、识）的暂时聚合，没有永恒不变的实体。这或许能帮你跳出对“固定身份”的执着。\n   - **存在主义的自由**：萨特说“存在先于本质”，你并非被定义的“谁”，而是通过选择和行动不断创造自己的意义。\n\n---\n\n### 3. **从日常实践角度：通过行动定义自己**\n   - **你做的选择**：你每天的决定——比如是否帮助他人、坚持梦想、面对困难——都在塑造你的“身份”。一个“勇敢的人”不是天生的，而是通过一次次选择成为的。\n   - **你关心的事物**：你热爱什么？恐惧什么？这些情绪和兴趣可能比标签更能揭示你的本质。比如，你可能是一个“喜欢深夜独处的诗人”，而不仅仅是“上班族”。\n   - **与他人的关系**：你如何与他人互动？你是否在意他人的看法？这些关系中的反应，往往暴露了你潜意识中的自我认知。\n\n---\n\n### 4. **从科学角度：生物学与意识的交织**\n   - **身体与基因**：你的DNA决定了你的生理特征，但基因只是“可能性”的清单，而非命运的剧本。\n   - **大脑的构造**：神经科学发现，大脑的神经元连接不断变化（神经可塑性），这意味着你的思维、记忆和性格并非固定不变。\n   - **意识的谜题**：科学家尚未完全解释“意识”如何从物质中产生，而你的“自我感”或许正是这一谜题的核心。\n\n---\n\n### 5. **如果这个问题源于困惑：**\n   - **允许自己不确定**：没有人能完全定义自己。承认“我不知道我是谁”本身，就是一种深刻的自我接纳。\n   - **提问本身就是答案的一部分**：你的疑问说明你正在思考，而思考是超越“我是谁”的起点。\n   - **尝试记录与反思**：写下你最珍视的价值观、最深的恐惧、最渴望的改变，这些可能帮你拼凑出更清晰的“我”。\n\n---\n\n### 最后：\n“我是谁？”没有标准答案，但它可以成为你探索生命的旅程。也许答案不在远方，而在你此刻的呼吸、感受和选择中。你不需要急于找到终点，只需继续提问，继续前行。 🌱\n\n如果你愿意分享更多背景，我可以尝试更具体地回应你的困惑。'}], id='2025-10-22 12:32:10.642_16543b', created_at='2025-10-22 12:32:10.642', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=1081, time=11.810518, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 201-209

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 209-230

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 231-236

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 16.310 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
