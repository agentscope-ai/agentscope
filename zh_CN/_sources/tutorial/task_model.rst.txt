
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/task_model.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_task_model.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_task_model.py:


.. _model:

模型
====================

在本教程中，我们介绍 AgentScope 中集成的模型 API、如何使用它们，以及如何集成新的模型 API。
AgentScope 目前支持的模型 API 和模型提供商包括：

.. list-table::
    :header-rows: 1

    * - API
      - 类
      - 兼容
      - 流式
      - 工具
      - 视觉
      - 推理
    * - OpenAI
      - ``OpenAIChatModel``
      - vLLM, DeepSeek
      - ✅
      - ✅
      - ✅
      - ✅
    * - DashScope
      - ``DashScopeChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Anthropic
      - ``AnthropicChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Gemini
      - ``GeminiChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅
    * - Ollama
      - ``OllamaChatModel``
      -
      - ✅
      - ✅
      - ✅
      - ✅

.. note:: 当使用 vLLM 时，您需要在部署时为不同模型配置相应的工具调用参数，例如 ``--enable-auto-tool-choice``、``--tool-call-parser`` 等参数。更多详情请参考 `vLLM 官方文档 <https://docs.vllm.ai/en/latest/features/tool_calling.html>`_。

为了提供统一的模型接口，上述所有类均被统一为：

- ``__call__`` 函数的前三个参数是 ``messages``，``tools`` 和 ``tool_choice``，分别是输入消息，工具函数的 JSON schema，以及工具选择的模式。
- 非流式返回时，返回类型是 ``ChatResponse`` 实例；流式返回时，返回的是 ``ChatResponse`` 的异步生成器。

.. note:: 不同的模型 API 在输入消息格式上有所不同，AgentScope 通过 formatter 模块处理消息的转换，请参考 :ref:`format`。

``ChatResponse`` 包含大模型生成的推理/文本/工具使用内容、身份、创建时间和使用信息。

.. GENERATED FROM PYTHON SOURCE LINES 68-93

.. code-block:: Python

    import asyncio
    import json
    import os

    from agentscope.message import TextBlock, ToolUseBlock, ThinkingBlock, Msg
    from agentscope.model import ChatResponse, DashScopeChatModel

    response = ChatResponse(
        content=[
            ThinkingBlock(
                type="thinking",
                thinking="我应该在 Google 上搜索 AgentScope。",
            ),
            TextBlock(type="text", text="我将在 Google 上搜索 AgentScope。"),
            ToolUseBlock(
                type="tool_use",
                id="642n298gjna",
                name="google_search",
                input={"query": "AgentScope"},
            ),
        ],
    )

    print(response)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    ChatResponse(content=[{'type': 'thinking', 'thinking': '我应该在 Google 上搜索 AgentScope。'}, {'type': 'text', 'text': '我将在 Google 上搜索 AgentScope。'}, {'type': 'tool_use', 'id': '642n298gjna', 'name': 'google_search', 'input': {'query': 'AgentScope'}}], id='2025-09-16 04:27:19.362_1ccc3a', created_at='2025-09-16 04:27:19.362', type='chat', usage=None, metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 94-95

以 ``DashScopeChatModel`` 为例，调用和返回结果如下：

.. GENERATED FROM PYTHON SOURCE LINES 95-120

.. code-block:: Python



    async def example_model_call() -> None:
        """使用 DashScopeChatModel 的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "你好！"},
            ],
        )

        # 您可以直接使用响应内容创建 ``Msg`` 对象
        msg_res = Msg("Friday", res.content, "assistant")

        print("LLM 返回结果:", res)
        print("作为 Msg 的响应:", msg_res)


    asyncio.run(example_model_call())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    LLM 返回结果: ChatResponse(content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], id='2025-09-16 04:27:20.707_2864bb', created_at='2025-09-16 04:27:20.707', type='chat', usage=ChatUsage(input_tokens=10, output_tokens=7, time=1.344214, type='chat'), metadata=None)
    作为 Msg 的响应: Msg(id='Ma3N6mhv29WV9jeUd3uKcp', name='Friday', content=[{'type': 'text', 'text': '你好！有什么可以帮助你的吗？'}], role='assistant', metadata=None, timestamp='2025-09-16 04:27:20.707', invocation_id='None')




.. GENERATED FROM PYTHON SOURCE LINES 121-128

流式返回
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
要启用流式返回，请在模型的构造函数中将 ``stream`` 参数设置为 ``True``。
流式返回中，``__call__`` 方法将返回一个 **异步生成器**，该生成器迭代返回 ``ChatResponse`` 实例。

.. note:: AgentScope 中的流式返回结果为 **累加式**，这意味着每个 chunk 中的内容包含所有之前的内容加上新生成的内容。


.. GENERATED FROM PYTHON SOURCE LINES 128-158

.. code-block:: Python



    async def example_streaming() -> None:
        """使用流式模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=True,
        )

        generator = await model(
            messages=[
                {
                    "role": "user",
                    "content": "从 1 数到 20，只报告数字，不要任何其他信息。",
                },
            ],
        )
        print("响应的类型:", type(generator))

        i = 0
        async for chunk in generator:
            print(f"块 {i}")
            print(f"\t类型: {type(chunk.content)}")
            print(f"\t{chunk}\n")
            i += 1


    asyncio.run(example_streaming())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    响应的类型: <class 'async_generator'>
    块 0
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1'}], id='2025-09-16 04:27:21.722_c67561', created_at='2025-09-16 04:27:21.722', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=1, time=1.013367, type='chat'), metadata=None)

    块 1
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 '}], id='2025-09-16 04:27:21.982_45c303', created_at='2025-09-16 04:27:21.982', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=4, time=1.272652, type='chat'), metadata=None)

    块 2
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4'}], id='2025-09-16 04:27:22.092_08b156', created_at='2025-09-16 04:27:22.092', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=7, time=1.382766, type='chat'), metadata=None)

    块 3
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 '}], id='2025-09-16 04:27:22.226_02f540', created_at='2025-09-16 04:27:22.226', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=10, time=1.516911, type='chat'), metadata=None)

    块 4
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 '}], id='2025-09-16 04:27:22.333_99f476', created_at='2025-09-16 04:27:22.333', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=16, time=1.623669, type='chat'), metadata=None)

    块 5
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 1'}], id='2025-09-16 04:27:22.403_dadcd0', created_at='2025-09-16 04:27:22.403', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=22, time=1.693914, type='chat'), metadata=None)

    块 6
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 1'}], id='2025-09-16 04:27:22.488_7bde11', created_at='2025-09-16 04:27:22.488', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=28, time=1.778789, type='chat'), metadata=None)

    块 7
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 1'}], id='2025-09-16 04:27:22.740_103f92', created_at='2025-09-16 04:27:22.740', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=34, time=2.031241, type='chat'), metadata=None)

    块 8
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 1'}], id='2025-09-16 04:27:22.850_3a7a09', created_at='2025-09-16 04:27:22.850', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=40, time=2.140883, type='chat'), metadata=None)

    块 9
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1'}], id='2025-09-16 04:27:23.032_e4fae5', created_at='2025-09-16 04:27:23.032', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=46, time=2.323452, type='chat'), metadata=None)

    块 10
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-16 04:27:23.388_84ff02', created_at='2025-09-16 04:27:23.388', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.679523, type='chat'), metadata=None)

    块 11
            类型: <class 'list'>
            ChatResponse(content=[{'type': 'text', 'text': '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20'}], id='2025-09-16 04:27:23.405_bd0290', created_at='2025-09-16 04:27:23.405', type='chat', usage=ChatUsage(input_tokens=26, output_tokens=50, time=2.695911, type='chat'), metadata=None)





.. GENERATED FROM PYTHON SOURCE LINES 159-163

推理模型
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
AgentScope 通过提供 ``ThinkingBlock`` 来支持推理模型。


.. GENERATED FROM PYTHON SOURCE LINES 163-188

.. code-block:: Python



    async def example_reasoning() -> None:
        """使用推理模型的示例。"""
        model = DashScopeChatModel(
            model_name="qwen-turbo",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            enable_thinking=True,
        )

        res = await model(
            messages=[
                {"role": "user", "content": "我是谁？"},
            ],
        )

        last_chunk = None
        async for chunk in res:
            last_chunk = chunk
        print("最终响应:")
        print(last_chunk)


    asyncio.run(example_reasoning())





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    最终响应:
    ChatResponse(content=[{'type': 'thinking', 'thinking': '好的，用户问“我是谁？”，这个问题看起来简单，但其实很深奥。首先，我需要理解用户为什么会问这个问题。可能的情况有很多种：用户可能在自我反思，或者感到困惑，甚至可能是在测试我的能力。也有可能用户正在经历某种身份危机，或者对自我认知有疑问。\n\n接下来，我要考虑如何回应。直接回答“你是你自己”可能太肤浅了，用户可能希望得到更深层次的探讨。可能需要从哲学、心理学或存在主义的角度来分析。比如，笛卡尔的“我思故我在”，或者佛教中的“无我”概念。同时，也要考虑到用户可能的背景，如果用户是年轻人，可能更倾向于心理学的解释；如果是哲学爱好者，可能更喜欢哲学角度的回答。\n\n另外，要注意用户可能没有明确表达的需求。比如，他们可能在寻找自我认同，或者想确认自己的存在意义。这时候，需要引导他们进行自我探索，而不是给出一个简单的答案。可能需要询问他们为什么会有这样的问题，或者提供一些思考方向，比如回顾过去的经历、价值观、兴趣爱好等。\n\n还要注意避免过于抽象或晦涩的解释，保持回答的易懂性。同时，要确保回答是积极的，鼓励用户自我探索，而不是让他们感到困惑或无助。可能需要结合一些实际的例子，或者建议他们进行自我反思练习。\n\n最后，检查是否有文化或语言上的敏感点，确保回答适合不同背景的用户。可能需要使用比喻或类比，帮助用户更好地理解抽象的概念。总之，这个问题需要一个平衡，既要有深度，又要易于理解，并且能够激发用户的思考。'}, {'type': 'text', 'text': '“我是谁？”是一个跨越哲学、心理学、宗教和科学的永恒命题。不同的人、不同的文化、不同的时代对此有不同的答案。以下是一些可能的视角，或许能帮你更深入地思考这个问题：\n\n---\n\n### **1. 从哲学角度看**\n- **笛卡尔的“我思故我在”**：法国哲学家笛卡尔认为，“我”是唯一不可怀疑的存在，因为即使怀疑一切，怀疑本身证明了“我”的存在。\n- **佛教的“无我”**：佛教认为“我”是五蕴（色、受、想、行、识）暂时聚合的假象，并非永恒不变的实体。\n- **存在主义**：萨特说“存在先于本质”，人通过选择和行动定义自己，而不是被预先设定的身份所束缚。\n\n---\n\n### **2. 从心理学角度看**\n- **自我认同**：心理学家埃里克森认为，人的一生都在探索“我是谁”的问题，尤其是在青少年时期，通过尝试不同的角色和价值观来构建自我。\n- **人格的多面性**：你可能在不同场合扮演不同角色（如学生、朋友、员工），但这些只是“我”的一部分，而非全部。\n- **内在的冲突与整合**：有时“我是谁”可能充满矛盾，比如理想中的自己与现实中的自己之间的差距，这需要通过自我接纳和成长来调和。\n\n---\n\n### **3. 从科学角度看**\n- **生物学视角**：从基因到细胞，你的身体由数十万亿个细胞组成，但“你”是否仅仅是这些物质的总和？科学尚未完全解答意识的本质。\n- **神经科学**：大脑的神经元活动可能与“自我感”相关，但意识如何从物理过程中涌现，仍是未解之谜。\n\n---\n\n### **4. 从个人体验出发**\n- **你的独特性**：你有独特的经历、情感、记忆和思维方式。这些共同构成了你无法被复制的“独特性”。\n- **动态变化**：你并非一成不变。随着年龄、环境、学习和反思，你可能会不断重新定义“我是谁”。\n- **提问本身的意义**：提出“我是谁”这个问题，或许已经说明你对自我有觉察，而这种觉察本身就是一种成长的开始。\n\n---\n\n### **5. 一些启发性的问题**\n如果想更具体地探索“我是谁”，可以尝试问自己：\n- 我最珍视的价值观是什么？\n- 我的哪些特质让我感到真实？\n- 如果没有社会角色（如职业、家庭身份），我会是什么？\n- 我的过去、现在和未来如何塑造了“我”？\n\n---\n\n### **最后**\n“我是谁”没有标准答案，它更像是一场持续的探索。或许答案不在于找到一个固定的定义，而在于接纳自己的复杂性，并在不断变化中保持对自我的觉察。你愿意和我一起聊聊你对这个问题的想法吗？ 😊'}], id='2025-09-16 04:27:35.295_c84151', created_at='2025-09-16 04:27:35.295', type='chat', usage=ChatUsage(input_tokens=11, output_tokens=961, time=11.88512, type='chat'), metadata=None)




.. GENERATED FROM PYTHON SOURCE LINES 189-197

工具 API
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
不同的模型提供商在工具 API 方面有所不同，例如工具 JSON schema、工具调用/响应格式。
为了提供统一的接口，AgentScope 通过以下方式解决了这个问题：

- 提供了统一的工具调用结构 block :ref:`ToolUseBlock <tool-block>` 和工具响应结构 :ref:`ToolResultBlock <tool-block>`。
- 在模型类的 ``__call__`` 方法中提供统一的工具接口 ``tools``，接受工具 JSON schema 列表，如下所示：


.. GENERATED FROM PYTHON SOURCE LINES 197-218

.. code-block:: Python


    json_schemas = [
        {
            "type": "function",
            "function": {
                "name": "google_search",
                "description": "在 Google 上搜索查询。",
                "parameters": {
                    "type": "object",
                    "properties": {
                        "query": {
                            "type": "string",
                            "description": "搜索查询。",
                        },
                    },
                    "required": ["query"],
                },
            },
        },
    ]








.. GENERATED FROM PYTHON SOURCE LINES 219-224

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- :ref:`message`
- :ref:`prompt`



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 15.938 seconds)


.. _sphx_glr_download_tutorial_task_model.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: task_model.ipynb <task_model.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: task_model.py <task_model.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: task_model.zip <task_model.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
