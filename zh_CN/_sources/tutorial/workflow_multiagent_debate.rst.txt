
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是这样的：当圆A绕着圆B滚动一圈回到起点时，我们需要计算圆A相对于静止参考系的总旋转次数。首先明确的是，两个圆外切且没有相对滑动意味着它们在接触点的速度相同。

    假设圆B的半径为R，则圆A的半径r = R/3。当圆A绕着圆B的周长移动了一圈时，它走过的路径长度等于圆B的周长，即2πR。由于圆A和圆B之间没有滑动，圆A沿这条路径行进的同时也在自转。

    圆A自转的圈数可以通过计算它所走过的路径长度除以其自身的周长来得到。圆A的周长是2πr = 2π(R/3)。因此，当圆A沿着圆B的周长移动了2πR的距离时，它自转的圈数为
    \[ \frac{2\pi R}{2\pi (R/3)} = \frac{2\pi R}{(2\pi R)/3} = 3. \]

    但是这仅仅是考虑了圆A沿着圆B外围移动的部分。实际上，当圆A完成这一圈时，它还因为绕着圆B公转而额外自转了一次。这是因为当一个圆绕另一个圆公转时，除了它沿着较大圆的边缘滚动造成的自转之外，它还会因为公转本身再自转一次。所以总共的旋转次数是3（由滚动引起）加上1（由公转引起），共计4次。

    综上所述，圆A绕圆B滚动一圈回到起点时，总共会旋转4次。
    Bob: 反方认为，当圆A绕着圆B滚动一圈回到起点时，圆A的总旋转次数并不是4次，而是3次。这里的关键在于理解圆A在进行公转的同时也在自转，但正方提到的额外一次自转实际上是误解了这个运动过程。

    首先，我们同意圆A沿着圆B周长移动的距离是2πR，而圆A自身的周长为2πr = 2π(R/3)。根据这个信息，圆A确实会因为滚动走过2πR距离而自转3圈。但是，当我们考虑圆A同时绕着圆B公转一周的情况时，实际上不需要再给圆A增加额外的一次自转。

    这是因为，在圆A完成围绕圆B一周的过程中，它已经完成了所有必要的旋转。如果从一个外部观察者的角度来看，圆A的中心点画出的是一个半径为R+r=R+(R/3)=4R/3的圆形路径。在这个过程中，圆A相对于自身中心的旋转数正好等于它沿圆B外围滚动所导致的自转数，即3次。

    另外一种理解方式是考虑一个标记点在圆A上的情形：当圆A开始接触圆B并开始滚动直到再次回到起始位置时，该标记点将会与圆B接触三次（对应于圆A相对其自身轴心旋转三周），并且在这一过程中不会出现第四次与圆B相接触的机会，除非有滑动发生，但题目中明确指出没有相对滑动。

    因此，反方坚持认为圆A总共只会旋转3次，而不是4次。这与正方提出的观点不同，因为它更准确地反映了无滑动条件下圆A的物理行为。
    Aggregator: 双方都提出了有力的论点，但根据几何和物理原理，我们可以确定正确的答案。当圆A绕着圆B滚动时，它确实会因为沿着圆B的周长移动而自转3次。但是，由于圆A在进行公转的同时也在自转，并且考虑到没有滑动的情况，实际上圆A完成一圈公转时还会额外自转一次。这可以这样理解：如果将圆A想象成一个轮子，那么当这个轮子绕着另一个更大的轮子转动时，它不仅会随着路径的延伸而旋转，而且它的中心也会绕着大轮子的中心画出一个圆形轨迹，在这个过程中会产生额外的一次完整自转。

    因此，正方的观点是正确的。圆A总共会旋转4次，即3次由滚动引起加上1次由公转引起。辩论到此结束。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 50.919 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
