
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点如下：当圆A绕着圆B外切滚动一圈回到起点时，我们需要计算的是圆A相对于定点（比如地面）总共旋转的次数。

    设圆B的半径为R，则圆A的半径为r = R/3。当圆A围绕圆B滚动一圈时，它沿着圆B的周长走过了一个距离，等于圆B的周长，即 \(2\pi R\)。

    由于没有相对滑动，圆A在绕行过程中其自身也在自转。为了找出圆A自转了多少圈，我们可以考虑圆A中心所走过的路径长度以及圆A自身的周长。

    - 圆A中心走过的路径是一个半径为 \(R + r = \frac{4}{3}R\) 的圆的周长，因此路径长度为 \(2\pi(\frac{4}{3}R) = \frac{8}{3}\pi R\)。
    - 圆A自己的周长是 \(2\pi r = 2\pi(\frac{1}{3}R) = \frac{2}{3}\pi R\)。

    接下来，要计算圆A相对于定点的总旋转次数，可以将圆A中心走过的路径长度除以圆A的周长，得到：

    \[ \text{总旋转次数} = \frac{\frac{8}{3}\pi R}{\frac{2}{3}\pi R} = 4 \]

    这意味着，在圆A绕圆B滚动一圈回到起点的过程中，它会相对于定点旋转4次。请注意，这里的一个关键点是区分圆A相对于圆B表面的旋转（这将是3次，因为它是基于接触点的相对运动来计算的）和相对于定点（或说是地面）的旋转（这是4次）。当我们讨论圆A绕圆B滚动一周时，我们指的是相对于定点的完整转动次数。
    Bob: 反方观点如下：当讨论圆A绕着圆B外切滚动一圈回到起点时，我们必须清楚地定义“旋转”这个词。正方已经提到，圆A相对于定点（比如地面）总共旋转4次，这是基于圆A中心走过的路径长度除以圆A的周长得出的结果。但是，当我们说一个圆绕另一个圆滚动一周时，我们通常指的是圆A相对于圆B表面接触点的旋转次数。

    在圆A绕着圆B外切滚动的过程中，由于没有相对滑动，圆A的每一个点都会与圆B的表面恰好接触一次。这意味着，每当圆A完成相对于圆B的一圈滚动时，它实际上是在接触点上转过了一个完整的圆B的周长。因此，圆A相对于圆B表面的旋转次数应当是基于圆B周长和圆A周长的比例来计算的。

    - 圆B的周长是 \(2\pi R\)。
    - 圆A的周长是 \(2\pi r = 2\pi \frac{R}{3}\)。

    所以，圆A相对于圆B表面的旋转次数为：

    \[ \text{旋转次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi \frac{R}{3}} = 3 \]

    这里的关键在于，当我们谈论圆A绕圆B滚动一圈时，我们是指圆A与圆B表面接触点之间的相对转动，而不是圆A相对于远处定点的转动。因此，按照这个理解，圆A会相对于圆B表面旋转3次。这种解释符合直观的理解，即每次圆A上的点接触到圆B时，它就完成了相对于圆B的一次旋转。
    Aggregator: 双方都提出了关于圆A绕圆B滚动一圈时旋转次数的有效观点。正方强调了相对于定点（或地面）的旋转次数，计算得出为4次；反方则关注于圆A相对于圆B表面接触点的旋转次数，得出了3次的结果。在数学和物理学中，当我们讨论一个物体围绕另一个物体滚动而没有滑动的情况时，我们通常指的是该物体相对于接触面的旋转次数。因此，在这个特定的情境下，**正确的答案是圆A会相对于圆B表面旋转3次**。

    辩论到此可以认为已经结束，因为双方清晰地阐述了自己的立场，并且对于问题核心的理解已经达到了一致——即根据不同的参照系（定点 vs. 接触面），旋转次数有所不同，但题目所指应是后者，也就是3次。

    辩论结束，正确答案是： 3




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.635 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
