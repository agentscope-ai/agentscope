
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转4次。我们可以通过计算来验证这个观点。

    设圆B的半径为R，则圆A的半径为r = R/3。当圆A绕圆B外切滚动一周时，它沿着圆B周长的路径长度等于圆B的周长，即2πR。由于圆A没有相对滑动，它在接触点处也必须移动相同的距离，这相当于圆A自身周长的若干倍。圆A的周长是2πr = 2π(R/3)。

    要计算圆A自转了多少圈，我们需要用圆A沿圆B边缘走过的总距离除以圆A自己的周长：

    \[ \text{圆A自转圈数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi (R/3)} = \frac{2\pi R}{(2\pi R)/3} = 3 \]

    但是，这里有一个额外的考虑因素。当圆A绕圆B公转一圈时，它不仅需要旋转覆盖圆B周长的距离（也就是上面计算的3圈），而且它还需要额外旋转一次，因为圆A的中心点围绕圆B做了一次完整的圆周运动。因此，实际上圆A总共旋转了4次。
    Alice: 综上所述，正方的观点是：当圆A绕圆B外切滚动并回到起始位置时，圆A会完成4次自转。
    Bob: 我作为反方，不同意正方的观点。我认为当圆A绕着圆B外切滚动并回到起始位置时，圆A不会完成4次自转。为了说明我的观点，我们需要考虑圆A和圆B的半径比以及它们之间如何影响圆A的旋转次数。

    给定圆A的半径是圆B半径的1/3，我们可以用 r 表示圆A的半径，用 3r 表示圆B的半径。当圆A围绕圆B无滑动地滚动一圈时，它会沿着一个以 4r 为半径的圆形路径移动（因为圆心到圆心的距离是 r + 3r = 4r）。

    圆A沿这个路径走过的总距离等于大圆的周长，即 \(2\pi \times 4r = 8\pi r\)。而圆A自身的周长是 \(2\pi r\)。因此，圆A需要旋转的次数等于它沿大圆路径行进的距离除以自身周长：

    \[ \text{旋转次数} = \frac{\text{总距离}}{\text{圆A周长}} = \frac{8\pi r}{2\pi r} = 4 \]

    然而，这仅仅计算了圆A在外部路径上的滚动。实际上，当我们说“绕着圆B滚动一圈”时，我们还需要考虑到圆A不仅在外部路径上滚动，而且随着圆B的形状进行公转。这意味着除了上述的4次旋转之外，圆A还会额外旋转一次来完成整个环绕运动。这是因为当圆A回到它的起始点时，它相对于初始方向已经旋转了一整圈。

    综上所述，圆A总共会旋转5次：4次是因为它沿着大圆路径滚动，还有1次是因为它完成了围绕圆B的一圈公转。所以，圆A绕圆B外切滚动一圈回到起点时，实际会完成5次自转。
    Aggregator: 谢谢两位辩论者的精彩讨论。根据你们的论述，圆A绕着圆B外切滚动并回到起始位置时，确实需要考虑它沿着大圆路径上的滚动以及围绕圆B的公转。

    正方指出圆A会完成4次自转，而反方则更进一步地解释了除了这4次旋转之外，还有一次额外的旋转是由于圆A完成了整个环绕运动，即随着圆心移动一圈所带来的额外旋转。因此，圆A总共会进行5次旋转。

    现在，我宣布辩论结束，并且正确答案是：当圆A绕圆B外切滚动一圈回到起点时，圆A总共会旋转5次。

    辩论结束，正确答案是： 5次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 45.736 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
