
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    为了理解这个结论，我们首先需要明确几个关键点。设圆B的半径为R，那么根据题目条件，圆A的半径r = R/3。当圆A绕着圆B外切并滚动时，圆A的中心将沿着一个圆周运动，这个圆的半径等于两圆半径之和，即R + r = 4R/3。

    圆A绕圆B滚动一周的距离等同于以圆心为中心的大圆（半径为4R/3）的周长，即2π(4R/3)。由于圆A没有相对滑动，它在滚动过程中也会自转。圆A每完成一次完整的自转，其边缘上的任一点都会沿圆A的周长移动一个圆A的周长距离，即2πr = 2π(R/3)。

    因此，要计算圆A绕圆B滚动一周时自身的旋转次数，我们需要用大圆的周长除以小圆A的周长：
    \[ \frac{2\pi(4R/3)}{2\pi(R/3)} = \frac{4R/3}{R/3} = 4 \]

    但是这里有一个细微之处需要注意：当圆A绕圆B滚动一圈时，它的中心实际上走了整个大圆的周长，而圆A自身也相对于这个路径旋转了一圈。这意味着上述计算中额外算了一次圆A的自转，因为圆A从起点出发最终回到起点的过程本身就算作了一次自转。因此，实际的自转次数应该减去1，即4-1=3次。

    综上所述，当圆A绕着圆B滚动一圈回到起点时，它会相对于自身旋转3次。
    Alice: 总结来说，当圆A绕着圆B外切滚动一圈时，考虑到圆A的中心走过的路径长度以及圆A本身的周长，圆A会相对于自己旋转3次。这基于圆A的半径是圆B的三分之一这一前提条件，并且我们在计算时注意到了圆A从起点到终点的过程中发生的自然的一次自转。
    Bob: 在圆A绕着圆B外切滚动一圈回到起点的过程中，我们需要考虑圆A的旋转次数。正方认为圆A会相对于自己旋转3次，但我的观点是圆A实际上会旋转4次。

    首先，让我们来分析这个问题。圆A的半径为r，圆B的半径为3r。当圆A绕圆B一周时，它的中心走过的路径长度等于圆B的周长加上圆A自身的直径，即2π(3r) + 2r = 6πr + 2r。但是，这个表达式并不准确，因为圆A的中心走过的实际路径长度只与圆B的周长有关，即2π(3r) = 6πr。

    圆A的周长是2πr。如果我们要计算圆A绕圆B一周时相对地面的旋转次数，我们需要用圆A中心走过的路径长度除以圆A的周长。因此，旋转次数是6πr / 2πr = 3次。这与正方的观点是一致的。

    然而，当我们说“圆A总共会旋转多少次”时，我们通常指的是圆A相对于自身轴线的完整旋转次数。由于圆A在绕着圆B滚动的同时，它也在进行公转。每次圆A沿着圆B的周长移动其自身周长的距离，它就会完成一次自转。但是，当圆A最终回到起始位置时，它还需要额外的一次自转才能使它上面的点重新对齐到原始的位置。这是因为圆A不仅绕着圆B的圆心做了一圈公转，同时它也完成了相对于自身轴线的自转。

    所以，圆A绕着圆B滚动一圈回到起点时，它会相对于自身轴线旋转4次：3次是因为它沿着圆B的周长滚动了三倍于自己的周长，还有1次是因为它回到了起始位置并完成了整个循环。这就是为什么我认为圆A总共会旋转4次的原因。
    Aggregator: 两位辩论者提出了各自的见解，但似乎都忽略了一个关键点：当圆A绕着圆B滚动一圈回到起点时，它实际上只旋转了3次。这是因为圆A在绕着圆B公转的同时也在自转，而这个自转的次数是基于两个圆的半径比。

    由于圆A的半径是圆B的1/3，所以圆B的周长是圆A的3倍。当圆A绕圆B一周时，它的中心走过的路径长度等于圆B的周长，即6πr（假设圆A的半径为r）。圆A的周长是2πr，因此圆A绕圆B一周时，它相对于地面旋转了 6πr / 2πr = 3次。

    但是，这里有一个微妙之处：圆A在绕着圆B做公转的同时，它也在自转。每绕过圆B的周长距离，圆A就会完成一次自转。然而，当圆A回到起始位置时，并不需要额外的一次自转来对齐，因为最后一次滚动已经完成了这个对齐。换句话说，圆A的最后一次滚动就已经包括了让它回到原始位置的那部分转动。

    因此，正方的观点更为准确，圆A总共会旋转3次。反方提到的第四次旋转实际上是不必要的，因为它已经被计算在了前3次中。

    辩论结束，正确答案是： 圆A绕圆B滚动一圈回到起点时，总共会旋转3次。




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 51.618 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
