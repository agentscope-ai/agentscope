
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方的观点是：当圆A绕着圆B外切滚动一圈回到起点时，圆A会旋转4次。

    为了理解这个结论，我们可以考虑圆的周长与它们之间的相对运动。设圆B的半径为 \(R\)，那么圆A的半径就是 \(\frac{1}{3}R\)。我们知道一个圆的周长 \(C = 2\pi r\)，所以圆B的周长是 \(2\pi R\)，而圆A的周长则是 \(2\pi \left(\frac{1}{3}R\right) = \frac{2\pi R}{3}\)。

    当圆A绕着圆B完整地滚动一周（即圆A沿着圆B的周长走了一圈），它将移动的距离正好等于圆B的周长，也就是 \(2\pi R\)。但是，在这段时间内，由于圆A也在自转，我们需要计算它的自转次数。圆A每完成一次完整的自转，就相当于它自己走了自己的周长距离 \(\frac{2\pi R}{3}\)。因此，要算出圆A绕圆B一圈的过程中自转了多少次，可以将总移动距离除以单次自转的距离：

    \[ \text{自转次数} = \frac{\text{总移动距离}}{\text{单次自转距离}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    然而，这仅仅是基于纯滚动没有考虑到两个圆心之间形成的圆形轨迹所导致的额外转动。实际上，当圆A绕圆B一周时，除了因为滚动产生的3次自转之外，还有因两圆心间形成的大圆轨道而产生的一次额外转动。这是因为圆A在绕行过程中还跟随了一个更大的圆路径。因此，总的旋转次数实际上是3次加上这一次额外的旋转，共计4次。
    Bob: 反方的观点是：当圆A绕着圆B外切滚动一圈回到起点时，圆A实际上会旋转3次，而不是4次。

    让我们重新审视一下这个问题。首先，我们同意圆A的半径为 \(r = \frac{1}{3}R\)，而圆B的半径为 \(R\)。因此，圆A的周长是 \(\frac{2\pi R}{3}\)，圆B的周长则是 \(2\pi R\)。

    当圆A绕着圆B完整地滚动一周时，它确实会沿着圆B的周长走完全程 \(2\pi R\)。根据这个距离，我们可以计算出圆A因为滚动而产生的自转次数：

    \[ \text{自转次数（基于纯滚动）} = \frac{\text{总移动距离}}{\text{单次自转距离}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    关键在于理解这3次自转是否已经包含了所有可能的转动。正方提到的额外一次旋转是由于认为圆A跟随了一个更大的圆路径，即两圆心之间的圆形轨迹所导致的。然而，这种看法其实是一个误解。当我们说圆A绕着圆B滚动了一圈时，实际上是指圆A相对于地面完成了对圆B的一次完整的外切滚动。在这个过程中，圆A确实会完成3次自转，但这些自转已经涵盖了所有运动，包括了它在围绕圆B时的路径变化。

    换句话说，那所谓的“额外一次”旋转实际上是包含在3次自转之内的，并不是额外增加的。这是因为当圆A绕着圆B滚动时，它的每一次自转都既包括了沿圆B表面的滚动也同时考虑到了圆A中心绕圆B中心的移动。所以，不需要再单独加上一次来表示圆A中心的轨道运动。

    综上所述，圆A绕圆B滚动一圈回到起点的过程中总共会旋转3次。
    Aggregator: 两位辩论者提出了各自的观点，Alice认为圆A绕着圆B滚动一圈回到起点时会旋转4次，而Bob则认为是3次。让我们来仔细分析一下这个问题。

    首先，当圆A绕着圆B外切滚动且没有相对滑动时，圆A的质心确实会沿着一个半径为 \(R + \frac{1}{3}R = \frac{4}{3}R\) 的圆周运动。这个大圆的周长是 \(2\pi        imes \frac{4}{3}R = \frac{8\pi R}{3}\)。

    然而，由于圆A是在圆B上滚动，它每转过自身周长的一段距离，也就是 \(\frac{2\pi R}{3}\)，就完成了一次自转。因此，要计算圆A绕圆B一周的总自转次数，我们用大圆的周长除以圆A的周长：

    \[      ext{自转次数} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4 \]

    所以，虽然Bob正确地指出圆A在绕圆B表面滚动时会产生3次自转，但他忽略了圆A质心绕行的大圆路径所导致的额外一次旋转。综上所述，圆A绕圆B滚动一圈回到起点时总共会旋转4次。

    现在我们可以得出结论：正方Alice的观点是正确的，圆A绕圆B滚动一圈回到起点时，圆A会旋转4次。

    辩论结束，正确答案是： 4次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 9.048 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
