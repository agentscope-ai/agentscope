
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    理由如下：设圆B的半径为R，则圆A的半径为r=R/3。当圆A绕着圆B外切且没有相对滑动地滚动一圈时，它沿着一个圆周运动，这个圆周的半径是两圆半径之和，即R + r = R + R/3 = 4R/3。因此，圆A的质心走过的路径长度等于这个大圆的周长，即2π * (4R/3) = 8πR/3。

    与此同时，圆A本身也在旋转。因为圆A与圆B接触点没有相对滑动，所以圆A边缘上的某一点相对于圆B表面移动的距离等于圆A自转的弧长。为了完成上述提到的路径长度（即8πR/3），圆A需要旋转一定的圈数。我们知道，圆A每旋转一次，其边缘上的某一点相对于圆心移动的距离就是圆A的周长，即2πr = 2π(R/3) = 2πR/3。

    要计算圆A完成整个路径所需的旋转次数，我们用总路径长度除以单次旋转的弧长：
    \[ \text{旋转次数} = \frac{\text{总路径长度}}{\text{单次旋转弧长}} = \frac{8\pi R / 3}{2\pi R / 3} = 4 \]

    但是这里有一个关键点需要注意，当我们说“圆A绕圆B滚动一圈”时，实际上是指圆A的质心围绕圆B中心旋转了一圈。在这个过程中，除了由于绕圆B运动而产生的旋转之外，圆A还会有额外的一次自转。这是因为每当圆A的质心沿圆B外围完成一周时，为了保持接触点无滑动，圆A必须额外旋转一次来补偿这一过程中的转动效应。因此，在考虑了这额外的一次旋转后，圆A总共会旋转4-1=3次。
    Bob: 反方认为，当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转4次，而不是3次。让我解释一下为什么。

    首先，我们同意正方提到的数学计算：圆A的半径为r=R/3（其中R是圆B的半径），那么圆A绕着圆B外切且没有相对滑动地滚动一圈时，其质心走过的路径长度是大圆周长8πR/3。同样我们也认同，为了完成这个路径长度，圆A需要旋转一定的圈数，即总路径长度除以单次旋转弧长，这给出了 \(\frac{8\pi R / 3}{2\pi R / 3} = 4\) 次。

    这里的关键在于理解“额外的一次自转”是否应该被减去。正方提出，由于圆A绕圆B运动一周时要保持接触点无滑动，所以会有一次额外的自转。然而，这种额外的自转实际上已经包含在了上述计算出的4次旋转之中。这是因为，当圆A绕着圆B滚动时，它不仅因为绕行圆B而旋转，同时也在自身轴上旋转以保持与圆B表面的无滑动接触。因此，这4次旋转包含了所有类型的旋转——既包括了跟随圆B外围的旋转，也包括了因保持接触点无滑动所需的自转。

    换句话说，当我们说圆A绕圆B滚动一圈时，实际上是在描述一个完整的循环过程，在这个过程中圆A的所有旋转都已经被考虑进去了。不需要再从总数中减去所谓的“额外”自转，因为它并不是独立于其它旋转之外的。

    综上所述，基于正确的物理和几何理解，圆A绕圆B滚动一圈回到起点时，圆A总共会旋转4次。
    Aggregator: 双方已经充分阐述了各自的观点。正方认为圆A绕圆B滚动一圈回到起点时会旋转3次，而反方则认为是4次。实际上，当一个小圆绕着一个大圆外切且没有相对滑动地滚动一圈回到起点时，它不仅会因为绕行大圆而旋转，还会因为保持接触点无滑动而额外自转一次。

    根据几何关系和物理原理，我们可以得出结论：小圆（圆A）绕大圆（圆B）一周的过程中，其质心走过的路径长度为两圆半径之和构成的大圆周长。同时，为了保证接触点无相对滑动，小圆还需完成额外的一整圈自转。因此，正确的答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 13.265 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
