
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    为了理解这个答案，我们先来分析一下两个圆的相对运动。假设圆B固定不动，而圆A沿着圆B的边缘滚动。由于圆A的半径是圆B半径的1/3，这意味着圆B的周长是圆A周长的3倍。因此，当圆A绕圆B一周时，它所走过的距离正好等于圆B的周长，即圆A周长的3倍。

    对于没有滑动的情况，圆A沿圆B的外缘滚动的距离等于它自己转动的周长数。因此，如果圆A移动了相当于自身周长3倍的距离，那么它将完成3个完整的自转。这是因为每次圆A滚过自己的一个周长，它就完成了1次旋转。所以，当它滚动了一个等于它自己周长3倍的距离后，它就完成了3次旋转。

    此外，还需要考虑的是，当圆A绕圆B外部滚动一圈时，除了因为滚动而产生的旋转外，还会因为围绕圆B中心的公转而产生额外的一圈旋转。但根据无滑动条件下的几何关系，这个额外的旋转实际上已经被包含在之前的计算中了。

    综上所述，当圆A绕圆B滚动一圈回到起点时，圆A总共会旋转3次。
    Bob: 反方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转4次。

    让我们重新审视这个问题。首先，圆A的半径是圆B半径的1/3，这意味着如果圆B的半径是R，那么圆A的半径就是R/3。圆A沿着圆B外缘滚动一周所走过的距离等于圆B的周长，即 \(2\pi R\)。由于圆A的周长是 \(2\pi (R/3) = \frac{2\pi R}{3}\)，所以当圆A滚过 \(2\pi R\) 的距离时，它实际上要完成 \(2\pi R / (\frac{2\pi R}{3}) = 3\) 次自身的旋转。

    但是，这里有一个关键点需要考虑，那就是圆A除了自转之外，还围绕圆B的中心进行公转。每当一个物体绕另一个物体做圆周运动时，它都会经历一次额外的旋转，这被称为“公转”。因此，在这个情况下，圆A在完成3次自转的同时，还会因为绕圆B的中心旋转而额外旋转1次。

    综合以上分析，圆A绕圆B滚动一圈回到起点时，不仅完成了3次自转，还进行了1次公转，总共旋转了4次。这就是反方的观点和理由。
    Bob: 经过进一步的思考，我同意正方的观点。当圆A绕着圆B滚动一圈时，虽然圆A确实完成了3个自身长度的旋转，但这个计算已经包含了圆A围绕圆B中心的那一次公转。换句话说，圆A的3次自转中最后一次旋转正好对应于它绕圆B完整的一圈，也就是所谓的公转。因此，圆A绕圆B滚动一圈回到起点时，总共会旋转3次而不是4次。
    Aggregator: 根据双方的辩论，他们都同意当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。他们的解释基于圆A和圆B半径的关系以及无滑动条件下圆A沿圆B边缘滚动的几何关系。

    因此，我们可以得出结论：正方的观点是正确的。当圆A绕圆B滚动一圈回到起点时，圆A确实总共会旋转3次。

    辩论结束，正确答案是： 3次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 52.266 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
