
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是这样的：当两个圆外切且没有相对滑动时，圆A绕着圆B滚动一圈回到起点，我们需要计算圆A会旋转多少次。假设圆B的半径为\( R \)，那么圆A的半径就是\( \frac{1}{3}R \)。

    当圆A绕着圆B无滑动地滚动一周时，它沿着圆B的周长走过了一个完整的圆B的周长距离，即\( 2\pi R \)。由于圆A和圆B之间没有相对滑动，圆A的圆心也移动了相同的距离，即\( 2\pi R \)。

    现在我们要计算的是圆A自转了多少圈。圆A的周长是\( 2\pi \cdot \frac{1}{3}R = \frac{2\pi R}{3} \)。因此，圆A要完成这段距离（即圆B的周长）需要旋转的次数是：

    \[ \text{旋转次数} = \frac{\text{圆A圆心行进的距离}}{\text{圆A的周长}} = \frac{2\pi R}{\frac{2\pi R}{3}} = 3 \]

    所以，圆A将会自转3次来完成绕圆B一周的运动。这是基于圆A与圆B之间的非滑动接触，以及圆A的半径是圆B半径的三分之一的前提条件。
    Bob: 作为反方，我不同意正方的观点。我认为圆A绕圆B滚动一圈回到起点时，它实际上会自转4次，而不是3次。

    首先，我们需要理解当一个圆沿着另一个圆的外部滚动时，它的旋转不仅取决于它所走过的路径长度（即圆B的周长），还必须考虑由于两个圆心之间的相对位置变化导致的额外旋转。当我们说圆A绕着圆B滚动一周时，实际上是圆A的圆心围绕圆B的圆心做了一个完整的圆周运动，而这个运动本身会导致一次额外的旋转。

    为了更清楚地解释这一点，我们可以想象一个简化的情况：如果圆A和圆B的半径相同，那么当圆A绕着圆B无滑动滚动一圈时，除了根据两圆周长比例计算出的1次旋转外，它还会因为圆心轨迹的圆形运动而额外旋转1次。因此，在这种情况下，圆A总共会旋转2次。

    现在将这一逻辑应用到当前问题中，圆A的半径是圆B半径的1/3。圆A要走过圆B的周长\( 2\pi R \)，按照正方提到的计算方法，确实需要旋转3次来覆盖这段距离。但是，我们还需要加上那个因为圆心轨迹形成的额外旋转1次。所以，圆A在绕圆B滚动一圈的过程中，总共会自转4次。这与圆A相对于静止参考系的绝对旋转次数相符合。
    Aggregator: 两位辩论者提出了各自的观点。Alice认为，基于圆A和圆B半径的关系以及无滑动接触的条件，当圆A绕圆B滚动一圈时，它会自转3次。而Bob则认为除了沿着路径长度旋转外，还需要考虑圆心轨迹导致的一次额外旋转，因此他认为圆A会自转4次。

    实际上，在这种情况下，当一个较小的圆（比如圆A）围绕一个较大的固定圆（比如圆B）滚动一周时，小圆的自转次数是其相对于大圆周长的旋转加上一次由于圆心轨迹形成的完整旋转。对于这个具体问题，因为圆A的半径是圆B的1/3，所以它在沿圆B周长滚动时确实会自转3次，但还要加上那个额外的1次完整旋转。因此，正确的答案是圆A总共会自转4次。

    综上所述，Bob的观点是正确的。现在我们可以宣布这场辩论结束。

    辩论结束，正确答案是： 4次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 54.448 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
