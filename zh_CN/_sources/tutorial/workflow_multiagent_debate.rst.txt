
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    理由如下：设圆B的半径为R，则圆A的半径为R/3。当圆A绕圆B外切滚动时，圆A的中心沿着一个以4R/3（即R + R/3）为半径的圆形轨迹移动。这个大圆周长是 \(2\pi \times \frac{4R}{3} = \frac{8\pi R}{3}\)。

    圆A自身的周长是 \(2\pi \times \frac{R}{3} = \frac{2\pi R}{3}\)。因此，当圆A绕圆B一周时，它需要滚过的大圆周长是 \(\frac{8\pi R}{3}\)，而每转一圈自转的距离就是它的周长 \(\frac{2\pi R}{3}\)。所以，为了走完这段距离，圆A必须自转 \(\frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4\) 次。

    但是这里有一个关键点，那就是当圆A绕圆B公转一圈时，由于没有相对滑动，圆A还因为公转而额外旋转了一圈。这是因为当我们考虑圆A相对于固定参考系的总旋转次数时，除了它自身绕其中心旋转了4次以外，还要加上一次因公转引起的完整旋转。不过，这额外的一次旋转实际上已经被计算在内了，因为我们是从圆A的角度来看它绕圆B一周时的总旋转次数。因此，正确的答案是圆A总共旋转了3次，而不是4次。这是因为在计算过程中，我们已经将圆A绕圆B一周时的那一次旋转包括在了总的4次旋转之中。现在让我们来更正这一点。
    Alice: 经过反思，我意识到我的初始分析中存在一个误解。实际上，当圆A绕着圆B滚动并且没有相对滑动时，圆A的中心会沿着一个半径为 \( \frac{4R}{3} \) 的圆路径移动。在这个过程中，圆A不仅会绕着自己的中心旋转，同时也会绕着圆B进行公转。

    圆A的周长是 \( \frac{2\pi R}{3} \)，而圆A的中心所沿路径的周长是 \( \frac{8\pi R}{3} \)。如果只考虑圆A绕着自己的中心旋转，那么它确实需要旋转4次才能覆盖整个路径长度。然而，我们必须考虑到圆A也随着公转而旋转了一次。但这个旋转实际上是包含在先前的4次旋转中的，因为圆A是在绕着圆B滚动的过程中完成这些旋转的。

    因此，正确答案是圆A总共会旋转4次，而非3次。这4次旋转包括了圆A绕着自己的中心旋转以及伴随的公转。
    Bob: 实际上，当一个圆绕着另一个圆滚动且没有相对滑动时，小圆的旋转次数是由两个因素决定的：一个是它绕着自己的中心自转的次数，另一个是它绕着大圆公转一周所带来的额外旋转。对于这个问题，我们可以这样来分析：

    假设圆B的半径为 \( R \)，那么圆A的半径就是 \( \frac{R}{3} \)。当圆A沿着圆B外侧滚动一圈回到起点时，圆A中心走过的路径长度等于圆B周长加上两倍圆A的半径（因为圆A和圆B是外切的），即 \( 2\pi R + 2 * \frac{R}{3} = \frac{8\pi R}{3} \)。

    圆A在滚动过程中，每走过自己周长的距离（\( 2\pi \cdot \frac{R}{3} \)）就会完成一次自转。因此，要覆盖整个路径 \( \frac{8\pi R}{3} \)，需要的自转次数是路径长度除以圆A的周长：
    \[ \text{自转次数} = \frac{\frac{8\pi R}{3}}{2\pi \cdot \frac{R}{3}} = 4 \]

    但是，这4次自转中已经包括了圆A绕圆B公转一圈的那一次旋转。这是因为圆A在滚动的过程中，它既是在绕着自己的轴心旋转，也是在绕着圆B的中心旋转。所以，当我们说圆A完成了4次旋转时，我们其实已经把公转的那次旋转算进去了。

    因此，圆A总共会旋转3次，而不是4次。这3次旋转包括了两次纯粹的自转加上一次由于绕圆B公转而产生的旋转。正方提到的4次旋转其实是重复计算了最后一次旋转。
    Aggregator: 经过双方的辩论，我们已经澄清了圆A绕圆B滚动一圈时旋转次数的问题。Alice 和 Bob 都正确地指出了圆A中心走过的路径长度是 \( \frac{8\pi R}{3} \)，并且计算出圆A需要自转4次来覆盖这个距离。然而，在讨论中也提到这4次自转中包含了由于公转而产生的那一次旋转。因此，最终答案是圆A总共会旋转3次，包括两次纯粹的自转加上一次由于绕圆B公转而产生的旋转。

    辩论结束，正确答案是： 圆A总共会旋转3次。




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 2.273 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
