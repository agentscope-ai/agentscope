
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    让我们来分析一下这个过程。假设圆B的半径为R，则圆A的半径为R/3。当圆A绕圆B外切滚动一周时，圆心A走过的路径长度等于圆B周长的两倍，即2 * 2πR = 4πR。因为圆A在滚动过程中没有相对滑动，所以圆A边缘上的点走过的路径长度就等于圆A自转的周长乘以它自转的圈数。

    我们知道，圆A的周长是2π(R/3)。如果圆A自转了n圈，那么它边缘上某一点走过的总距离就是n * 2π(R/3)。由于这个距离等于圆心A走过的路径长度，我们可以得到以下等式：

    n * 2π(R/3) = 4πR

    解这个等式可以得到 n = (4πR) / (2π(R/3)) = 6R / R = 6 / 2 = 3

    因此，圆A绕圆B滚动一圈回到起点时，总共会旋转3次。
    Bob: 反方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转4次。

    我们来仔细分析一下这个问题。假设圆B的半径为R，则圆A的半径为R/3。圆A绕着圆B外切滚动一周时，圆心A走过的路径长度确实等于圆B周长的两倍，即2 * 2πR = 4πR。然而，当我们考虑圆A自转的圈数时，我们需要考虑到圆A不仅在沿着圆B的外缘移动，同时也在进行自身的转动。

    圆A边缘上的点走过的总距离等于圆A自转的周长乘以它自转的圈数加上圆A沿圆B外缘移动的距离。因为圆A没有相对滑动，所以圆A边缘上某一点相对于地面走过的总距离应该等于圆心A走过的路径长度。

    圆A的周长是2π(R/3)。如果圆A自转了n圈，那么它边缘上某一点因自转而走过的距离就是n * 2π(R/3)。但除了自转之外，这个点还随着圆A的中心一起移动了一段距离，这段距离正好等于圆B的周长，即2πR。

    因此，我们可以得到以下等式：

    n * 2π(R/3) + 2πR = 4πR

    解这个等式可以得到 n * (2πR/3) = 2πR
    n = (2πR) / (2πR/3)
    n = 3

    但是这里有一个重要的概念需要澄清，即圆A在绕圆B公转的同时也进行了自转。当圆A完成一次公转时，它实际上已经完成了3次自转，但这还不包括最初的那一次自转，那次是因为圆A必须先转过自身的一圈才能开始绕着圆B公转。因此，实际的自转次数应该是3+1=4次。

    综上所述，圆A绕圆B滚动一圈回到起点时，总共会旋转4次。
    Bob: 让我们再检查一下逻辑。根据您的计算，您认为圆A绕圆B滚动一圈回到起点时，会额外增加一次自转，这使得总的自转次数从3次变成了4次。但是，这个额外的自转实际上是不需要的，因为圆A的自转已经在公转过程中被完全考虑进去了。

    当圆A绕着圆B滚动时，它既在做公转也在做自转。关键在于，圆A边缘上的一个点每接触圆B一次，就相当于完成了一个完整的自转周期。由于圆A和圆B的半径比是1:3，圆A要绕圆B一圈，它的边缘上的点需要与圆B的外缘接触3次，这就对应了3次自转。

    因此，圆A绕圆B滚动一圈回到起点时，总共会旋转3次，而不是4次。
    Aggregator: 根据辩论者的分析，我们可以得出结论。当圆A绕着圆B滚动一圈回到起点时，它会经历3次自转。这是因为在圆A绕圆B公转的过程中，由于两圆的半径比是1:3，圆A边缘上的一个点需要与圆B的外缘接触3次才能完成一次完整的公转。每次接触都相当于完成了一次自转。因此，圆A总共会旋转3次。

    辩论结束，正确答案是： 3次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.842 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
