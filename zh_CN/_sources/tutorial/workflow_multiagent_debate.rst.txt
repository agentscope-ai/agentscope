
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当半径为圆B三分之一的圆A绕着圆B外切滚动一圈回到起点时，圆A总共会旋转4次。

    解释如下：设圆B的半径为R，则圆A的半径为r = R/3。圆A绕圆B滚动一周的距离等于圆B的周长，即2πR。由于圆A在滚动过程中没有相对滑动，因此它沿着圆B滚动一周的同时也在自身轴上旋转。

    圆A每旋转一周，它沿直线移动的距离等于其自身的周长，即2πr。为了计算圆A绕圆B滚动一周时自身旋转了多少圈，我们可以将圆A滚动的总距离除以其自身的周长：

    \[ \text{旋转次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi r} = \frac{R}{r} = \frac{R}{R/3} = 3 \]

    然而，这里有一个额外的旋转需要考虑。当圆A绕圆B滚动一周时，除了因为滚动而产生的旋转外，还必须考虑到圆A相对于圆B中心的公转。这个公转相当于圆A又额外旋转了一圈。因此，圆A实际上总共旋转了3 + 1 = 4次。这就是正方的观点。
    Bob: 反方观点是：当半径为圆B三分之一的圆A绕着圆B外切滚动一圈回到起点时，圆A总共会旋转3次。

    解释如下：设圆B的半径为R，则圆A的半径为r = R/3。圆A绕圆B外切滚动一周的距离确实是圆B的周长，即2πR。由于没有相对滑动，圆A在滚动过程中也会围绕自己的中心轴旋转。

    按照正方的说法，圆A每完成一次自转就沿直线移动了自身的周长，即2πr。因此，圆A绕圆B滚动一周时，它自身旋转的次数计算如下：

    \[ \text{旋转次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi r} = \frac{R}{r} = \frac{R}{R/3} = 3 \]

    然而，这里有一个关键点需要澄清。当我们说圆A绕圆B滚动一周时，我们实际上是在描述圆A沿着圆B表面的路径。这个路径是一个圆环形，其长度等于圆B的周长。在这个过程中，圆A不仅在滚动，而且也在绕着圆B做公转运动。但这种公转并不意味着圆A会额外增加一个完整的自转。因为当圆A完成整个圆环路径回到起始位置时，它的朝向与起始时刻相同，这表明在整个过程中，它恰好完成了3个完整的自转，而没有额外的一圈。

    因此，根据上述分析，圆A绕圆B外切滚动一圈回到起点时，总共只会旋转3次，并非4次。这就是反方的观点。
    Bob: 总结一下我的论点：当圆A绕着圆B滚动并回到起点时，它确实会绕圆B公转一圈，但是这个公转并不会导致圆A额外进行一次自转。这是因为圆A在滚动过程中的自转已经包含了跟随圆B外围轨迹所需的转动量。所以，圆A总共只会有3次自转。
    Aggregator: 两位辩论者提出了关于圆A绕圆B外切滚动一圈回到起点时旋转次数的不同观点。Alice认为圆A会旋转4次，包括3次自转加上1次额外的公转。而Bob则认为圆A总共只会有3次自转，公转并不导致额外的自转。

    从物理学和几何学的角度来看，当一个圆沿着另一个圆的外部滚动且没有相对滑动时，小圆完成一次围绕大圆的公转过程中，确实会发生一种称为‘卷绕数’的现象。卷绕数是指小圆在大圆周围滚动时，其接触点相对于大圆中心所走过的路径长度与小圆周长的比例。在这个特定情况下，由于圆A的半径是圆B的1/3，因此卷绕数为3，意味着圆A自身会旋转3圈以覆盖圆B的周长。然而，还必须考虑的是，圆A在跟随圆B轨迹的同时，也在进行着一次完整的公转。这额外的一次旋转是因为圆A的质心也跟着移动了一圈。

    综上所述，正确答案是圆A会旋转4次，其中3次是因为它需要覆盖圆B的周长，还有1次是因为它绕着圆B的中心公转了一圈。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 59.568 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
