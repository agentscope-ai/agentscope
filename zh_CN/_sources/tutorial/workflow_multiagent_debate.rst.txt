
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是这样的：当两个圆外切且没有相对滑动时，小圆（圆A）绕大圆（圆B）的外部滚动一圈回到起点。给定条件为圆A的半径是圆B半径的1/3，这意味着如果圆B的半径为R，则圆A的半径为R/3。

    当圆A围绕圆B滚动一圈时，它走过的路径长度等于圆B的周长，即2πR。由于圆A在滚动过程中没有打滑，那么这个距离也等同于圆A自身边缘点相对于圆心移动的距离。因此，我们需要计算出在这个距离中圆A自转了多少圈。

    圆A每旋转一周，它的边缘点会沿其自身的周长移动一个圆A的周长距离，也就是2π(R/3)。所以，圆A总共旋转的次数可以通过将圆B的周长除以圆A的周长来得出：

    \[ \text{旋转次数} = \frac{2\pi R}{2\pi (R/3)} = \frac{R}{R/3} = 3 \]

    但这里有一个需要注意的地方，就是当圆A绕着圆B外部滚动一圈回到原位时，除了因为沿着圆B的周长滚动而产生的自转之外，还会额外多出一次完整的旋转。这是因为，当你想象一个小圆从某个位置开始绕大圆一圈又回到了原来的位置，为了对齐起始和结束时的接触点，它实际上完成了一次额外的旋转。

    因此，综合考虑上述两种情况，圆A总共会旋转4次。这是正方的观点。
    Alice: 综上所述，正方认为当圆A绕圆B滚动一圈并且回到起点时，考虑到圆A与圆B之间的相对运动以及额外的一次完整旋转，圆A总共会旋转4次。
    Bob: 感谢正方的观点。不过，根据圆周运动和相对转动的基本原理来看，当两个圆外切且没有相对滑动时，较小的圆A绕着较大的圆B滚动一圈回到起点的过程中，旋转次数并非4次。

    我们来具体分析一下这个问题。假设圆B的半径是R，那么圆A的半径就是R/3。由于两圆相切并且无滑动，圆A在绕着圆B一周的过程中，它的中心走过的路径是一个半径为R+R/3=4R/3的大圆。这个大圆的周长是 \(2\pi \times \frac{4R}{3} = \frac{8\pi R}{3}\)。

    同时，圆A自身的周长是 \(2\pi \times \frac{R}{3} = \frac{2\pi R}{3}\)。因此，当圆A的中心沿着那个大圆路径移动了整个周长的距离，即 \(\frac{8\pi R}{3}\)，它相对于自己的中心会自转若干圈。要计算出它自转了多少圈，我们可以用大圆的周长除以圆A的周长：

    \[ \text{旋转次数} = \frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = 4 \]

    然而，这仅仅考虑了圆A沿着大圆路径移动时的自转。事实上，当我们说“圆A绕圆B滚动一圈”，我们已经隐含地考虑到了一次完整的额外旋转，因为当圆A回到起点时，它不仅沿大圆路径自转了4次，而且还要加上从开始到结束这一整圈的完整旋转。

    但请注意，这里的"绕圆B滚动一圈"其实已经包括了上述计算中的4次自转。所以，如果我们直接将这个过程理解为一个整体，则圆A实际上只经历了3次相对于其自身中心的额外自转，再加上最初与圆B接触点对齐的一次，总共3次。

    综上所述，反方认为当圆A绕圆B滚动一圈并且回到起点时，圆A总共会旋转3次。
    Aggregator: 双方都提出了有力的观点，但让我们来澄清一下这个问题。当圆A绕着圆B滚动时，它的中心确实沿着一个半径为4R/3的圆路径移动。这个路径的长度是8πR/3。圆A的周长是2πR/3，因此如果仅考虑沿这条路径移动的旋转次数，我们得到的是(8πR/3) / (2πR/3) = 4次。

    但是，这里有一个关键点需要注意：当我们说圆A绕圆B'一圈'时，实际上是指圆A的接触点与圆B上的某一点重新对齐，这意味着圆A除了沿着路径自转外，还必须额外完成一次完整的旋转才能使最初的接触点再次对齐。因此，在圆A沿着大圆路径自转4次的基础上，再加上这最后一次为了重新对齐的旋转，总共就是5次。

    所以，正确的答案是圆A会旋转5次。现在辩论已经结束，我们可以宣布结果了。

    辩论结束，正确答案是： 5次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (1 minutes 21.274 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
