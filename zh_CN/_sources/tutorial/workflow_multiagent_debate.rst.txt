
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当一个圆绕着另一个圆滚动而没有相对滑动时，其旋转次数可以通过计算两个圆的周长比来确定。给定条件是圆A的半径是圆B半径的1/3，因此圆A的周长也是圆B周长的1/3。

    当圆A绕圆B外切并滚动一圈回到起点时，圆A实际上会走过等于圆B周长的距离。由于圆A的周长只是圆B的1/3，那么圆A在走过这段距离的过程中，将会自转3次以覆盖整个圆B的周长。这是因为每次圆A完成一次自身旋转，它就前进了一个自己周长的距离，而要走完圆B的周长，它需要旋转3次自己的周长距离。

    综上所述，当圆A绕圆B滚动一圈回到起点时，圆A总共会旋转3次。
    Alice: 根据题目描述，圆A的半径为圆B的1/3，因此圆A的周长也是圆B周长的1/3。当圆A绕着圆B滚动一圈时，圆A沿着圆B的周长走了相当于圆B周长的距离。因为圆A每旋转一次，就会沿路径移动一个自身的周长长度，所以为了走过圆B的整个周长，圆A必须旋转3次（即3 * 圆A的周长 = 圆B的周长）。因此，我的观点是圆A绕圆B滚动一圈回到起点时，圆A总共会旋转3次。
    Bob: 我理解Alice的观点，但是当一个圆绕着另一个圆滚动时，我们必须考虑到不仅有线性位移还有旋转。在这个情况下，圆A绕圆B外切滚动一圈回到起点，它会经历两个独立的运动：

    1. 圆A沿着圆B的周长做直线移动。
    2. 由于没有相对滑动，圆A也会围绕自己的中心旋转。

    根据题目给定条件，圆A的半径是圆B的1/3。这意味着如果圆B的半径为R，则圆A的半径为r=R/3。当圆A绕圆B一周时，它沿圆B的周长（即2πR）移动了整个距离。

    在没有相对滑动的情况下，圆A要覆盖这个距离，确实需要转过相当于圆B周长的距离。因为圆A的周长是2πr = 2π(R/3) = (2/3)πR，所以为了走过圆B的周长2πR，圆A需要旋转(2πR) / ((2/3)πR) = 3次来完成沿路径的移动。

    然而，同时我们还要考虑圆A自身轴心的旋转。当圆A绕着圆B滚动时，它还必须以圆B为中心进行一次额外的完整自旋。这是因为当圆A回到它的起始位置时，它实际上已经完成了绕着圆B中心的一个完整的圈。因此，除了上述3次旋转之外，还有额外的1次自旋。

    综上所述，圆A总共会旋转4次才能绕着圆B滚动一圈并且回到起点。其中3次是由于沿着圆B周长滚动所需，而另外1次是因为它自己绕着圆B中心旋转了一圈。
    Aggregator: 两位辩论者提出了非常详尽的观点。Alice 认为圆A绕着圆B滚动一圈回到起点时，由于圆A的周长是圆B周长的1/3，因此需要旋转3次来覆盖圆B的整个周长。而Bob则在此基础上进一步指出，除了这3次旋转外，圆A还会因为绕着圆B中心进行一次额外的完整自旋而多出1次旋转。根据几何学原理和运动分析，Bob所提出的4次旋转是正确的。

    当一个较小的圆沿着一个较大的圆无滑动地滚动一圈并返回原点时，它不仅会沿着大圆的边缘旋转（即按照大圆与小圆周长比），同时也会围绕大圆的中心旋转一次。所以，圆A总共会旋转4次才能绕着圆B滚动一圈并且回到起点。

    辩论结束，正确答案是： 4次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 59.121 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
