
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。这是因为圆A的半径是圆B的1/3，所以圆B的周长是圆A周长的3倍。因此，当圆A沿圆B外侧无滑动地滚动一周时，它需要旋转3圈才能覆盖圆B的整个周长。这与两个齿轮啮合转动时的情况相似，较小的齿轮（圆A）围绕较大的齿轮（圆B）转动时，小齿轮将转得更快以保持接触点的速度一致。
    Alice: 基于上述分析，我的结论是：当圆A绕圆B滚动一圈回到起点时，圆A总共会旋转3次。
    Bob: 我认为圆A绕圆B滚动一圈回到起点时，圆A总共会旋转4次。让我们来仔细分析一下原因。

    首先，圆A的半径是圆B半径的1/3。这意味着圆B的周长是圆A周长的3倍。当圆A绕着圆B无滑动地滚动时，它不仅会因为绕圆B公转而旋转，还会由于自身滚动而自转。

    为了计算圆A总的旋转次数，我们需要考虑两个因素：一个是圆A绕圆B公转一周所经历的距离，另一个是圆A在这段距离中自己旋转了多少圈。

    圆A绕圆B公转一周，相当于沿着圆B的周长走了整整一圈。既然圆B的周长是圆A周长的3倍，那么在没有相对滑动的情况下，圆A要完成这个过程，需要沿着自己的周长滚动3次。但是，这里有一个额外的因素要考虑，那就是圆A在绕圆B公转的同时也在进行自转。每当圆A沿着圆B周长前进一个自身的周长，它就完成了1次自转。因此，除了上述的3次自转外，还应该加上圆A绕圆B公转一周时的那一次自转。

    所以综合起来，圆A绕圆B公转一周的过程中，一共会自转4次。这包括了沿圆B周长滚动产生的3次自转，以及绕圆B公转一周所带来的1次自转。这就是为什么我的结论是圆A总共会旋转4次的原因。
    Aggregator: 两位辩论者提出了不同的观点。Alice认为圆A绕圆B滚动一圈回到起点时，会旋转3次；而Bob则认为是4次，并且详细解释了他所理解的公转和自转的过程。

    为了澄清这个问题，让我们来仔细分析一下：

    当一个半径为r的小圆（圆A）沿着另一个半径为R的大圆（圆B）外切滚动一周而没有滑动时，小圆不仅会绕着大圆公转，还会因为接触点的变化而自转。根据题目，我们有 R = 3r。

    - 当小圆绕大圆公转一周时，它走过的路径长度等于大圆的周长，即2πR。
    - 小圆在无滑动的情况下，其自身也会随着路径的长度进行自转，因此小圆自转的圈数应当等于路径长度除以小圆的周长，即 (2πR) / (2πr) = R/r = 3。

    但是，当我们考虑小圆绕大圆公转一周时，实际上还有一个额外的旋转，这是由于小圆在绕大圆移动的同时也在进行自转。这个额外的旋转就是公转带来的1次旋转。

    因此，小圆A总共会旋转的次数是自转的圈数加上公转带来的额外旋转，也就是3 + 1 = 4次。

    基于以上分析，正确的答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 49.047 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
