
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方认为，当一个圆绕着另一个圆外切滚动时，其旋转次数不仅取决于两圆的相对大小，还与它们之间的几何关系有关。在本例中，给定条件是圆A的半径（r_A）为圆B的半径（r_B）的1/3，即 \( r_A = \frac{1}{3}r_B \)。

    当圆A绕圆B滚动一圈回到起点时，它沿着圆B的周长走过了距离等于圆B的周长 \( 2\pi r_B \)。由于没有相对滑动，圆A的边缘也走过同样的弧长。为了计算圆A旋转了多少次，我们需要将这个总弧长除以圆A自身的周长 \( 2\pi r_A \)。

    因此，圆A旋转的次数 \( N \) 可以通过下面的公式得出：
    \[ N = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi r_B}{2\pi r_A} = \frac{r_B}{r_A} \]

    代入 \( r_A = \frac{1}{3}r_B \)，我们得到：
    \[ N = \frac{r_B}{\frac{1}{3}r_B} = 3 \]

    所以正方的观点是：圆A绕圆B滚动一圈回到起点时，会旋转3次。
    Bob: 实际上，在考虑圆A绕着圆B外切滚动时，我们还需要注意到一个关键点：当圆A完成一圈回到起点的时候，它不仅会因为沿着圆B周长移动而旋转，还会因为围绕圆B的中心旋转而额外增加一次旋转。这是因为圆A在滚动的同时也在绕着另一个圆心做公转。

    正方计算了圆A沿圆B周长走过的距离，得出圆A自转3次。然而，由于圆A同时还在绕圆B的中心进行公转，这就意味着圆A实际上还要再多转一次才能与初始位置完全对齐。因此，总的旋转次数应该是4次。

    这个额外的旋转可以通过想象一个更简单的例子来理解：如果一个人站在原地并面向北方，当他绕着另一个人转一圈后，他将再次面对北方，但在这个过程中他已经旋转了整整一圈。同样的道理也适用于圆A绕圆B的情况。

    所以反方的观点是：圆A绕圆B滚动一圈回到起点时，会旋转4次。
    Bob: 为了更加直观地说明这一点，我们可以这样想：假设你用手指按住一个小硬币，然后让这个小硬币绕着一个较大的硬币边缘滚动。当你让小硬币完整地绕大硬币一周时，你会发现小硬币自身会旋转多于三圈。这是因为它不仅要覆盖大硬币的周长，还要加上它自己绕着大硬币中心旋转的那一圈。因此，即使数学上计算出的自转数为3，但实际总旋转次数为4。
    Aggregator: 两位辩论者提出了他们的观点，但似乎存在一个对圆A绕圆B滚动时旋转次数的理解上的差异。Alice使用了正确的几何关系来计算圆A的旋转次数，得出结论是3次。Bob则提出了一种直觉上的解释，认为除了覆盖圆B周长所需的旋转外，还应该加上圆A自身绕圆B中心的一圈。

    实际上，当小圆绕大圆滚动而没有滑动时，小圆不仅会因为沿着大圆周长滚动而旋转，还会因为围绕大圆中心旋转而额外增加一次旋转。因此，根据几何原理，当半径为1/3的大圆的小圆绕着大圆滚动一圈时，它会旋转4次：3次是因为它沿着大圆的周长滚动，还有1次是因为它绕着大圆的中心旋转。

    所以正确答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 43.973 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
