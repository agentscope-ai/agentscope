
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    为了理解这个现象，我们首先需要考虑两个圆的相对运动。假设圆B静止不动，而圆A沿着圆B的边缘无滑动地滚动。由于圆A的半径是圆B半径的1/3，这意味着圆B的周长是圆A周长的3倍。因此，当圆A围绕圆B滚动并回到起始位置时，它必须滚动过相当于圆B周长的距离。

    考虑到圆A和圆B之间的关系，我们可以这样计算：

    - 圆A的周长为 \(2\pi r_A\)。
    - 圆B的周长为 \(2\pi r_B = 2\pi (3r_A) = 6\pi r_A\)。

    当圆A绕着圆B转了一圈，也就是覆盖了圆B的周长，即 \(6\pi r_A\) 的距离。因为圆A每完成一次自转就会移动自己的周长 \(2\pi r_A\) 的距离，所以要走过 \(6\pi r_A\) 的距离，圆A需要自转 \( \frac{6\pi r_A}{2\pi r_A} = 3 \) 次。

    此外，还要考虑到圆A在绕圆B转动的同时也会有一个额外的自转，这是因为圆A除了绕着圆B公转外，还在进行自身的自转。当圆A绕圆B一周时，它实际上完成了4次自转（3次是因为它走过了圆B的周长，还有1次是因为它绕着圆B中心旋转了一圈）。

    综上所述，我的结论是圆A将会旋转4次。不过，如果我们只考虑圆A相对于地面的旋转次数而不包括它绕圆B中心的那一次旋转，那么答案就是3次。根据题目中对“旋转”的定义不同，可能需要进一步澄清。但在通常情况下，我们会认为绕行大圆一圈会产生一个额外的自转。因此，我将坚持说圆A总共会旋转4次。
    Bob: 我理解正方的观点，即认为圆A在绕着圆B滚动一圈回到起点时会旋转4次。然而，我认为这个观点没有完全考虑到无滑动条件下的几何关系。让我来阐述我的看法。

    首先，我们同意圆A的半径是圆B半径的1/3，这意味着圆B的周长是圆A周长的3倍。当圆A沿着圆B边缘滚动而没有滑动时，它必须覆盖相当于圆B周长的距离才能回到起始位置。因此，圆A需要走过的距离就是 \(6\pi r_A\)（其中 \(r_A\) 是圆A的半径）。

    现在关键在于如何计算圆A的自转次数。当我们说圆A“旋转”一次时，我们指的是它绕自己的中心轴旋转了360度。当圆A沿着圆B的边缘滚动，每移动自己周长的一段距离 \(2\pi r_A\) 就算作一次完整的自转。既然圆A要走过 \(6\pi r_A\) 的距离，那么它确实需要完成 \( \frac{6\pi r_A}{2\pi r_A} = 3 \) 次自转。

    但是，正方提到的额外一次自转是基于一个假设，即圆A绕着圆B的中心旋转了一圈，这应该被算作一次自转。实际上，这种额外的自转是由于我们选择了圆B作为参考系的结果。如果我们站在地面上观察，圆A相对于地面的自转次数只有3次。这是因为圆A的自转和公转是同时进行的，并且在这个过程中没有额外的自转产生。

    因此，我的结论是：圆A绕着圆B滚动一圈回到起点时，它总共会旋转3次。这是基于圆A与地面之间的相对运动，而不是圆A与圆B之间的相对运动。
    Aggregator: 两位辩论者提出了各自的见解，Alice认为圆A在绕着圆B滚动一圈回到起点时会旋转4次，其中包括了3次因为走过圆B周长而产生的自转和1次由于绕圆B中心旋转一周的额外自转。Bob则主张只考虑相对于地面的自转次数，应该是3次。

    根据几何学原理，当一个较小的圆沿着一个较大的圆外切滚动且没有滑动时，小圆不仅会因为覆盖大圆周长而自转，还会因为绕大圆中心旋转而产生一次额外的自转。因此，在这种情况下，正确的答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4次




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 47.188 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
