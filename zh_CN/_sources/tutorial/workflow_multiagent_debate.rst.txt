
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方的观点是这样的：假设圆B的半径为R，那么圆A的半径就是R/3。当圆A绕着圆B滚动一圈回到起点时，它实际上沿着一个更大的圆路径移动，这个大圆的半径等于圆A和圆B半径之和，即R + R/3 = 4R/3。

    现在我们来计算一下圆A走过的路径长度。圆A沿着半径为4R/3的大圆轨迹滚动，因此它走过的总距离就是这个大圆的周长，即\(2\pi \times \frac{4R}{3} = \frac{8\pi R}{3}\)。

    圆A自身的周长是\(2\pi \times \frac{R}{3} = \frac{2\pi R}{3}\)。为了得知圆A在绕圆B一圈的过程中旋转了多少次，我们需要用圆A走过的总距离除以圆A自己的周长：

    \(\frac{\frac{8\pi R}{3}}{\frac{2\pi R}{3}} = \frac{8\pi R}{3} \times \frac{3}{2\pi R} = 4\)

    所以根据以上分析，当圆A绕圆B滚动一圈回到起点时，它会恰好旋转4次。
    Alice: 综上所述，我的结论是圆A绕圆B滚动一圈后总共会旋转4次。
    Bob: 我不同意正方的观点。我认为圆A绕圆B滚动一圈后总共会旋转3次，而不是4次。

    首先，我们来考虑圆A与圆B的半径关系。如果圆A的半径是圆B半径的1/3，那么圆B的周长将是圆A周长的3倍。当圆A绕着圆B外切并滚动一圈时，它沿着圆B的周长行进了等于圆B周长的距离。

    由于圆A在没有滑动的情况下滚动，它沿路径滚动的距离（即圆B的周长）相当于圆A自身周长的3倍。这意味着圆A需要完成3个完整的自转才能覆盖这段距离。因此，圆A相对于地面将旋转3次。

    但是，还需要考虑到圆A还围绕圆B的中心做了一次公转。然而，这个公转并不增加额外的自转次数，因为这里的3次自转已经包含了这一公转的效果。这是因为当我们说圆A“旋转”时，指的是它相对于一个固定点的转动，而在这个情况下，它的3次自转已经涵盖了它绕圆B一周的运动。因此，圆A绕圆B滚动一圈回到起点的过程中，总共会旋转3次。
    Aggregator: 双方都提出了他们的观点，但让我们来澄清一下正确的答案。当圆A绕着圆B滚动一圈时，它不仅会完成基于周长比例的自转，还会因为围绕圆B中心公转而增加一次额外的旋转。

    Bob 正确地指出，由于圆A的半径是圆B的1/3，所以圆B的周长是圆A的3倍。因此，在没有滑动的情况下，圆A需要完成3次自转以覆盖圆B的周长。然而，除了这3次自转外，当圆A绕着圆B完成一圈时，它实际上还完成了相对于起点的一次额外旋转。

    这是因为圆A在沿着圆B周长滚动的同时，也在围绕圆B做公转。这种情况下，公转和自转是叠加在一起的。当你跟踪圆A上任意一点的运动轨迹时，你会发现它经历了一次额外的360度旋转。因此，总共来说，圆A绕圆B滚动一圈回到起点的过程中会旋转4次。

    综上所述，Alice 的结论是正确的。圆A绕圆B滚动一圈后总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 23.355 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
