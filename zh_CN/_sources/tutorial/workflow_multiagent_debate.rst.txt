
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转3次。

    首先，我们需要理解题目中的条件。圆A的半径是圆B半径的1/3，这意味着如果圆B的半径为R，那么圆A的半径r = R / 3。当圆A绕着圆B无滑动地滚动时，圆A的周长是2πr，而圆B的周长是2πR。

    由于圆A和圆B之间没有相对滑动，圆A在绕圆B转一圈的过程中，接触点走过的路径长度等于圆B的周长，即2πR。同时，圆A自身的转动也会产生一个额外的旋转。为了计算圆A相对于自己的轴心旋转了多少圈，我们可以将它绕圆B走过的总距离除以它自己的周长：

    \[ \text{圆A的自转次数} = \frac{\text{圆B的周长}}{\text{圆A的周长}} = \frac{2\pi R}{2\pi r} = \frac{R}{r} = \frac{R}{R/3} = 3 \]

    因此，圆A绕着圆B滚动一圈回到原点的过程中，自身会完成3次旋转。这包含了圆A绕圆B公转一周的1次旋转加上圆A自身的2次自转。所以最终答案是圆A总共旋转了3次。
    Bob: 反方观点是：当圆A绕着圆B滚动一圈回到起点时，圆A总共会旋转4次。

    让我们重新审视这个问题。首先，我们承认正方提供的关于周长和半径关系的计算是正确的。如果圆B的半径为R，那么圆A的半径r = R / 3。圆A绕圆B外切滚动一周时，接触点走过的路径长度确实等于圆B的周长2πR。

    然而，关键在于理解圆A的自转。当圆A绕着圆B滚动时，它不仅会因为沿着圆B周长移动而旋转，还会因为要保持与圆B的外切状态而产生额外的旋转。因此，圆A的总旋转次数是由两个部分组成的：

    1. 公转产生的旋转：这个旋转来自于圆A沿着圆B的周长移动，这相当于圆A绕自己的中心旋转了一圈。
    2. 自转产生的旋转：这个旋转是因为圆A必须在不滑动的情况下滚动，所以每当圆A沿圆B的周长前进一个自身的周长（2πr），它就完成了一次自转。

    由于圆A的周长是圆B周长的1/3，圆A需要自转三次才能覆盖圆B的整个周长。加上公转的一次旋转，圆A总共需要旋转四次才能绕圆B一周并回到原位。因此，最终答案是圆A总共会旋转4次。
    Aggregator: 两位辩论者已经清晰地阐述了各自的观点。正方认为圆A绕圆B滚动一圈回到起点时会旋转3次，而反方则认为是4次。现在让我们来确定正确的答案。

    根据几何学和运动学的原理，当一个较小的圆（圆A）沿着一个较大的圆（圆B）外切且无滑动地滚动一周时，它不仅会因为自身的周长而自转，还会因为绕着大圆公转而产生额外的旋转。具体来说，如果小圆的半径是大圆半径的1/3，那么小圆需要自转三次才能覆盖大圆的整个周长，并且在此过程中，小圆也会完成一次完整的公转。

    因此，综合考虑小圆的自转与公转，我们可以得出结论：圆A在绕圆B滚动一圈的过程中，总共会旋转4次。这个答案支持了反方的观点。

    所以，这场辩论可以结束了，正确答案是圆A总共会旋转4次。

    辩论结束，正确答案是： 4




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 36.796 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
