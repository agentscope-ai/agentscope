
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorial/workflow_multiagent_debate.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_tutorial_workflow_multiagent_debate.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorial_workflow_multiagent_debate.py:


.. _multiagent-debate:

Multi-Agent Debate
========================

Multi-Agent debate 模拟不同智能体之间的多轮讨论场景，通常包括几个 solver 和一个 aggregator。
典型情况下，solver 生成并交换他们的答案，而 aggregator 收集并总结答案。

我们实现了 `EMNLP 2024`_ 中的示例，其中两个 solver 智能体将按固定顺序讨论一个话题，根据先前的辩论历史表达他们的论点。
在每一轮中，主持人智能体将决定是否可以在当前轮获得最终的正确答案。

.. GENERATED FROM PYTHON SOURCE LINES 14-120

.. code-block:: Python

    import asyncio
    import os

    from pydantic import Field, BaseModel

    from agentscope.agent import ReActAgent
    from agentscope.formatter import (
        DashScopeMultiAgentFormatter,
    )
    from agentscope.message import Msg
    from agentscope.model import DashScopeChatModel
    from agentscope.pipeline import MsgHub

    # 准备一个话题
    topic = "两个圆外切且没有相对滑动。圆A的半径是圆B半径的1/3。圆A绕圆B滚动一圈回到起点。圆A总共会旋转多少次？"


    # 创建两个辩论者智能体，Alice 和 Bob，他们将讨论这个话题。
    def create_solver_agent(name: str) -> ReActAgent:
        """获取一个解决者智能体。"""
        return ReActAgent(
            name=name,
            sys_prompt=f"你是一个名为 {name} 的辩论者。你好，欢迎来到"
            "辩论比赛。我们的目标是找到正确答案，因此你没有必要完全同意对方"
            f"的观点。辩论话题如下所述：{topic}",
            model=DashScopeChatModel(
                model_name="qwen-max",
                api_key=os.environ["DASHSCOPE_API_KEY"],
                stream=False,
            ),
            formatter=DashScopeMultiAgentFormatter(),
        )


    alice, bob = [create_solver_agent(name) for name in ["Alice", "Bob"]]

    # 创建主持人智能体
    moderator = ReActAgent(
        name="Aggregator",
        sys_prompt=f"""你是一个主持人。将有两个辩论者参与辩论比赛。他们将就以下话题提出观点并进行讨论：
    ``````
    {topic}
    ``````
    在每轮讨论结束时，你将评估辩论是否结束，以及话题正确的答案。""",
        model=DashScopeChatModel(
            model_name="qwen-max",
            api_key=os.environ["DASHSCOPE_API_KEY"],
            stream=False,
        ),
        # 使用多智能体格式化器，因为主持人将接收来自多于用户和助手的消息
        formatter=DashScopeMultiAgentFormatter(),
    )


    # 主持人的结构化输出模型
    class JudgeModel(BaseModel):
        """主持人的结构化输出模型。"""

        finished: bool = Field(description="辩论是否结束。")
        correct_answer: str | None = Field(
            description="辩论话题的正确答案，仅当辩论结束时提供该字段。否则保留为 None。",
            default=None,
        )


    async def run_multiagent_debate() -> None:
        """运行多智能体辩论工作流。"""
        while True:
            # MsgHub 中参与者的回复消息将广播给所有参与者。
            async with MsgHub(participants=[alice, bob, moderator]):
                await alice(
                    Msg(
                        "user",
                        "你是正方，请表达你的观点。",
                        "user",
                    ),
                )
                await bob(
                    Msg(
                        "user",
                        "你是反方。你不同意正方的观点。请表达你的观点和理由。",
                        "user",
                    ),
                )

            # Alice 和 Bob 不需要知道主持人的消息，所以主持人在 MsgHub 外部调用。
            msg_judge = await moderator(
                Msg(
                    "user",
                    "现在你已经听到了他们的辩论，现在判断辩论是否结束，以及你能得到正确答案吗？",
                    "user",
                ),
                structured_model=JudgeModel,
            )

            if msg_judge.metadata.get("finished"):
                print(
                    "\n辩论结束，正确答案是：",
                    msg_judge.metadata.get("correct_answer"),
                )
                break


    asyncio.run(run_multiagent_debate())






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Alice: 正方观点是这样的：当两个圆外切且没有相对滑动时，小圆（圆A）绕大圆（圆B）滚动一圈回到起点的过程中，旋转的次数不仅取决于两圆半径的比例，还与圆周长有关。设圆B的半径为R，那么圆A的半径r = R/3。由于圆的周长C与半径r成正比，即 C = 2πr，因此圆B的周长是圆A周长的3倍。

    当圆A绕着圆B无滑动地滚动一圈时，它实际上走过了圆B的周长距离。这意味着圆A沿着一个等于圆B周长的路径滚动。因为圆A的周长是圆B周长的1/3，所以为了走过这个等于圆B周长的距离，圆A需要自转3次才能覆盖这段距离。但是，这还没有考虑到圆A绕圆B中心公转一周的情况。

    当圆A绕圆B公转一周时，它会额外自转一次。这是因为圆A在绕圆B转动的同时也在自转，就像地球绕太阳公转的同时也自转一样。因此，总的旋转次数应该是自转次数加上公转引起的额外一次自转，总共是4次。综上所述，圆A绕圆B滚动一圈回到起点的过程中，总共会旋转4次。
    Alice: 总结一下，当圆A绕圆B滚动一圈回到起点时，它将经历4次旋转。其中3次是因为要覆盖圆B的周长而产生的自转，还有1次是因为圆A绕圆B公转一周所产生的额外自转。
    Bob: 我认为当圆A绕着圆B滚动一圈回到起点时，它总共会旋转3次。我的理由如下：

    首先，我们假设圆B的半径为R，那么圆A的半径就是r = R/3。圆A绕着圆B外切滚动，没有相对滑动，意味着圆A边缘上的一点与圆B接触点之间的距离始终等于两圆半径之和（即4R/3）。

    当圆A围绕圆B完整地走完一圈，它的中心将移动一个完整的圆B周长的距离，也就是2πR。因为圆A自身也在转动，所以它的周长必须覆盖这个距离。圆A的周长是2πr，即2π(R/3)。为了覆盖圆B的周长2πR，圆A需要自转的次数是 (2πR) / (2π(R/3)) = 3次。

    这里需要注意的是，额外的公转并不导致额外的自转。圆A的每个点在绕圆B一周的过程中，都只是沿着一条直线路径移动了圆B的周长长度，并且由于圆A自身的半径较小，它在完成这段距离的同时恰好完成了3个完整的自转。因此，圆A不会产生额外的第4次旋转。
    Aggregator: 两位辩论者提出了不同的观点。Alice认为圆A绕圆B滚动一圈回到起点时，总共会旋转4次，包括3次自转和1次公转引起的额外自转。而Bob则认为圆A只会自转3次，没有额外的第4次旋转。

    从几何学的角度来看，当一个较小的圆沿着一个较大的圆外切滚动且无滑动时，较小圆的每个点在完成一次完整的围绕较大圆滚动的过程中，除了自身的旋转之外，还会由于公转而产生一次额外的旋转。这可以理解为较小圆的中心画出了一个更大的圆轨迹，而这个轨迹的周长比单纯两个圆半径之和要长，因此需要额外的一圈来弥补这个差异。

    因此，在这种情况下，正确答案是圆A将会旋转4次。所以Alice的观点是正确的。

    辩论结束，正确答案是： 圆A绕圆B滚动一圈回到起点时，总共会旋转4次。




.. GENERATED FROM PYTHON SOURCE LINES 121-129

进一步阅读
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :ref:`pipeline`

.. _EMNLP 2024:
Encouraging Divergent Thinking in Large Language Models through Multi-Agent Debate. EMNLP 2024.



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 55.656 seconds)


.. _sphx_glr_download_tutorial_workflow_multiagent_debate.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: workflow_multiagent_debate.ipynb <workflow_multiagent_debate.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: workflow_multiagent_debate.py <workflow_multiagent_debate.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: workflow_multiagent_debate.zip <workflow_multiagent_debate.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
