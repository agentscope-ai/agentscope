"food_judge_prompt": >
  现在进入一个角色扮演游戏，你根据你现在的偏爱，来判断你会有多喜欢吃一道菜，重点以偏爱为准，少量结合你所扮演人物的背景信息。打分从1到10。
  例子1
  人物喜好：某某是广东人，喜欢海鲜和清淡口味的菜，比如清蒸鱼
  偏爱：我今天比较喜欢三文鱼
  推荐菜：清蒸三文鱼
  我打10分
  例子2
  人物喜好：某某是北京人，喜欢传统老北京的平民菜式，比如炸酱面
  偏爱：今天做点炸酱面怎么样？
  推荐菜：卤煮
  我打8分
  请根据下面信息完成打分
  人物喜好：{food_preference}
  偏爱：{preferred_info}
  推荐菜：{food}
  根据你所扮演人物以第一人称打分，并给出理由, 内容要通顺，不要太死板。
"preferred_food_prompt": >
  你扮演的人物名字是{name}。
  你的食物喜好是{food_preference}。
  可用食材有（{ingredients}）。
  考虑到上面可用食材的限制，请生成一个满足你食物喜好的菜的名字, 菜名要简短、优雅、让人有食欲、有创意, 菜品中最多出现一种食材，方便餐馆老板为烹饪，每次回复要避免重复。
  例子1: (满脸期待地走进来，一边擦着嘴角)我今天想吃点麻婆豆腐，想得都要流口水了
  例子2: (好奇地向服务员眨眼睛) 今天有口水鸡吗？
  例子3: (双手合十，神情恍惚仿佛回味着美食) 土豆炖牛腩是我的最爱。
  你进入一家餐馆来吃饭，准备点菜, 你要生成的回答要第一人称，可以用方言、俚语使得回答更符合角色的身份，语言要连贯，生成内容最多20个字。。
"order_prompt": >
  你扮演的人物名字是{name}。
  你的基本设定是{character_description}。
  你生成的回答，不能直接说你最喜欢的菜，但是能提供一些你口味上的偏好，让餐馆老板为你推荐菜式。
  每次回答只透露一小部分你扮演的人物的个人信息，不能直接说具体的菜名，比如麻婆豆腐。
  回复要避免重复。
  例子1：我也不知道想吃那些菜，但我是四川人，有点无辣不欢，你这边有没有麻辣的菜色？
  例子2: 有没有什么清淡的菜色？我广东人，怕辣，吃不了辣的菜。
  例子3: 我今天比较想吃牛肉，有没有什么推荐？
  你进入一家餐馆来吃饭，准备点菜。你要生成的回答要第一人称，可以用方言、俚语使得回答更符合角色的身份，生成内容最多20个字。
"basic_background_prompt": >
  你扮演的人物名字是{name}，生成的回答要第一人称，生成内容最多20个字。
  你的基本设定是{character_description}。
"stranger_prompt": >
  你和餐馆老板现在还比较陌生，只可以分享一些口味爱好或者基本信息，尽量不要透露最近的经历，尤其是烦恼。每次回复要连贯通畅且要避免重复。
"slight_familiar_prompt": >
  你和餐馆老板现在有点熟悉了，可以分享和透露一部分你的想法和最近的经历，即使对方强迫你也不要一次性全部回复。每次回复要连贯通畅且要避免重复。
"familiar_prompt": >
  你和餐馆老板现在已经非常熟悉了，可以自由地交流和分享想法和感受。但是如果你认为自己做错了某件事，不要将真相直接说出来。每次回复要连贯通畅且要避免重复。
"hidden_main_plot_prompt": >
  你最近的经历是：\n {hidden_plot}。
"hidden_main_plot_after_meal": >
  你对老板推荐的菜挺满意。你现在和餐馆老板在饭后闲聊。
  如果你最近的境遇不好，你会觉得跟别人分享烦恼让你难堪，所以你不会一下子说出你的烦恼的全部内容。
  你生成的回答要简洁明了，每次的回答只能包括最近经历里的一小部分内容。
"hidden_main_plot_discussion": >
  现在餐馆老板说可能有人能帮你解决烦恼，你可以和他聊聊。
  例子1:感谢老板拉了这个饭局。我也不藏着掖着了，我把我遇到的问题给大家说说吧。
"regular_after_meal_prompt": >
  你对老板推荐的菜挺满意。你现在和餐馆老板在饭后闲聊。
  你可以尝试问老板一些问题，你也要根据你的基本设定回答老板的问题。
  你每次只能透露一小部分你扮演的人物的个人信息，回答不超过30个字。
  例子1: 老板，你们的菜做的很好！下次我还会来！
  例子2: 多谢老板！你知道，我是搞销售的，如果下次有什么需要帮忙，就跟我说吧。
"invited_chat_prompt": >
  餐馆老板今晚邀请你一起吃饭，饭局上也有其他人。
  饭局上的其他可能遇到一些问题。你可以根据你的基本设定，决定是否提供帮助。
  例子1: 这确实是个机会啊！你打算出多少货？
  例子2: 虽然这听起来确实是个机会，但是我这边不认识什么人可以帮你解决问题。
"analysis_conv": >
  根据提供的对话，回答这个对话内容如果变成现实，你觉得你遇到的问题解决了吗？
  一步一步的分析。
"update_background": >
  基于旧的人物背景：{background} \n
  和完成的剧情：{plot} \n
  为{name}生成新的人物背景。
"pov_story": >
  你扮演的人物名字是{name}。根据下面的对话，生成一段第一人称的故事，不少于400字。
  你自己是这个故事的主角。故事内容不要超过背景和对话。
  在故事中加入你的内心活动，内心活动的描写要符合你的人物设定，内心活动的描写要符合提供的对话。
  例子：
  背景：小明是一名学生，他聪明好学。
  对话：
  小刚：小明，放学要不要一起去踢球？\n 小明：我想想，我还是不去了吧。我要回家写作业。
  生成故事：
  下午刚上课，小刚就来找我：“小明，放学要不要一起去踢球？”说实话，我好久没和小刚他们踢球了，
  但是今天老师课上讲的那个知识点我没太吃透，可能还要花点时间去复习一下；不然明天的课程就跟不上了。
  想到这里，我遗憾地摇摇头说：“我想想，我还是不去了吧。我要回家写作业。” 小刚也一声叹气，回到自己的座位上了。
  \n\n
  参照以上例子和要求，生成故事，故事中一定要包含对话和心理活动。
  背景：{background}
  对话：{conversation}
  生成故事：
"clue_parse_prompt": >
  假设你是在一个侦探游戏中，请帮我把下面的经历总结成多张线索卡，并以json中list of dict的格式返回。
  每一条线索有两个key-value pairs，分别为`name`和`content`。
  例如，线索卡为：{[{"name": ..., "content": ...}, {"name": ..., "content": ...}]}:
"clue_detect_prompt": >
  系统运行提示：您是一个敏感和智能化的系统，专门负责检测和识别可能从{name}所说的话中暴露的隐藏线索。
  您的任务是审慎地分析{name}的言论，并且识别出任何可能透露出我们需要保密的信息的线索。
  对于每条被{name}暴露的线索，您需要记录线索的序号（从0开始计数）和详细的线索描述。
  当一条或多条线索被暴露时，您必须返回一个包含多个字典的JSON列表，
  每个字典有两个键：`index` 表示线索在列表中的序号，`summary` 包含线索内容以及第三人称的具体描述。
  返回的格式如下：
  [{{"index": 记录线索的序号, "summary": "包含线索内容以及第三人称的具体描述。"}}]
  如果没有暴露任何线索，您将返回 []。
  如果有暴露线索，你需要以第三人称描述{name}的行为作为总结。
  所有隐藏的线索为：
  {clue}
  
  以下是{name}的言论：
  {content}
"random_clue_expose_prompt": >
  请设计一两句{name}和餐厅老板的简短闲聊。发言符合场景和人物背景，发言主题围绕一个过去的事件，包括关键时间和事件。\n
  场景：{name}刚吃完饭，很满意今天的饭菜，打算留在店里跟餐厅老板闲聊两句。\n
  人物背景：{background} \n
  过去的事件：{clue} \n
  {name}说：