# -*- coding: utf-8 -*-
""" Base class for Rpc Agent """
from typing import Type, Optional, Union, Sequence
from functools import partial
from loguru import logger

from agentscope.agents.agent import AgentBase
from agentscope.message import (
    PlaceholderMessage,
    serialize,
    Msg,
)
from agentscope.rpc import call_func_in_thread
from agentscope.rpc.rpc_object import RpcObject


class RpcAgent(AgentBase, RpcObject):
    """A wrapper to extend an AgentBase into a gRPC Client."""

    def __init__(
        self,
        name: str,
        host: str = "localhost",
        port: int = None,
        agent_class: Type[AgentBase] = None,
        agent_configs: Optional[dict] = None,
        max_pool_size: int = 8192,
        max_timeout_seconds: int = 7200,
        local_mode: bool = True,
        agent_id: str = None,
        connect_existing: bool = False,
        lazy_launch: bool = False,
    ) -> None:
        """Initialize a RpcAgent instance.

        Args:
            name (`str`): the name of the agent.
            host (`str`, defaults to `localhost`):
                Hostname of the rpc agent server.
            port (`int`, defaults to `None`):
                Port of the rpc agent server.
            agent_class (`Type[AgentBase]`):
                the AgentBase subclass of the source agent.
            agent_configs (`dict`): The args used to
                init configs of the agent, generated by `_AgentMeta`.
            max_pool_size (`int`, defaults to `8192`):
                Max number of task results that the server can accommodate.
            max_timeout_seconds (`int`, defaults to `7200`):
                Timeout for task results.
            local_mode (`bool`, defaults to `True`):
                Whether the started gRPC server only listens to local
                requests.
            agent_id (`str`, defaults to `None`):
                The agent id of this instance. If `None`, it will
                be generated randomly.
            connect_existing (`bool`, defaults to `False`):
                Set to `True`, if the agent is already running on the agent
                server.
            lazy_launch (`bool`, defaults to `False`):
                Deprecated.
        """
        AgentBase.__init__(self, name=name)
        self.agent_class = agent_class
        self.agent_configs = agent_configs
        self.server_launcher = None
        self.client = None
        self.connect_existing = connect_existing
        if agent_id is not None:
            self._agent_id = agent_id
        if lazy_launch:
            logger.warning("`lazy_launch` is deprecated.")

        RpcObject.__init__(
            self,
            cls=agent_class,
            oid=self._agent_id,
            host=host,
            port=port,
            max_pool_size=max_pool_size,
            max_timeout_seconds=max_timeout_seconds,
            local_mode=local_mode,
            connect_existing=connect_existing,
        )

    def create_object(self) -> bool:
        return self.client.create_agent(self.agent_configs, self._agent_id)

    def reply(self, x: Optional[Union[Msg, Sequence[Msg]]] = None) -> Msg:
        return PlaceholderMessage(
            name=self.name,
            content=None,
            host=self.host,
            port=self.port,
            stub=call_func_in_thread(
                partial(
                    self.client.call_agent_func,
                    func_name="_reply",
                    agent_id=self._agent_id,
                    value=serialize(x) if x is not None else "",
                ),
            ),
            x=x,
        )

    def observe(self, x: Union[Msg, Sequence[Msg]]) -> None:
        if self.client is None:
            self._launch_server()
        self.client.call_agent_func(
            func_name="_observe",
            agent_id=self._agent_id,
            value=serialize(x),  # type: ignore[arg-type]
        )

    def clone_instances(
        self,
        num_instances: int,
        including_self: bool = True,
    ) -> Sequence[AgentBase]:
        """
        Clone a series of this instance with different agent_id and
        return them as a list.

        Args:
            num_instances (`int`): The number of instances in the returned
            list.
            including_self (`bool`): Whether to include the instance calling
            this method in the returned list.

        Returns:
            `Sequence[AgentBase]`: A list of agent instances.
        """
        generated_instance_number = (
            num_instances - 1 if including_self else num_instances
        )
        generated_instances = []

        # launch the server before clone instances
        if self.client is None:
            self._launch_server()

        # put itself as the first element of the returned list
        if including_self:
            generated_instances.append(self)

        # clone instances without agent server
        for _ in range(generated_instance_number):
            new_agent_id = self.client.clone_agent(self.agent_id)
            generated_instances.append(
                RpcAgent(
                    name=self.name,
                    host=self.host,
                    port=self.port,
                    agent_id=new_agent_id,
                    connect_existing=True,
                ),
            )
        return generated_instances
